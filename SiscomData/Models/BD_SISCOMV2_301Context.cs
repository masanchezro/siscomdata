using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace SiscomData.Models
{
    public partial class BD_SISCOMV2_301Context : DbContext
    {
        public BD_SISCOMV2_301Context()
        {
        }

        public BD_SISCOMV2_301Context(DbContextOptions<BD_SISCOMV2_301Context> options)
            : base(options)
        {
        }

        public virtual DbSet<AumentoPrecio> AumentoPrecios { get; set; }
        public virtual DbSet<Baakm02> Baakm02s { get; set; }
        public virtual DbSet<Bcfkm01> Bcfkm01s { get; set; }
        public virtual DbSet<Bdakm01> Bdakm01s { get; set; }
        public virtual DbSet<Bdakm01SatAddendum> Bdakm01SatAddenda { get; set; }
        public virtual DbSet<Bdakm02> Bdakm02s { get; set; }
        public virtual DbSet<Bdakm07> Bdakm07s { get; set; }
        public virtual DbSet<Bdakm14> Bdakm14s { get; set; }
        public virtual DbSet<Borrame> Borrames { get; set; }
        public virtual DbSet<BorrameRespaldo> BorrameRespaldos { get; set; }
        public virtual DbSet<BorrameRespaldodetalle> BorrameRespaldodetalles { get; set; }
        public virtual DbSet<BorrameRespaldodetallepago> BorrameRespaldodetallepagos { get; set; }
        public virtual DbSet<Borrar1> Borrar1s { get; set; }
        public virtual DbSet<BorrarDoble> BorrarDobles { get; set; }
        public virtual DbSet<BorrarTmcofaruteo> BorrarTmcofaruteos { get; set; }
        public virtual DbSet<CargosErroneosBk> CargosErroneosBks { get; set; }
        public virtual DbSet<Carteraintmp> Carteraintmps { get; set; }
        public virtual DbSet<ChecarSinfactura> ChecarSinfacturas { get; set; }
        public virtual DbSet<ClienteRefBorra> ClienteRefBorras { get; set; }
        public virtual DbSet<ControlLog> ControlLogs { get; set; }
        public virtual DbSet<Coor> Coors { get; set; }
        public virtual DbSet<Correotemporal> Correotemporals { get; set; }
        public virtual DbSet<CteFirma133290> CteFirma133290s { get; set; }
        public virtual DbSet<CteFirma74963> CteFirma74963s { get; set; }
        public virtual DbSet<CteFirmaDo> CteFirmaDos { get; set; }
        public virtual DbSet<DOriente> DOrientes { get; set; }
        public virtual DbSet<Detalle> Detalles { get; set; }
        public virtual DbSet<Diferenciafolio> Diferenciafolios { get; set; }
        public virtual DbSet<Documento> Documentos { get; set; }
        public virtual DbSet<Documentos2> Documentos2s { get; set; }
        public virtual DbSet<Documentos3> Documentos3s { get; set; }
        public virtual DbSet<Duplicados777261> Duplicados777261s { get; set; }
        public virtual DbSet<Duplicados777276> Duplicados777276s { get; set; }
        public virtual DbSet<Encuestum> Encuesta { get; set; }
        public virtual DbSet<Estudio> Estudios { get; set; }
        public virtual DbSet<ExentosAumento> ExentosAumentos { get; set; }
        public virtual DbSet<Finaltransmitidum> Finaltransmitida { get; set; }
        public virtual DbSet<Folioalmancen> Folioalmancens { get; set; }
        public virtual DbSet<Foliocorreo> Foliocorreos { get; set; }
        public virtual DbSet<Folioinvent> Folioinvents { get; set; }
        public virtual DbSet<FoliosFixeado> FoliosFixeados { get; set; }
        public virtual DbSet<GeocodificadosOxi> GeocodificadosOxis { get; set; }
        public virtual DbSet<Medico> Medicos { get; set; }
        public virtual DbSet<Noexiste> Noexistes { get; set; }
        public virtual DbSet<NotasCredito> NotasCreditos { get; set; }
        public virtual DbSet<Obcfkm07> Obcfkm07s { get; set; }
        public virtual DbSet<Obcfkm07Facturado> Obcfkm07Facturados { get; set; }
        public virtual DbSet<Obcfkm07RentaComercio> Obcfkm07RentaComercios { get; set; }
        public virtual DbSet<Odgkh05> Odgkh05s { get; set; }
        public virtual DbSet<Oriente> Orientes { get; set; }
        public virtual DbSet<Paciente> Pacientes { get; set; }
        public virtual DbSet<PasoTdconocomg> PasoTdconocomgs { get; set; }
        public virtual DbSet<PasoThcoinmov> PasoThcoinmovs { get; set; }
        public virtual DbSet<PedidosMayo> PedidosMayos { get; set; }
        public virtual DbSet<Pendiente> Pendientes { get; set; }
        public virtual DbSet<Pendienteinvent> Pendienteinvents { get; set; }
        public virtual DbSet<PreciosConsumos2> PreciosConsumos2s { get; set; }
        public virtual DbSet<PreciosConsumos3> PreciosConsumos3s { get; set; }
        public virtual DbSet<RCostoProductoPlaneacionDetalle> RCostoProductoPlaneacionDetalles { get; set; }
        public virtual DbSet<RentaOxidomTmp> RentaOxidomTmps { get; set; }
        public virtual DbSet<ReprocesoVentasCierre> ReprocesoVentasCierres { get; set; }
        public virtual DbSet<RespadoTarjeta> RespadoTarjetas { get; set; }
        public virtual DbSet<Respaldo> Respaldos { get; set; }
        public virtual DbSet<RespaldoEdithcar> RespaldoEdithcars { get; set; }
        public virtual DbSet<Respaldoenvase> Respaldoenvases { get; set; }
        public virtual DbSet<Rfcvalido> Rfcvalidos { get; set; }
        public virtual DbSet<Saldosfactura> Saldosfacturas { get; set; }
        public virtual DbSet<Secuencium> Secuencia { get; set; }
        public virtual DbSet<ServiciosNoFacturado> ServiciosNoFacturados { get; set; }
        public virtual DbSet<Servidare> Servidares { get; set; }
        public virtual DbSet<Sheet1> Sheet1s { get; set; }
        public virtual DbSet<Silvium> Silvia { get; set; }
        public virtual DbSet<SucCorreo319> SucCorreo319s { get; set; }
        public virtual DbSet<Tccoafdetalle> Tccoafdetalles { get; set; }
        public virtual DbSet<Tccoafrequerido> Tccoafrequeridos { get; set; }
        public virtual DbSet<Tccoafsistema> Tccoafsistemas { get; set; }
        public virtual DbSet<Tccoaftipo> Tccoaftipos { get; set; }
        public virtual DbSet<Tccocabancoscomp> Tccocabancoscomps { get; set; }
        public virtual DbSet<Tccocacondetgto> Tccocacondetgtos { get; set; }
        public virtual DbSet<Tccocactaspartida> Tccocactaspartidas { get; set; }
        public virtual DbSet<Tccocacuentagasto> Tccocacuentagastos { get; set; }
        public virtual DbSet<TccocacuentagastosConta2> TccocacuentagastosConta2s { get; set; }
        public virtual DbSet<TccocacuentagastosContum> TccocacuentagastosConta { get; set; }
        public virtual DbSet<TccocacuentagastosResp> TccocacuentagastosResps { get; set; }
        public virtual DbSet<Tccocadepartamento> Tccocadepartamentos { get; set; }
        public virtual DbSet<TccocadepartamentosEstatus> TccocadepartamentosEstatuses { get; set; }
        public virtual DbSet<Tccocadiasrevcob> Tccocadiasrevcobs { get; set; }
        public virtual DbSet<Tccocaempanticipo> Tccocaempanticipos { get; set; }
        public virtual DbSet<Tccocafestivo> Tccocafestivos { get; set; }
        public virtual DbSet<Tccocaintersuc> Tccocaintersucs { get; set; }
        public virtual DbSet<Tccocasaldosproc> Tccocasaldosprocs { get; set; }
        public virtual DbSet<Tccocastatusseg> Tccocastatussegs { get; set; }
        public virtual DbSet<Tccocatcofeprisproducto> Tccocatcofeprisproductos { get; set; }
        public virtual DbSet<Tccocatcondicionesespecialestra> Tccocatcondicionesespecialestras { get; set; }
        public virtual DbSet<Tccocatdenogenerica> Tccocatdenogenericas { get; set; }
        public virtual DbSet<Tccocatformafarmaceutica> Tccocatformafarmaceuticas { get; set; }
        public virtual DbSet<Tccocatgasto> Tccocatgastos { get; set; }
        public virtual DbSet<Tccocatidenprod> Tccocatidenprods { get; set; }
        public virtual DbSet<Tccocating> Tccocatings { get; set; }
        public virtual DbSet<Tccocatmateriaprima> Tccocatmateriaprimas { get; set; }
        public virtual DbSet<Tccocatmerc> Tccocatmercs { get; set; }
        public virtual DbSet<Tccocatormateriaprima> Tccocatormateriaprimas { get; set; }
        public virtual DbSet<Tccocatprodmedicinale> Tccocatprodmedicinales { get; set; }
        public virtual DbSet<Tccocatsector> Tccocatsectors { get; set; }
        public virtual DbSet<Tccocatsectorcofepri> Tccocatsectorcofepris { get; set; }
        public virtual DbSet<Tccocattipogasto> Tccocattipogastos { get; set; }
        public virtual DbSet<Tccocattipomaterium> Tccocattipomateria { get; set; }
        public virtual DbSet<Tccocpclaveprodservcp> Tccocpclaveprodservcps { get; set; }
        public virtual DbSet<Tccocpclaveunidadpeso> Tccocpclaveunidadpesos { get; set; }
        public virtual DbSet<Tccocpconfautotransporte> Tccocpconfautotransportes { get; set; }
        public virtual DbSet<Tccocpcvetransporte> Tccocpcvetransportes { get; set; }
        public virtual DbSet<Tccocpmaterialpeligroso> Tccocpmaterialpeligrosos { get; set; }
        public virtual DbSet<Tccocptipoembalaje> Tccocptipoembalajes { get; set; }
        public virtual DbSet<Tccocptipoestacion> Tccocptipoestacions { get; set; }
        public virtual DbSet<Tccocptipopermiso> Tccocptipopermisos { get; set; }
        public virtual DbSet<Tccoctbanco> Tccoctbancos { get; set; }
        public virtual DbSet<Tccoctbloqueapre> Tccoctbloqueapres { get; set; }
        public virtual DbSet<Tccoctcondpago> Tccoctcondpagos { get; set; }
        public virtual DbSet<Tccoctgiro> Tccoctgiros { get; set; }
        public virtual DbSet<Tccoctgpocium> Tccoctgpocia { get; set; }
        public virtual DbSet<Tccoctmcapto> Tccoctmcaptos { get; set; }
        public virtual DbSet<Tccoctpagoautomatico> Tccoctpagoautomaticos { get; set; }
        public virtual DbSet<Tccoctporcodpreesp> Tccoctporcodpreesps { get; set; }
        public virtual DbSet<Tccoctsee> Tccoctsees { get; set; }
        public virtual DbSet<Tccoctsubgiro> Tccoctsubgiros { get; set; }
        public virtual DbSet<Tccoctsubtct> Tccoctsubtcts { get; set; }
        public virtual DbSet<Tccocttc> Tccocttcs { get; set; }
        public virtual DbSet<Tccocttipoejega> Tccocttipoejegas { get; set; }
        public virtual DbSet<Tccocvepedidossap> Tccocvepedidossaps { get; set; }
        public virtual DbSet<Tccoenerrorcorpo> Tccoenerrorcorpos { get; set; }
        public virtual DbSet<Tccoenfamilium> Tccoenfamilia { get; set; }
        public virtual DbSet<Tccoenponderaox> Tccoenponderaoxes { get; set; }
        public virtual DbSet<Tccoenruncampana> Tccoenruncampanas { get; set; }
        public virtual DbSet<Tccoensucrem> Tccoensucrems { get; set; }
        public virtual DbSet<Tccoentgarantium> Tccoentgarantia { get; set; }
        public virtual DbSet<Tccoenvalvula> Tccoenvalvulas { get; set; }
        public virtual DbSet<Tccoenvmovrem> Tccoenvmovrems { get; set; }
        public virtual DbSet<Tccoenvstatusrem> Tccoenvstatusrems { get; set; }
        public virtual DbSet<Tccoenvtiporem> Tccoenvtiporems { get; set; }
        public virtual DbSet<Tccoerror> Tccoerrors { get; set; }
        public virtual DbSet<Tccoexpfarancelarium> Tccoexpfarancelaria { get; set; }
        public virtual DbSet<Tccoexppuerto> Tccoexppuertos { get; set; }
        public virtual DbSet<Tccoexptermventum> Tccoexptermventa { get; set; }
        public virtual DbSet<Tccoexptipoenvio> Tccoexptipoenvios { get; set; }
        public virtual DbSet<Tccoexpzonacot> Tccoexpzonacots { get; set; }
        public virtual DbSet<Tccofaaddendum> Tccofaaddenda { get; set; }
        public virtual DbSet<Tccofaaduana> Tccofaaduanas { get; set; }
        public virtual DbSet<Tccofaalmacendestino> Tccofaalmacendestinos { get; set; }
        public virtual DbSet<Tccofacatformapagosat> Tccofacatformapagosats { get; set; }
        public virtual DbSet<Tccofacatpago> Tccofacatpagos { get; set; }
        public virtual DbSet<Tccofacatregfi> Tccofacatregfis { get; set; }
        public virtual DbSet<Tccofacatrelacion> Tccofacatrelacions { get; set; }
        public virtual DbSet<Tccofacattfactor> Tccofacattfactors { get; set; }
        public virtual DbSet<Tccofacattimpuesto> Tccofacattimpuestos { get; set; }
        public virtual DbSet<Tccofacattiposcomp> Tccofacattiposcomps { get; set; }
        public virtual DbSet<Tccofacatusocfdi> Tccofacatusocfdis { get; set; }
        public virtual DbSet<Tccofacolocapuefac> Tccofacolocapuefacs { get; set; }
        public virtual DbSet<Tccofadesolicitude> Tccofadesolicitudes { get; set; }
        public virtual DbSet<Tccofamotivonc> Tccofamotivoncs { get; set; }
        public virtual DbSet<Tccofapatente> Tccofapatentes { get; set; }
        public virtual DbSet<Tccofapedciladd> Tccofapedciladds { get; set; }
        public virtual DbSet<Tccofapedimento> Tccofapedimentos { get; set; }
        public virtual DbSet<Tccofapreusuario> Tccofapreusuarios { get; set; }
        public virtual DbSet<Tccofapromocione> Tccofapromociones { get; set; }
        public virtual DbSet<Tccofapromomayoreo> Tccofapromomayoreos { get; set; }
        public virtual DbSet<Tccofatfacturacion> Tccofatfacturacions { get; set; }
        public virtual DbSet<TccofatipoAddendum> TccofatipoAddenda { get; set; }
        public virtual DbSet<Tccogralgeoremove> Tccogralgeoremoves { get; set; }
        public virtual DbSet<Tccograreasnotif> Tccograreasnotifs { get; set; }
        public virtual DbSet<Tccogrcaport> Tccogrcaports { get; set; }
        public virtual DbSet<Tccogrcat> Tccogrcats { get; set; }
        public virtual DbSet<Tccogrcatsat> Tccogrcatsats { get; set; }
        public virtual DbSet<Tccogrcodigocliente> Tccogrcodigoclientes { get; set; }
        public virtual DbSet<Tccogrcolonium> Tccogrcolonia { get; set; }
        public virtual DbSet<Tccogrcorreonotif> Tccogrcorreonotifs { get; set; }
        public virtual DbSet<Tccogrcp> Tccogrcps { get; set; }
        public virtual DbSet<Tccogrcp2> Tccogrcp2s { get; set; }
        public virtual DbSet<Tccogredo> Tccogredos { get; set; }
        public virtual DbSet<Tccogreqexcluye> Tccogreqexcluyes { get; set; }
        public virtual DbSet<Tccogrestado> Tccogrestados { get; set; }
        public virtual DbSet<Tccogrexproceso> Tccogrexprocesos { get; set; }
        public virtual DbSet<Tccogrfarancelarium> Tccogrfarancelaria { get; set; }
        public virtual DbSet<Tccogridentificacarga> Tccogridentificacargas { get; set; }
        public virtual DbSet<Tccogrintercomp> Tccogrintercomps { get; set; }
        public virtual DbSet<Tccogriva> Tccogrivas { get; set; }
        public virtual DbSet<Tccogrlocalidad> Tccogrlocalidads { get; set; }
        public virtual DbSet<Tccogrlogin> Tccogrlogins { get; set; }
        public virtual DbSet<Tccogrmisc> Tccogrmiscs { get; set; }
        public virtual DbSet<Tccogrmunicipio> Tccogrmunicipios { get; set; }
        public virtual DbSet<Tccogroperacion> Tccogroperacions { get; set; }
        public virtual DbSet<Tccogrpai> Tccogrpais { get; set; }
        public virtual DbSet<Tccogrpais2> Tccogrpais2s { get; set; }
        public virtual DbSet<Tccogrperfil> Tccogrperfils { get; set; }
        public virtual DbSet<Tccogrpermiso> Tccogrpermisos { get; set; }
        public virtual DbSet<Tccogrproccierre> Tccogrproccierres { get; set; }
        public virtual DbSet<Tccogrret> Tccogrrets { get; set; }
        public virtual DbSet<Tccogrsuc> Tccogrsucs { get; set; }
        public virtual DbSet<TccogrsucCodigosdir> TccogrsucCodigosdirs { get; set; }
        public virtual DbSet<Tccogrterminale> Tccogrterminales { get; set; }
        public virtual DbSet<TccogrterminalesRe> TccogrterminalesRes { get; set; }
        public virtual DbSet<Tccogrtmon> Tccogrtmons { get; set; }
        public virtual DbSet<Tccogrtmov> Tccogrtmovs { get; set; }
        public virtual DbSet<Tccogrtraslado> Tccogrtraslados { get; set; }
        public virtual DbSet<TccogrupoLinea> TccogrupoLineas { get; set; }
        public virtual DbSet<Tccoidcaja> Tccoidcajas { get; set; }
        public virtual DbSet<Tccoidcatpago> Tccoidcatpagos { get; set; }
        public virtual DbSet<Tccoiddettpago> Tccoiddettpagos { get; set; }
        public virtual DbSet<Tccoidinfdiario> Tccoidinfdiarios { get; set; }
        public virtual DbSet<Tccoidpolizasmov> Tccoidpolizasmovs { get; set; }
        public virtual DbSet<TccoidribbonOption> TccoidribbonOptions { get; set; }
        public virtual DbSet<TccoidribbonTab> TccoidribbonTabs { get; set; }
        public virtual DbSet<Tccoidusuariospermitido> Tccoidusuariospermitidos { get; set; }
        public virtual DbSet<Tccoinaduana> Tccoinaduanas { get; set; }
        public virtual DbSet<Tccoinalmemp> Tccoinalmemps { get; set; }
        public virtual DbSet<Tccoinalmper> Tccoinalmpers { get; set; }
        public virtual DbSet<Tccoinauts03> Tccoinauts03s { get; set; }
        public virtual DbSet<Tccoinccper> Tccoinccpers { get; set; }
        public virtual DbSet<Tccoinccsap> Tccoinccsaps { get; set; }
        public virtual DbSet<Tccoincodconsigna> Tccoincodconsignas { get; set; }
        public virtual DbSet<Tccoindiasur> Tccoindiasurs { get; set; }
        public virtual DbSet<Tccoindiasuralter> Tccoindiasuralters { get; set; }
        public virtual DbSet<Tccoinmotivorechazo> Tccoinmotivorechazos { get; set; }
        public virtual DbSet<Tccoinmotivosmov> Tccoinmotivosmovs { get; set; }
        public virtual DbSet<Tccoinmotivossap> Tccoinmotivossaps { get; set; }
        public virtual DbSet<Tccoinprodclave> Tccoinprodclaves { get; set; }
        public virtual DbSet<Tccoinproddescuento> Tccoinproddescuentos { get; set; }
        public virtual DbSet<Tccoinprov> Tccoinprovs { get; set; }
        public virtual DbSet<Tccoinreg4730> Tccoinreg4730s { get; set; }
        public virtual DbSet<Tccoinrutasdi> Tccoinrutasdis { get; set; }
        public virtual DbSet<Tccoinsubtenv> Tccoinsubtenvs { get; set; }
        public virtual DbSet<Tccointdescuento> Tccointdescuentos { get; set; }
        public virtual DbSet<Tccointenv> Tccointenvs { get; set; }
        public virtual DbSet<Tccointpedido> Tccointpedidos { get; set; }
        public virtual DbSet<Tccointprod> Tccointprods { get; set; }
        public virtual DbSet<Tccoinum> Tccoinums { get; set; }
        public virtual DbSet<Tccoinun> Tccoinuns { get; set; }
        public virtual DbSet<Tccoinunidaddi> Tccoinunidaddis { get; set; }
        public virtual DbSet<TccoinunidaddisRe> TccoinunidaddisRes { get; set; }
        public virtual DbSet<Tccoinunimg> Tccoinunimgs { get; set; }
        public virtual DbSet<Tcconocodinccomg> Tcconocodinccomgs { get; set; }
        public virtual DbSet<Tcconoeje> Tcconoejes { get; set; }
        public virtual DbSet<Tcconoemp> Tcconoemps { get; set; }
        public virtual DbSet<Tcconoteje> Tcconotejes { get; set; }
        public virtual DbSet<Tccooxbintarjetum> Tccooxbintarjeta { get; set; }
        public virtual DbSet<Tccooxclasifica> Tccooxclasificas { get; set; }
        public virtual DbSet<Tccooxcliente> Tccooxclientes { get; set; }
        public virtual DbSet<Tccooxclinica> Tccooxclinicas { get; set; }
        public virtual DbSet<Tccooxcodigosfactura> Tccooxcodigosfacturas { get; set; }
        public virtual DbSet<Tccooxcodigostc> Tccooxcodigostcs { get; set; }
        public virtual DbSet<Tccooxconfturnosrutum> Tccooxconfturnosruta { get; set; }
        public virtual DbSet<Tccooxdestinatario> Tccooxdestinatarios { get; set; }
        public virtual DbSet<Tccooxfamilium> Tccooxfamilia { get; set; }
        public virtual DbSet<Tccooxfamservicio> Tccooxfamservicios { get; set; }
        public virtual DbSet<Tccooxlogcorepartner> Tccooxlogcorepartners { get; set; }
        public virtual DbSet<Tccooxlstreporte> Tccooxlstreportes { get; set; }
        public virtual DbSet<Tccooxmantoimss> Tccooxmantoimsses { get; set; }
        public virtual DbSet<Tccooxmotcancela> Tccooxmotcancelas { get; set; }
        public virtual DbSet<Tccooxnotificacion> Tccooxnotificacions { get; set; }
        public virtual DbSet<Tccooxnotifnivconsumo> Tccooxnotifnivconsumos { get; set; }
        public virtual DbSet<Tccooxorigenfactura> Tccooxorigenfacturas { get; set; }
        public virtual DbSet<Tccooxplazorevision> Tccooxplazorevisions { get; set; }
        public virtual DbSet<Tccooxrefcallcenter> Tccooxrefcallcenters { get; set; }
        public virtual DbSet<Tccooxrepvisimp> Tccooxrepvisimps { get; set; }
        public virtual DbSet<Tccooxrepvisimp2> Tccooxrepvisimp2s { get; set; }
        public virtual DbSet<Tccooxresidentifica> Tccooxresidentificas { get; set; }
        public virtual DbSet<Tccooxtipocorreo> Tccooxtipocorreos { get; set; }
        public virtual DbSet<Tccooxtipoequipo> Tccooxtipoequipos { get; set; }
        public virtual DbSet<Tccooxtiposlistado> Tccooxtiposlistados { get; set; }
        public virtual DbSet<Tccooxtiposorigen> Tccooxtiposorigens { get; set; }
        public virtual DbSet<Tccooxttr> Tccooxttrs { get; set; }
        public virtual DbSet<Tccortcodigosbar> Tccortcodigosbars { get; set; }
        public virtual DbSet<Tccortgrupoalmrutum> Tccortgrupoalmruta { get; set; }
        public virtual DbSet<Tccotermventaexp> Tccotermventaexps { get; set; }
        public virtual DbSet<Tccotipodocumento> Tccotipodocumentos { get; set; }
        public virtual DbSet<Tccoxfpago> Tccoxfpagos { get; set; }
        public virtual DbSet<Tccoxtserv> Tccoxtservs { get; set; }
        public virtual DbSet<Tcgrlinea> Tcgrlineas { get; set; }
        public virtual DbSet<Tcidgrupo> Tcidgrupos { get; set; }
        public virtual DbSet<Tcidusuario> Tcidusuarios { get; set; }
        public virtual DbSet<Tcwictefil01> Tcwictefil01s { get; set; }
        public virtual DbSet<Tdadtransescala> Tdadtransescalas { get; set; }
        public virtual DbSet<Tdcegspa> Tdcegspas { get; set; }
        public virtual DbSet<Tdcegssol> Tdcegssols { get; set; }
        public virtual DbSet<Tdcocacomppago> Tdcocacomppagos { get; set; }
        public virtual DbSet<Tdcocagastosdium> Tdcocagastosdia { get; set; }
        public virtual DbSet<Tdcocapromotora> Tdcocapromotoras { get; set; }
        public virtual DbSet<Tdcocomisionesmerc> Tdcocomisionesmercs { get; set; }
        public virtual DbSet<Tdcoctclubsoldador> Tdcoctclubsoldadors { get; set; }
        public virtual DbSet<Tdcoctconvig> Tdcoctconvigs { get; set; }
        public virtual DbSet<Tdcoctentrega> Tdcoctentregas { get; set; }
        public virtual DbSet<Tdcoctgralcbe> Tdcoctgralcbes { get; set; }
        public virtual DbSet<Tdcoctobservacione> Tdcoctobservaciones { get; set; }
        public virtual DbSet<Tdcoecpedido> Tdcoecpedidos { get; set; }
        public virtual DbSet<Tdcoenconteofi> Tdcoenconteofis { get; set; }
        public virtual DbSet<Tdcoencontrato> Tdcoencontratos { get; set; }
        public virtual DbSet<Tdcoencontratourb> Tdcoencontratourbs { get; set; }
        public virtual DbSet<Tdcoendemora> Tdcoendemoras { get; set; }
        public virtual DbSet<Tdcoendotideal> Tdcoendotideals { get; set; }
        public virtual DbSet<Tdcoenimprecibo> Tdcoenimprecibos { get; set; }
        public virtual DbSet<Tdcoeninventario> Tdcoeninventarios { get; set; }
        public virtual DbSet<Tdcoenpagare> Tdcoenpagares { get; set; }
        public virtual DbSet<Tdcoenremisionesnodo> Tdcoenremisionesnodos { get; set; }
        public virtual DbSet<Tdcoenvcampautcred> Tdcoenvcampautcreds { get; set; }
        public virtual DbSet<Tdcoenvisitadorcam> Tdcoenvisitadorcams { get; set; }
        public virtual DbSet<TdcoenvisitadorcamRe> TdcoenvisitadorcamRes { get; set; }
        public virtual DbSet<Tdcoenvmov> Tdcoenvmovs { get; set; }
        public virtual DbSet<TdcoenvmovRespaldoDep> TdcoenvmovRespaldoDeps { get; set; }
        public virtual DbSet<Tdcoenvmovmtro> Tdcoenvmovmtros { get; set; }
        public virtual DbSet<Tdcoenvprov> Tdcoenvprovs { get; set; }
        public virtual DbSet<Tdcoexppedido> Tdcoexppedidos { get; set; }
        public virtual DbSet<Tdcoexpprof> Tdcoexpprofs { get; set; }
        public virtual DbSet<Tdcoexpprofseries> Tdcoexpprofseries { get; set; }
        public virtual DbSet<Tdcofacatalogosaddendum> Tdcofacatalogosaddenda { get; set; }
        public virtual DbSet<Tdcofacodigoadicional> Tdcofacodigoadicionals { get; set; }
        public virtual DbSet<Tdcofacodigoadicionalexcep> Tdcofacodigoadicionalexceps { get; set; }
        public virtual DbSet<Tdcofaconsumo> Tdcofaconsumos { get; set; }
        public virtual DbSet<TdcofaconsumosResp> TdcofaconsumosResps { get; set; }
        public virtual DbSet<Tdcofadetalle> Tdcofadetalles { get; set; }
        public virtual DbSet<Tdcofadetalleimpuesto> Tdcofadetalleimpuestos { get; set; }
        public virtual DbSet<Tdcofadetallepedido> Tdcofadetallepedidos { get; set; }
        public virtual DbSet<TdcofadetallepedidosPv> TdcofadetallepedidosPvs { get; set; }
        public virtual DbSet<TdcofadetallepedidosTe> TdcofadetallepedidosTes { get; set; }
        public virtual DbSet<Tdcofadetallepredial> Tdcofadetallepredials { get; set; }
        public virtual DbSet<Tdcofadetallesvalore> Tdcofadetallesvalores { get; set; }
        public virtual DbSet<Tdcofadoctosrel> Tdcofadoctosrels { get; set; }
        public virtual DbSet<Tdcofaejecodigo> Tdcofaejecodigos { get; set; }
        public virtual DbSet<Tdcofamapeoprn> Tdcofamapeoprns { get; set; }
        public virtual DbSet<Tdcofapagosfactura> Tdcofapagosfacturas { get; set; }
        public virtual DbSet<Tdcofapagosfacturapedido> Tdcofapagosfacturapedidos { get; set; }
        public virtual DbSet<Tdcofapedciladd> Tdcofapedciladds { get; set; }
        public virtual DbSet<Tdcofapromacum> Tdcofapromacums { get; set; }
        public virtual DbSet<Tdcofapromo> Tdcofapromos { get; set; }
        public virtual DbSet<Tdcofaretencione> Tdcofaretenciones { get; set; }
        public virtual DbSet<Tdcofavaloresdefaultaddendum> Tdcofavaloresdefaultaddenda { get; set; }
        public virtual DbSet<Tdcofavaloresfijosaddendum> Tdcofavaloresfijosaddenda { get; set; }
        public virtual DbSet<Tdcofaventaenvase> Tdcofaventaenvases { get; set; }
        public virtual DbSet<Tdcogrbusq> Tdcogrbusqs { get; set; }
        public virtual DbSet<Tdcogrcotizacione> Tdcogrcotizaciones { get; set; }
        public virtual DbSet<Tdcogrgtosm> Tdcogrgtosms { get; set; }
        public virtual DbSet<Tdcogrgtosmant> Tdcogrgtosmants { get; set; }
        public virtual DbSet<Tdcogrleyendacotizacion> Tdcogrleyendacotizacions { get; set; }
        public virtual DbSet<Tdcogrproch> Tdcogrproches { get; set; }
        public virtual DbSet<Tdcoidcajausu> Tdcoidcajausus { get; set; }
        public virtual DbSet<Tdcoiddiasrecolec> Tdcoiddiasrecolecs { get; set; }
        public virtual DbSet<Tdcoidsuc> Tdcoidsucs { get; set; }
        public virtual DbSet<Tdcoincapacidade> Tdcoincapacidades { get; set; }
        public virtual DbSet<Tdcoincteequipo> Tdcoincteequipos { get; set; }
        public virtual DbSet<TdcoincteequipoNoborrar> TdcoincteequipoNoborrars { get; set; }
        public virtual DbSet<Tdcoinembarque> Tdcoinembarques { get; set; }
        public virtual DbSet<Tdcoinembarquelotescantidad> Tdcoinembarquelotescantidads { get; set; }
        public virtual DbSet<Tdcoinembarqueoperador> Tdcoinembarqueoperadors { get; set; }
        public virtual DbSet<Tdcoinestimado> Tdcoinestimados { get; set; }
        public virtual DbSet<Tdcoinfisico> Tdcoinfisicos { get; set; }
        public virtual DbSet<Tdcoinfisicoresp1803> Tdcoinfisicoresp1803s { get; set; }
        public virtual DbSet<Tdcoininventariomer> Tdcoininventariomers { get; set; }
        public virtual DbSet<Tdcoinmovscod> Tdcoinmovscods { get; set; }
        public virtual DbSet<Tdcoinmovscoddup> Tdcoinmovscoddups { get; set; }
        public virtual DbSet<Tdcoinmovscodnogen> Tdcoinmovscodnogens { get; set; }
        public virtual DbSet<Tdcoinmovscodseries> Tdcoinmovscodseries { get; set; }
        public virtual DbSet<Tdcoinmovscodserieswm> Tdcoinmovscodserieswms { get; set; }
        public virtual DbSet<Tdcoinmovscodwm> Tdcoinmovscodwms { get; set; }
        public virtual DbSet<Tdcoinpedmerc> Tdcoinpedmercs { get; set; }
        public virtual DbSet<Tdcoinprod02estimado> Tdcoinprod02estimados { get; set; }
        public virtual DbSet<Tdcoinprod03> Tdcoinprod03s { get; set; }
        public virtual DbSet<Tdcoinprodbar> Tdcoinprodbars { get; set; }
        public virtual DbSet<Tdcoinprovcod> Tdcoinprovcods { get; set; }
        public virtual DbSet<Tdcoinsolexmerc> Tdcoinsolexmercs { get; set; }
        public virtual DbSet<Tdcoinsucequipo> Tdcoinsucequipos { get; set; }
        public virtual DbSet<Tdcoinsurpedmer> Tdcoinsurpedmers { get; set; }
        public virtual DbSet<Tdcointransitoseries> Tdcointransitoseries { get; set; }
        public virtual DbSet<Tdcointransitoserieswm> Tdcointransitoserieswms { get; set; }
        public virtual DbSet<Tdconocomg> Tdconocomgs { get; set; }
        public virtual DbSet<Tdconoconsultacomg> Tdconoconsultacomgs { get; set; }
        public virtual DbSet<Tdconoemp> Tdconoemps { get; set; }
        public virtual DbSet<Tdconovalidacomg> Tdconovalidacomgs { get; set; }
        public virtual DbSet<Tdcooxcapreceta> Tdcooxcaprecetas { get; set; }
        public virtual DbSet<Tdcooxcbtreporte> Tdcooxcbtreportes { get; set; }
        public virtual DbSet<Tdcooxequiposye> Tdcooxequiposyes { get; set; }
        public virtual DbSet<TdcooxequiposyeRespaldo> TdcooxequiposyeRespaldos { get; set; }
        public virtual DbSet<Tdcooxfolreceta> Tdcooxfolrecetas { get; set; }
        public virtual DbSet<Tdcooxformatob> Tdcooxformatobs { get; set; }
        public virtual DbSet<Tdcooxkit> Tdcooxkits { get; set; }
        public virtual DbSet<Tdcooxlistadoreceta> Tdcooxlistadorecetas { get; set; }
        public virtual DbSet<Tdcooxpagincentivo> Tdcooxpagincentivos { get; set; }
        public virtual DbSet<TdcooxpagincentivosAnt> TdcooxpagincentivosAnts { get; set; }
        public virtual DbSet<Tdcooxreceta> Tdcooxrecetas { get; set; }
        public virtual DbSet<Tdcooxrentascte> Tdcooxrentasctes { get; set; }
        public virtual DbSet<Tdcooxrespuestatc> Tdcooxrespuestatcs { get; set; }
        public virtual DbSet<Tdcooxseguimientoequipo> Tdcooxseguimientoequipos { get; set; }
        public virtual DbSet<Tdcooxseguimientoequiporesp> Tdcooxseguimientoequiposresps { get; set; } 
        public virtual DbSet<Tdcooxseriessye> Tdcooxseriessyes { get; set; }
        public virtual DbSet<TdcooxseriessyeRespaldo> TdcooxseriessyeRespaldos { get; set; }
        public virtual DbSet<Tdcooxservicio> Tdcooxservicios { get; set; }
        public virtual DbSet<Tdcooxservicios23012022> Tdcooxservicios23012022s { get; set; }
        public virtual DbSet<Tdcooxserviciostipoorigen> Tdcooxserviciostipoorigens { get; set; }
        public virtual DbSet<Tdcooxtarjeta> Tdcooxtarjetas { get; set; }
        public virtual DbSet<Tdcorthorario> Tdcorthorarios { get; set; }
        public virtual DbSet<Tdcortproforma> Tdcortproformas { get; set; }
        public virtual DbSet<Tdcorttemp> Tdcorttemps { get; set; }
        public virtual DbSet<Tdemora> Tdemoras { get; set; }
        public virtual DbSet<TempDetallePago> TempDetallePagos { get; set; }
        public virtual DbSet<TempMovDiaComplemento> TempMovDiaComplementos { get; set; }
        public virtual DbSet<TempSaldosComplemento> TempSaldosComplementos { get; set; }
        public virtual DbSet<TempSeries450059> TempSeries450059s { get; set; }
        public virtual DbSet<TempSeries4795> TempSeries4795s { get; set; }
        public virtual DbSet<TempSeries47952> TempSeries47952s { get; set; }
        public virtual DbSet<TempTccogrterminale> TempTccogrterminales { get; set; }
        public virtual DbSet<TempTccogrterminalesall> TempTccogrterminalesalls { get; set; }
        public virtual DbSet<Tempconciliadopago> Tempconciliadopagos { get; set; }
        public virtual DbSet<TempfacturasConSaldo> TempfacturasConSaldos { get; set; }
        public virtual DbSet<Templeado> Templeados { get; set; }
        public virtual DbSet<ThcocaexpcredContacto> ThcocaexpcredContactos { get; set; }
        public virtual DbSet<ThcocaexpcredGenerale> ThcocaexpcredGenerales { get; set; }
        public virtual DbSet<ThcocaexpcredLegal> ThcocaexpcredLegals { get; set; }
        public virtual DbSet<ThcocaexpcredPagare> ThcocaexpcredPagares { get; set; }
        public virtual DbSet<ThcocaexpcredProcedimiento> ThcocaexpcredProcedimientos { get; set; }
        public virtual DbSet<ThcocaexpcredSeguimiento> ThcocaexpcredSeguimientos { get; set; }
        public virtual DbSet<Thcocasusp> Thcocasusps { get; set; }
        public virtual DbSet<Thcocatc> Thcocatcs { get; set; }
        public virtual DbSet<Thcocatemporala01> Thcocatemporala01s { get; set; }
        public virtual DbSet<Thcoctdepurado> Thcoctdepurados { get; set; }
        public virtual DbSet<Thcoctpreesp> Thcoctpreesps { get; set; }
        public virtual DbSet<Thcoctpresupuesto> Thcoctpresupuestos { get; set; }
        public virtual DbSet<Thcoenimpreciboscan> Thcoenimpreciboscans { get; set; }
        public virtual DbSet<Thcoenpatio> Thcoenpatios { get; set; }
        public virtual DbSet<Thcoenremisione> Thcoenremisiones { get; set; }
        public virtual DbSet<ThcoenvcampLm> ThcoenvcampLms { get; set; }
        public virtual DbSet<ThcoenvcampNc> ThcoenvcampNcs { get; set; }
        public virtual DbSet<Thcoerrorfac> Thcoerrorfacs { get; set; }
        public virtual DbSet<Thcofacontrato> Thcofacontratos { get; set; }
        public virtual DbSet<ThcofadetallepedidosCon> ThcofadetallepedidosCons { get; set; }
        public virtual DbSet<Thcofaerafectacione> Thcofaerafectaciones { get; set; }
        public virtual DbSet<Thcofamtropedido> Thcofamtropedidos { get; set; }
        public virtual DbSet<ThcofamtropedidosCon> ThcofamtropedidosCons { get; set; }
        public virtual DbSet<Thcofamtropropedrem> Thcofamtropropedrems { get; set; }
        public virtual DbSet<Thcofapedidosautoriza> Thcofapedidosautorizas { get; set; }
        public virtual DbSet<Thcogrerror> Thcogrerrors { get; set; }
        public virtual DbSet<Thcogrlog> Thcogrlogs { get; set; }
        public virtual DbSet<ThcogrlogBk> ThcogrlogBks { get; set; }
        public virtual DbSet<Thcogrproccierre> Thcogrproccierres { get; set; }
        public virtual DbSet<Thcogrsucgeo> Thcogrsucgeos { get; set; }
        public virtual DbSet<Thcogrtokenaut> Thcogrtokenauts { get; set; }
        public virtual DbSet<Thcoidpolizasap> Thcoidpolizasaps { get; set; }
        public virtual DbSet<ThcoidpolizasapCaja> ThcoidpolizasapCajas { get; set; }
        public virtual DbSet<Thcoidpolizasapresp> Thcoidpolizasapresps { get; set; }
        public virtual DbSet<Thcoidpolizasapresp2911> Thcoidpolizasapresp2911s { get; set; }
        public virtual DbSet<Thcoidsapfile> Thcoidsapfiles { get; set; }
        public virtual DbSet<Thcoidsaplog> Thcoidsaplogs { get; set; }
        public virtual DbSet<ThcoidusoVistum> ThcoidusoVista { get; set; }
        public virtual DbSet<Thcoinauts03> Thcoinauts03s { get; set; }
        public virtual DbSet<Thcoinayb> Thcoinaybs { get; set; }
        public virtual DbSet<Thcoinbitacoramovsnogen> Thcoinbitacoramovsnogens { get; set; }
        public virtual DbSet<Thcoinestimado> Thcoinestimados { get; set; }
        public virtual DbSet<Thcoinmov> Thcoinmovs { get; set; }
        public virtual DbSet<Thcoinmov1> Thcoinmovs1 { get; set; }
        public virtual DbSet<Thcoinmovsdup> Thcoinmovsdups { get; set; }
        public virtual DbSet<Thcoinmovsnogen> Thcoinmovsnogens { get; set; }
        public virtual DbSet<Thcoinmovspedga> Thcoinmovspedgas { get; set; }
        public virtual DbSet<Thcoinmovswm> Thcoinmovswms { get; set; }
        public virtual DbSet<Thcoinobmov> Thcoinobmovs { get; set; }
        public virtual DbSet<Thcoinpedidorem> Thcoinpedidorems { get; set; }
        public virtual DbSet<Thcoinpedidosmovil> Thcoinpedidosmovils { get; set; }
        public virtual DbSet<Thcoinserieequipomov> Thcoinserieequipomovs { get; set; }
        public virtual DbSet<Thcoinserieequipomovsdel> Thcoinserieequipomovsdels { get; set; }
        public virtual DbSet<Thcooxasignaconsumible> Thcooxasignaconsumibles { get; set; }
        public virtual DbSet<ThcooxasignaconsumiblesBk20210503Iperez> ThcooxasignaconsumiblesBk20210503Iperezs { get; set; }
        public virtual DbSet<Thcooxbitacoracambiarutum> Thcooxbitacoracambiaruta { get; set; }
        public virtual DbSet<Thcooxbloqcuentum> Thcooxbloqcuenta { get; set; }
        public virtual DbSet<Thcooxcanmovaumento> Thcooxcanmovaumentos { get; set; }
        public virtual DbSet<Thcooxorigenfactura> Thcooxorigenfacturas { get; set; }
        public virtual DbSet<Thcooxrecepcionseries> Thcooxrecepcionseries { get; set; }
        public virtual DbSet<Thcooxrentascte> Thcooxrentasctes { get; set; }
        public virtual DbSet<Thcooxrepvi> Thcooxrepvis { get; set; }
        public virtual DbSet<Thcortdetalle> Thcortdetalles { get; set; }
        public virtual DbSet<Thcotrcorreofile> Thcotrcorreofiles { get; set; }
        public virtual DbSet<Thcotrsolmovin> Thcotrsolmovins { get; set; }
        public virtual DbSet<TmReceta> TmRecetas { get; set; }
        public virtual DbSet<Tmadclientesescala> Tmadclientesescalas { get; set; }
        public virtual DbSet<Tmadcodigosescala> Tmadcodigosescalas { get; set; }
        public virtual DbSet<Tmadescala> Tmadescalas { get; set; }
        public virtual DbSet<Tmadrfcuniversal> Tmadrfcuniversals { get; set; }
        public virtual DbSet<Tmadsucclienteescala> Tmadsucclienteescalas { get; set; }
        public virtual DbSet<Tmadtransescala> Tmadtransescalas { get; set; }
        public virtual DbSet<Tmadtransescalasfac> Tmadtransescalasfacs { get; set; }
        public virtual DbSet<Tmcegspa> Tmcegspas { get; set; }
        public virtual DbSet<Tmcegsserv> Tmcegsservs { get; set; }
        public virtual DbSet<Tmcegssol> Tmcegssols { get; set; }
        public virtual DbSet<Tmcoafactivo> Tmcoafactivos { get; set; }
        public virtual DbSet<Tmcocaantgasto> Tmcocaantgastos { get; set; }
        public virtual DbSet<Tmcocaclienterotacion> Tmcocaclienterotacions { get; set; }
        public virtual DbSet<TmcocaclienterotacionSep2021> TmcocaclienterotacionSep2021s { get; set; }
        public virtual DbSet<Tmcocaclienterotacionoxidom> Tmcocaclienterotacionoxidoms { get; set; }
        public virtual DbSet<TmcocaclienterotacionoxidomSep2021> TmcocaclienterotacionoxidomSep2021s { get; set; }
        public virtual DbSet<Tmcocacobradore> Tmcocacobradores { get; set; }
        public virtual DbSet<Tmcocacominter> Tmcocacominters { get; set; }
        public virtual DbSet<Tmcocacompextra> Tmcocacompextras { get; set; }
        public virtual DbSet<Tmcocacomppago> Tmcocacomppagos { get; set; }
        public virtual DbSet<Tmcocaconektum> Tmcocaconekta { get; set; }
        public virtual DbSet<Tmcocactasuniversale> Tmcocactasuniversales { get; set; }
        public virtual DbSet<Tmcocafacturaspend> Tmcocafacturaspends { get; set; }
        public virtual DbSet<Tmcocamov> Tmcocamovs { get; set; }
        public virtual DbSet<TmcocamovProcesados2018> TmcocamovProcesados2018s { get; set; }
        public virtual DbSet<TmcocamovProcesados2019> TmcocamovProcesados2019s { get; set; }
        public virtual DbSet<TmcocamovProcesados2020> TmcocamovProcesados2020s { get; set; }
        public virtual DbSet<TmcocamovTmp> TmcocamovTmps { get; set; }
        public virtual DbSet<Tmcocamovdoctosrel> Tmcocamovdoctosrels { get; set; }
        public virtual DbSet<Tmcocamovextra> Tmcocamovextras { get; set; }
        public virtual DbSet<Tmcocamovtemp> Tmcocamovtemps { get; set; }
        public virtual DbSet<Tmcocapromotora> Tmcocapromotoras { get; set; }
        public virtual DbSet<Tmcocareciboscaja> Tmcocareciboscajas { get; set; }
        public virtual DbSet<Tmcocarotacion> Tmcocarotacions { get; set; }
        public virtual DbSet<TmcocarotacionSep2021> TmcocarotacionSep2021s { get; set; }
        public virtual DbSet<Tmcocasolcontareserv> Tmcocasolcontareservs { get; set; }
        public virtual DbSet<Tmcocasolcontum> Tmcocasolconta { get; set; }
        public virtual DbSet<Tmcocatrangasto> Tmcocatrangastos { get; set; }
        public virtual DbSet<Tmcoctcontacto> Tmcoctcontactos { get; set; }
        public virtual DbSet<Tmcoctcontrato> Tmcoctcontratos { get; set; }
        public virtual DbSet<Tmcoctcred> Tmcoctcreds { get; set; }
        public virtual DbSet<Tmcoctcredlc> Tmcoctcredlcs { get; set; }
        public virtual DbSet<Tmcoctcuentapago> Tmcoctcuentapagos { get; set; }
        public virtual DbSet<Tmcoctgral> Tmcoctgrals { get; set; }
        public virtual DbSet<Tmcoctpreesp> Tmcoctpreesps { get; set; }
        public virtual DbSet<TmcoctpreespDiario> TmcoctpreespDiarios { get; set; }
        public virtual DbSet<Tmcoctranlog> Tmcoctranlogs { get; set; }
        public virtual DbSet<Tmcoctrefbanco> Tmcoctrefbancos { get; set; }
        public virtual DbSet<Tmcoctremisione> Tmcoctremisiones { get; set; }
        public virtual DbSet<Tmcoctremprogramadum> Tmcoctremprogramada { get; set; }
        public virtual DbSet<Tmcoctsolpreesp> Tmcoctsolpreesps { get; set; }
        public virtual DbSet<Tmcocvepedidossap> Tmcocvepedidossaps { get; set; }
        public virtual DbSet<Tmcoecpedido> Tmcoecpedidos { get; set; }
        public virtual DbSet<TmcoencampRec> TmcoencampRecs { get; set; }
        public virtual DbSet<Tmcoenconfirmamc> Tmcoenconfirmamcs { get; set; }
        public virtual DbSet<Tmcoencorpo> Tmcoencorpos { get; set; }
        public virtual DbSet<Tmcoeninventario> Tmcoeninventarios { get; set; }
        public virtual DbSet<Tmcoeninventario2022> Tmcoeninventario2022s { get; set; }
        public virtual DbSet<Tmcoeninventario29052021> Tmcoeninventario29052021s { get; set; }
        public virtual DbSet<Tmcoenmovsol> Tmcoenmovsols { get; set; }
        public virtual DbSet<Tmcoenpagocomcamp> Tmcoenpagocomcamps { get; set; }
        public virtual DbSet<Tmcoenpedidose> Tmcoenpedidoses { get; set; }
        public virtual DbSet<Tmcoenpedidosn> Tmcoenpedidosns { get; set; }
        public virtual DbSet<Tmcoenv01> Tmcoenv01s { get; set; }
        public virtual DbSet<TmcoenvcampLm> TmcoenvcampLms { get; set; }
        public virtual DbSet<TmcoenvcampLm2021> TmcoenvcampLm2021s { get; set; }
        public virtual DbSet<TmcoenvcampNc> TmcoenvcampNcs { get; set; }
        public virtual DbSet<TmcoenvcampNc2021> TmcoenvcampNc2021s { get; set; }
        public virtual DbSet<TmcoenvcampNcRe> TmcoenvcampNcRes { get; set; }
        public virtual DbSet<TmcoenvcampOx> TmcoenvcampOxes { get; set; }
        public virtual DbSet<Tmcoenvremisione> Tmcoenvremisiones { get; set; }
        public virtual DbSet<Tmcoenvremisioneswm> Tmcoenvremisioneswms { get; set; }
        public virtual DbSet<Tmcoexppedido> Tmcoexppedidos { get; set; }
        public virtual DbSet<Tmcoexpprof> Tmcoexpprofs { get; set; }
        public virtual DbSet<Tmcofaaddendum> Tmcofaaddenda { get; set; }
        public virtual DbSet<Tmcofaarchivosrem> Tmcofaarchivosrems { get; set; }
        public virtual DbSet<Tmcofacamposaddendum> Tmcofacamposaddenda { get; set; }
        public virtual DbSet<Tmcofacodprodcte> Tmcofacodprodctes { get; set; }
        public virtual DbSet<Tmcofacodprodexp> Tmcofacodprodexps { get; set; }
        public virtual DbSet<Tmcofaconsumo> Tmcofaconsumos { get; set; }
        public virtual DbSet<Tmcofacontrato> Tmcofacontratos { get; set; }
        public virtual DbSet<TmcofacontratosFeb2017> TmcofacontratosFeb2017s { get; set; }
        public virtual DbSet<TmcofacontratosResp> TmcofacontratosResps { get; set; }
        public virtual DbSet<Tmcofadatoscomplemento> Tmcofadatoscomplementos { get; set; }
        public virtual DbSet<Tmcofadatosfacturacion> Tmcofadatosfacturacions { get; set; }
        public virtual DbSet<Tmcofamenucatalogoaddendum> Tmcofamenucatalogoaddenda { get; set; }
        public virtual DbSet<Tmcofamovilapartado> Tmcofamovilapartados { get; set; }
        public virtual DbSet<Tmcofamtro> Tmcofamtros { get; set; }
        public virtual DbSet<TmcofamtroExt> TmcofamtroExts { get; set; }
        public virtual DbSet<Tmcofamtropedido> Tmcofamtropedidos { get; set; }
        public virtual DbSet<TmcofamtropedidosPv> TmcofamtropedidosPvs { get; set; }
        public virtual DbSet<TmcofamtropedidosTe> TmcofamtropedidosTes { get; set; }
        public virtual DbSet<Tmcofarequisito> Tmcofarequisitos { get; set; }
        public virtual DbSet<Tmcofaruta> Tmcofarutas { get; set; }
        public virtual DbSet<TmcofarutasBorrar> TmcofarutasBorrars { get; set; }
        public virtual DbSet<Tmcofaruteo> Tmcofaruteos { get; set; }
        public virtual DbSet<Tmcofauuid> Tmcofauuids { get; set; }
        public virtual DbSet<Tmcofavalorescatalogosaddendum> Tmcofavalorescatalogosaddenda { get; set; }
        public virtual DbSet<Tmcogrbavanzadum> Tmcogrbavanzada { get; set; }
        public virtual DbSet<Tmcogrbusq> Tmcogrbusqs { get; set; }
        public virtual DbSet<Tmcogrcontfianza> Tmcogrcontfianzas { get; set; }
        public virtual DbSet<Tmcogrcotizacion> Tmcogrcotizacions { get; set; }
        public virtual DbSet<Tmcogrnotificacione> Tmcogrnotificaciones { get; set; }
        public virtual DbSet<Tmcogrsucip> Tmcogrsucips { get; set; }
        public virtual DbSet<Tmcogrtokenaut> Tmcogrtokenauts { get; set; }
        public virtual DbSet<Tmcogrtraslado> Tmcogrtraslados { get; set; }
        public virtual DbSet<Tmcoidcierre> Tmcoidcierres { get; set; }
        public virtual DbSet<Tmcoidcuadre> Tmcoidcuadres { get; set; }
        public virtual DbSet<Tmcoidficha> Tmcoidfichas { get; set; }
        public virtual DbSet<Tmcoidfichasrec> Tmcoidfichasrecs { get; set; }
        public virtual DbSet<Tmcoidoperacione> Tmcoidoperaciones { get; set; }
        public virtual DbSet<Tmcoinconsolidadodi> Tmcoinconsolidadodis { get; set; }
        public virtual DbSet<Tmcoindiainv01> Tmcoindiainv01s { get; set; }
        public virtual DbSet<Tmcoindistribucion> Tmcoindistribucions { get; set; }
        public virtual DbSet<Tmcoinembarque> Tmcoinembarques { get; set; }
        public virtual DbSet<Tmcoinfactant> Tmcoinfactants { get; set; }
        public virtual DbSet<TmcoinfactantResp> TmcoinfactantResps { get; set; }
        public virtual DbSet<Tmcoinmaxurb> Tmcoinmaxurbs { get; set; }
        public virtual DbSet<Tmcoinpedfacelec> Tmcoinpedfacelecs { get; set; }
        public virtual DbSet<Tmcoinpedfacelectmp> Tmcoinpedfacelectmps { get; set; }
        public virtual DbSet<Tmcoinpedidorem> Tmcoinpedidorems { get; set; }
        public virtual DbSet<Tmcoinpedimento> Tmcoinpedimentos { get; set; }
        public virtual DbSet<Tmcoinpedimento1> Tmcoinpedimentos1 { get; set; }
        public virtual DbSet<TmcoinpedimentoResp2> TmcoinpedimentoResp2s { get; set; }
        public virtual DbSet<Tmcoinpedmerc> Tmcoinpedmercs { get; set; }
        public virtual DbSet<Tmcoinpedpendenvsap> Tmcoinpedpendenvsaps { get; set; }
        public virtual DbSet<Tmcoinpedpreentradum> Tmcoinpedpreentrada { get; set; }
        public virtual DbSet<Tmcoinprod01> Tmcoinprod01s { get; set; }
        public virtual DbSet<Tmcoinprod01Aumpre> Tmcoinprod01Aumpres { get; set; }
        public virtual DbSet<Tmcoinprod01Aumpreant> Tmcoinprod01Aumpreants { get; set; }
        public virtual DbSet<Tmcoinprod01Carga> Tmcoinprod01Cargas { get; set; }
        public virtual DbSet<Tmcoinprod01CargaOld> Tmcoinprod01CargaOlds { get; set; }
        public virtual DbSet<Tmcoinprod01CargaOld2> Tmcoinprod01CargaOld2s { get; set; }
        public virtual DbSet<Tmcoinprod02> Tmcoinprod02s { get; set; }
        public virtual DbSet<Tmcoinprod02BakInv> Tmcoinprod02BakInvs { get; set; }
        public virtual DbSet<Tmcoinprod02Carga> Tmcoinprod02Cargas { get; set; }
        public virtual DbSet<Tmcoinprod02CargaOld> Tmcoinprod02CargaOlds { get; set; }
        public virtual DbSet<Tmcoinprod02CargaOld2> Tmcoinprod02CargaOld2s { get; set; }
        public virtual DbSet<Tmcoinprodexp> Tmcoinprodexps { get; set; }
        public virtual DbSet<Tmcoinproduccion> Tmcoinproduccions { get; set; }
        public virtual DbSet<Tmcoinserieequipo> Tmcoinserieequipos { get; set; }
        public virtual DbSet<Tmcoinsolmov> Tmcoinsolmovs { get; set; }
        public virtual DbSet<Tmcoinsolrechazo> Tmcoinsolrechazos { get; set; }
        public virtual DbSet<Tmcoinsurpedmer> Tmcoinsurpedmers { get; set; }
        public virtual DbSet<TmcoinsurpedmerNoenviuarversion> TmcoinsurpedmerNoenviuarversions { get; set; }
        public virtual DbSet<Tmcointransito> Tmcointransitos { get; set; }
        public virtual DbSet<Tmcointransitohand> Tmcointransitohands { get; set; }
        public virtual DbSet<Tmcointransitohandrec> Tmcointransitohandrecs { get; set; }
        public virtual DbSet<Tmcointransitomodseries> Tmcointransitomodseries { get; set; }
        public virtual DbSet<Tmcointransitowm> Tmcointransitowms { get; set; }
        public virtual DbSet<Tmconocomismetro> Tmconocomismetros { get; set; }
        public virtual DbSet<Tmcooxautorizafac> Tmcooxautorizafacs { get; set; }
        public virtual DbSet<Tmcooxcliente> Tmcooxclientes { get; set; }
        public virtual DbSet<Tmcooxcobrotc> Tmcooxcobrotcs { get; set; }
        public virtual DbSet<Tmcooxconexp> Tmcooxconexps { get; set; }
        public virtual DbSet<Tmcooxcontrato> Tmcooxcontratos { get; set; }
        public virtual DbSet<Tmcooxcteejecutivo> Tmcooxcteejecutivos { get; set; }
        public virtual DbSet<Tmcooxcuestionario> Tmcooxcuestionarios { get; set; }
        public virtual DbSet<Tmcooxdatosmedico> Tmcooxdatosmedicos { get; set; }
        public virtual DbSet<Tmcooxdescargasw> Tmcooxdescargasws { get; set; }
        public virtual DbSet<Tmcooxejecutivo> Tmcooxejecutivos { get; set; }
        public virtual DbSet<Tmcooxequipocon> Tmcooxequipocons { get; set; }
        public virtual DbSet<Tmcooxequiposye> Tmcooxequiposyes { get; set; }
        public virtual DbSet<TmcooxequiposyeRespaldo> TmcooxequiposyeRespaldos { get; set; }
        public virtual DbSet<Tmcooxexistenciaconsumible> Tmcooxexistenciaconsumibles { get; set; }
        public virtual DbSet<Tmcooxexistenciaconsumiblesdefault> Tmcooxexistenciaconsumiblesdefaults { get; set; }
        public virtual DbSet<Tmcooxfaclstpar> Tmcooxfaclstpars { get; set; }
        public virtual DbSet<Tmcooxkit> Tmcooxkits { get; set; }
        public virtual DbSet<Tmcooxpagincentivo> Tmcooxpagincentivos { get; set; }
        public virtual DbSet<TmcooxpagincentivosAnt> TmcooxpagincentivosAnts { get; set; }
        public virtual DbSet<Tmcooxpedidosconsumible> Tmcooxpedidosconsumibles { get; set; }
        public virtual DbSet<TmcooxpedidosconsumiblesBakInv> TmcooxpedidosconsumiblesBakInvs { get; set; }
        public virtual DbSet<Tmcooxpedidosequipo> Tmcooxpedidosequipos { get; set; }
        public virtual DbSet<Tmcooxpereqp01> Tmcooxpereqp01s { get; set; }
        public virtual DbSet<Tmcooxpermiso> Tmcooxpermisos { get; set; }
        public virtual DbSet<Tmcooxpobxme> Tmcooxpobxmes { get; set; }
        public virtual DbSet<Tmcooxpolesp> Tmcooxpolesps { get; set; }
        public virtual DbSet<Tmcooxproducto> Tmcooxproductos { get; set; }
        public virtual DbSet<Tmcooxrecetadp> Tmcooxrecetadps { get; set; }
        public virtual DbSet<TmcooxrecetadpJiprresp> TmcooxrecetadpJiprresps { get; set; }
        public virtual DbSet<Tmcooxrecibosdev> Tmcooxrecibosdevs { get; set; }
        public virtual DbSet<Tmcooxrtcont> Tmcooxrtconts { get; set; }
        public virtual DbSet<Tmcooxservicio> Tmcooxservicios { get; set; }
        public virtual DbSet<Tmcooxservicios23012022> Tmcooxservicios23012022s { get; set; }
        public virtual DbSet<Tmcooxvalidadoc> Tmcooxvalidadocs { get; set; }
        public virtual DbSet<Tmcooxvigenciaconsumible> Tmcooxvigenciaconsumibles { get; set; }
        public virtual DbSet<Tmcooxwservice> Tmcooxwservices { get; set; }
        public virtual DbSet<Tmcortchofer> Tmcortchofers { get; set; }
        public virtual DbSet<Tmcortglobal> Tmcortglobals { get; set; }
        public virtual DbSet<Tmcortmtro> Tmcortmtros { get; set; }
        public virtual DbSet<Tmcortproforma> Tmcortproformas { get; set; }
        public virtual DbSet<Tmcotraccionespedweb> Tmcotraccionespedwebs { get; set; }
        public virtual DbSet<Tmcotrcorreo> Tmcotrcorreos { get; set; }
        public virtual DbSet<TmcotrcorreoPrueba> TmcotrcorreoPruebas { get; set; }
        public virtual DbSet<Tmcotrcorreoext> Tmcotrcorreoexts { get; set; }
        public virtual DbSet<Tmcotrcorreoin> Tmcotrcorreoins { get; set; }
        public virtual DbSet<Tmcotrcorreoinwm> Tmcotrcorreoinwms { get; set; }
        public virtual DbSet<Tmcotrcorreowm> Tmcotrcorreowms { get; set; }
        public virtual DbSet<Tmcotrcorreowt> Tmcotrcorreowts { get; set; }
        public virtual DbSet<Tmcotrpaciente> Tmcotrpacientes { get; set; }
        public virtual DbSet<Tmcotrreceta> Tmcotrrecetas { get; set; }
        public virtual DbSet<Tmcotrrecibepedido> Tmcotrrecibepedidos { get; set; }
        public virtual DbSet<Tmcowmspci> Tmcowmspcis { get; set; }
        public virtual DbSet<Tmcowmsrci> Tmcowmsrcis { get; set; }
        public virtual DbSet<Tmcowmsroi> Tmcowmsrois { get; set; }
        public virtual DbSet<Tmcowmssoi> Tmcowmssois { get; set; }
        public virtual DbSet<Tmcowtransidentifica> Tmcowtransidentificas { get; set; }
        public virtual DbSet<Tmoxiexentosaut> Tmoxiexentosauts { get; set; }
        public virtual DbSet<Tmtransitomodseries> Tmtransitomodseries { get; set; }
        public virtual DbSet<Tmwictcon01> Tmwictcon01s { get; set; }
        public virtual DbSet<Tmwictefil05> Tmwictefil05s { get; set; }
        public virtual DbSet<Tpuesto> Tpuestos { get; set; }
        public virtual DbSet<Transmision> Transmisions { get; set; }
        public virtual DbSet<Trcocacobradorpromo> Trcocacobradorpromos { get; set; }
        public virtual DbSet<Trcoencodigosio> Trcoencodigosios { get; set; }
        public virtual DbSet<Trcoenfactor> Trcoenfactors { get; set; }
        public virtual DbSet<Trcoenfamilium> Trcoenfamilia { get; set; }
        public virtual DbSet<Trcoennodorem> Trcoennodorems { get; set; }
        public virtual DbSet<Trcograreascorreonotif> Trcograreascorreonotifs { get; set; }
        public virtual DbSet<TrcogroperacionPerfil> TrcogroperacionPerfils { get; set; }
        public virtual DbSet<Trcogrproch> Trcogrproches { get; set; }
        public virtual DbSet<Trcoinun> Trcoinuns { get; set; }
        public virtual DbSet<Trcortrutasox> Trcortrutasoxes { get; set; }
        public virtual DbSet<TridgruposDependencium> TridgruposDependencia { get; set; }
        public virtual DbSet<TridusuarioGrupo> TridusuarioGrupos { get; set; }
        public virtual DbSet<TtaumentoArgon220926Borrar> TtaumentoArgon220926Borrars { get; set; }
        public virtual DbSet<TtaumentoArgonBorrar> TtaumentoArgonBorrars { get; set; }
        public virtual DbSet<Ttcocaantiguedaddiarium> Ttcocaantiguedaddiaria { get; set; }
        public virtual DbSet<Ttcocagastosdium> Ttcocagastosdia { get; set; }
        public virtual DbSet<Ttcocarotcte> Ttcocarotctes { get; set; }
        public virtual DbSet<Ttcocasaldoscarbonografico> Ttcocasaldoscarbonograficos { get; set; }
        public virtual DbSet<Ttcocasaldoscaroxidom> Ttcocasaldoscaroxidoms { get; set; }
        public virtual DbSet<Ttcocasaldoscarrotaciom> Ttcocasaldoscarrotacioms { get; set; }
        public virtual DbSet<Ttcoctconsultacte> Ttcoctconsultactes { get; set; }
        public virtual DbSet<Ttcoctgralenviar> Ttcoctgralenviars { get; set; }
        public virtual DbSet<Ttcoctgralrecibe> Ttcoctgralrecibes { get; set; }
        public virtual DbSet<Ttcoencodigoscamp> Ttcoencodigoscamps { get; set; }
        public virtual DbSet<Ttcoencredicamp> Ttcoencredicamps { get; set; }
        public virtual DbSet<Ttcoenfaccamp60> Ttcoenfaccamp60s { get; set; }
        public virtual DbSet<Ttcoenvremisione> Ttcoenvremisiones { get; set; }
        public virtual DbSet<Ttcofactorinc2024> Ttcofactorinc2024s { get; set; }
        public virtual DbSet<Ttcogrcargaruteo> Ttcogrcargaruteos { get; set; }
        public virtual DbSet<Ttcoidpolizaventa> Ttcoidpolizaventas { get; set; }
        public virtual DbSet<Ttcoinpedga> Ttcoinpedgas { get; set; }
        public virtual DbSet<Ttcoinpedmerc> Ttcoinpedmercs { get; set; }
        public virtual DbSet<Ttcoinproduccion> Ttcoinproduccions { get; set; }
        public virtual DbSet<Ttcointransitosdescarga> Ttcointransitosdescargas { get; set; }
        public virtual DbSet<Ttconocomabono> Ttconocomabonos { get; set; }
        public virtual DbSet<Ttconocomcontado> Ttconocomcontados { get; set; }
        public virtual DbSet<Ttconocommov> Ttconocommovs { get; set; }
        public virtual DbSet<Ttconocomvta> Ttconocomvtas { get; set; }
        public virtual DbSet<Ttconoprecvol> Ttconoprecvols { get; set; }
        public virtual DbSet<Ttcooxfirma> Ttcooxfirmas { get; set; }
        public virtual DbSet<Ttcooxsesionesreceta> Ttcooxsesionesrecetas { get; set; }
        public virtual DbSet<Ttcorotacionmer> Ttcorotacionmers { get; set; }
        public virtual DbSet<TtcotrIdentifica> TtcotrIdentificas { get; set; }
        public virtual DbSet<TtctesDistinguidos2024> TtctesDistinguidos2024s { get; set; }
        public virtual DbSet<TtctesDistinguidos2024Rfc> TtctesDistinguidos2024Rfcs { get; set; }
        public virtual DbSet<TtctesExentosincAut2024> TtctesExentosincAut2024s { get; set; }
        public virtual DbSet<Ttctesinc2024> Ttctesinc2024s { get; set; }
        public virtual DbSet<Ttctesinc2024c> Ttctesinc2024cs { get; set; }
        public virtual DbSet<Ttdatosfiscale> Ttdatosfiscales { get; set; }
        public virtual DbSet<Ttdcoinmovscod> Ttdcoinmovscods { get; set; }
        public virtual DbSet<Ttdcooxequiposye> Ttdcooxequiposyes { get; set; }
        public virtual DbSet<Ttdcooxseriessye> Ttdcooxseriessyes { get; set; }
        public virtual DbSet<Ttgrprovext> Ttgrprovexts { get; set; }
        public virtual DbSet<Tthcoinmov> Tthcoinmovs { get; set; }
        public virtual DbSet<Tthcooxasignaconsumible> Tthcooxasignaconsumibles { get; set; }
        public virtual DbSet<Ttmcooxequiposye> Ttmcooxequiposyes { get; set; }
        public virtual DbSet<Ttmcooxpedidosconsumible> Ttmcooxpedidosconsumibles { get; set; }
        public virtual DbSet<Ttmcooxpedidosequipo> Ttmcooxpedidosequipos { get; set; }
        public virtual DbSet<Ttooxcompendioreceta> Ttooxcompendiorecetas { get; set; }
        public virtual DbSet<Ttproveedore> Ttproveedores { get; set; }
        public virtual DbSet<Tttmcoinprod01argon100923Borrar> Tttmcoinprod01argon100923Borrars { get; set; }
        public virtual DbSet<VwAcocamov> VwAcocamovs { get; set; }
        public virtual DbSet<VwCoadagrescala> VwCoadagrescalas { get; set; }
        public virtual DbSet<VwCoaftransporteinv> VwCoaftransporteinvs { get; set; }
        public virtual DbSet<VwCocaantgasto> VwCocaantgastos { get; set; }
        public virtual DbSet<VwCocacomppago> VwCocacomppagos { get; set; }
        public virtual DbSet<VwCocacuentasgasto> VwCocacuentasgastos { get; set; }
        public virtual DbSet<VwCocagastosOd> VwCocagastosOds { get; set; }
        public virtual DbSet<VwCocagastosdetalle> VwCocagastosdetalles { get; set; }
        public virtual DbSet<VwCocagastosdetalleOd> VwCocagastosdetalleOds { get; set; }
        public virtual DbSet<VwCocagastosdium> VwCocagastosdia { get; set; }
        public virtual DbSet<VwCocagtoxml> VwCocagtoxmls { get; set; }
        public virtual DbSet<VwCocamov> VwCocamovs { get; set; }
        public virtual DbSet<VwCocamovId> VwCocamovIds { get; set; }
        public virtual DbSet<VwCocamovseg> VwCocamovsegs { get; set; }
        public virtual DbSet<VwCocasaldosalterbono> VwCocasaldosalterbonos { get; set; }
        public virtual DbSet<VwCocasaldossucbono> VwCocasaldossucbonos { get; set; }
        public virtual DbSet<VwCocasaldossucctebono> VwCocasaldossucctebonos { get; set; }
        public virtual DbSet<VwCocasolcontabilidad> VwCocasolcontabilidads { get; set; }
        public virtual DbSet<VwCocasolcontabilidadsaldo> VwCocasolcontabilidadsaldos { get; set; }
        public virtual DbSet<VwCocasolcontabilidadsaldotmp> VwCocasolcontabilidadsaldotmps { get; set; }
        public virtual DbSet<VwCoctgral> VwCoctgrals { get; set; }
        public virtual DbSet<VwCoctrefbancaria> VwCoctrefbancarias { get; set; }
        public virtual DbSet<VwCoctremisione> VwCoctremisiones { get; set; }
        public virtual DbSet<VwCoctremisionesfact> VwCoctremisionesfacts { get; set; }
        public virtual DbSet<VwCoctremisionesgral> VwCoctremisionesgrals { get; set; }
        public virtual DbSet<VwCodmovenvase> VwCodmovenvases { get; set; }
        public virtual DbSet<VwCoejenombreejecutivo> VwCoejenombreejecutivos { get; set; }
        public virtual DbSet<VwCoenaagarantium> VwCoenaagarantia { get; set; }
        public virtual DbSet<VwCoenactualizacobro> VwCoenactualizacobros { get; set; }
        public virtual DbSet<VwCoenanaliticagar> VwCoenanaliticagars { get; set; }
        public virtual DbSet<VwCoencambioga> VwCoencambiogas { get; set; }
        public virtual DbSet<VwCoencampLm> VwCoencampLms { get; set; }
        public virtual DbSet<VwCoencampNc> VwCoencampNcs { get; set; }
        public virtual DbSet<VwCoencampNcon> VwCoencampNcons { get; set; }
        public virtual DbSet<VwCoencampOx> VwCoencampOxes { get; set; }
        public virtual DbSet<VwCoencampRec> VwCoencampRecs { get; set; }
        public virtual DbSet<VwCoencomcamp> VwCoencomcamps { get; set; }
        public virtual DbSet<VwCoenconfimacorpo> VwCoenconfimacorpos { get; set; }
        public virtual DbSet<VwCoenconsultum> VwCoenconsulta { get; set; }
        public virtual DbSet<VwCoenconsumo> VwCoenconsumos { get; set; }
        public virtual DbSet<VwCoenconsumosant> VwCoenconsumosants { get; set; }
        public virtual DbSet<VwCoencontrato> VwCoencontratos { get; set; }
        public virtual DbSet<VwCoencontrolenv> VwCoencontrolenvs { get; set; }
        public virtual DbSet<VwCoencorpo> VwCoencorpos { get; set; }
        public virtual DbSet<VwCoendemora> VwCoendemoras { get; set; }
        public virtual DbSet<VwCoendemoracte> VwCoendemoractes { get; set; }
        public virtual DbSet<VwCoendotideal> VwCoendotideals { get; set; }
        public virtual DbSet<VwCoenembarquerem> VwCoenembarquerems { get; set; }
        public virtual DbSet<VwCoengrrem> VwCoengrrems { get; set; }
        public virtual DbSet<VwCoengrremisione> VwCoengrremisiones { get; set; }
        public virtual DbSet<VwCoeninvauditoriaNvo> VwCoeninvauditoriaNvos { get; set; }
        public virtual DbSet<VwCoeninvauditorium> VwCoeninvauditoria { get; set; }
        public virtual DbSet<VwCoeninventario> VwCoeninventarios { get; set; }
        public virtual DbSet<VwCoeninventariodiaInto> VwCoeninventariodiaIntos { get; set; }
        public virtual DbSet<VwCoeninventariodium> VwCoeninventariodia { get; set; }
        public virtual DbSet<VwCoenmov> VwCoenmovs { get; set; }
        public virtual DbSet<VwCoenmovsId> VwCoenmovsIds { get; set; }
        public virtual DbSet<VwCoenmovsIdDet> VwCoenmovsIdDets { get; set; }
        public virtual DbSet<VwCoenpatio> VwCoenpatios { get; set; }
        public virtual DbSet<VwCoenpendetalle> VwCoenpendetalles { get; set; }
        public virtual DbSet<VwCoenpendiente> VwCoenpendientes { get; set; }
        public virtual DbSet<VwCoenprov> VwCoenprovs { get; set; }
        public virtual DbSet<VwCoenreminventario> VwCoenreminventarios { get; set; }
        public virtual DbSet<VwCoenremisione> VwCoenremisiones { get; set; }
        public virtual DbSet<VwCoenremisionsuc> VwCoenremisionsucs { get; set; }
        public virtual DbSet<VwCoenresumenrem> VwCoenresumenrems { get; set; }
        public virtual DbSet<VwCoensolicitud> VwCoensolicituds { get; set; }
        public virtual DbSet<VwCoentranspendiente> VwCoentranspendientes { get; set; }
        public virtual DbSet<VwCoenvisitadorcam> VwCoenvisitadorcams { get; set; }
        public virtual DbSet<VwCoexpproforma> VwCoexpproformas { get; set; }
        public virtual DbSet<VwCofaanticipadum> VwCofaanticipada { get; set; }
        public virtual DbSet<VwCofaconsumoscte> VwCofaconsumosctes { get; set; }
        public virtual DbSet<VwCofacounval> VwCofacounvals { get; set; }
        public virtual DbSet<VwCofamtropedidoscte> VwCofamtropedidosctes { get; set; }
        public virtual DbSet<VwCofamtropedidosctehi> VwCofamtropedidosctehis { get; set; }
        public virtual DbSet<VwCofanotacmotivo> VwCofanotacmotivos { get; set; }
        public virtual DbSet<VwCofapedctesauto> VwCofapedctesautos { get; set; }
        public virtual DbSet<VwCofareimpresion> VwCofareimpresions { get; set; }
        public virtual DbSet<VwCofarelacioncte> VwCofarelacionctes { get; set; }
        public virtual DbSet<VwCofaretencione> VwCofaretenciones { get; set; }
        public virtual DbSet<VwCogrequiposexcluye> VwCogrequiposexcluyes { get; set; }
        public virtual DbSet<VwCogrgtosmanto> VwCogrgtosmantos { get; set; }
        public virtual DbSet<VwCogrinformeOperacione> VwCogrinformeOperaciones { get; set; }
        public virtual DbSet<VwCoidcarteraurbana> VwCoidcarteraurbanas { get; set; }
        public virtual DbSet<VwCoidcheduplicado> VwCoidcheduplicados { get; set; }
        public virtual DbSet<VwCoidcheprochemex> VwCoidcheprochemices { get; set; }
        public virtual DbSet<VwCoiddettpago> VwCoiddettpagos { get; set; }
        public virtual DbSet<VwCoidenvdevgar> VwCoidenvdevgars { get; set; }
        public virtual DbSet<VwCoidenvgardevpendiente> VwCoidenvgardevpendientes { get; set; }
        public virtual DbSet<VwCoidventasdeldium> VwCoidventasdeldia { get; set; }
        public virtual DbSet<VwCoinacetilenoex> VwCoinacetilenoices { get; set; }
        public virtual DbSet<VwCoinayb> VwCoinaybs { get; set; }
        public virtual DbSet<VwCoincargasdium> VwCoincargasdia { get; set; }
        public virtual DbSet<VwCoinconpedidosrem> VwCoinconpedidosrems { get; set; }
        public virtual DbSet<VwCoinconrutasdi> VwCoinconrutasdis { get; set; }
        public virtual DbSet<VwCoindemandaace> VwCoindemandaaces { get; set; }
        public virtual DbSet<VwCoindetallecodun> VwCoindetallecoduns { get; set; }
        public virtual DbSet<VwCoindetalleemb> VwCoindetalleembs { get; set; }
        public virtual DbSet<VwCoindetseries> VwCoindetseries { get; set; }
        public virtual DbSet<VwCoinfisico> VwCoinfisicos { get; set; }
        public virtual DbSet<VwCoinhojaembarque> VwCoinhojaembarques { get; set; }
        public virtual DbSet<VwCoininvauditorium> VwCoininvauditoria { get; set; }
        public virtual DbSet<VwCoinmov> VwCoinmovs { get; set; }
        public virtual DbSet<VwCoinmovs188> VwCoinmovs188s { get; set; }
        public virtual DbSet<VwCoinmovscorrseries> VwCoinmovscorrseries { get; set; }
        public virtual DbSet<VwCoinmovslineadium> VwCoinmovslineadia { get; set; }
        public virtual DbSet<VwCoinmovssinfamtro> VwCoinmovssinfamtros { get; set; }
        public virtual DbSet<VwCoinmovssum> VwCoinmovssums { get; set; }
        public virtual DbSet<VwCoinmovtrasconsumible> VwCoinmovtrasconsumibles { get; set; }
        public virtual DbSet<VwCoinnocaptura> VwCoinnocapturas { get; set; }
        public virtual DbSet<VwCoinnuloconsumo> VwCoinnuloconsumos { get; set; }
        public virtual DbSet<VwCoinnuloconsumogase> VwCoinnuloconsumogases { get; set; }
        public virtual DbSet<VwCoinpedexistencium> VwCoinpedexistencia { get; set; }
        public virtual DbSet<VwCoinpedidorem> VwCoinpedidorems { get; set; }
        public virtual DbSet<VwCoinpedidosdemandum> VwCoinpedidosdemanda { get; set; }
        public virtual DbSet<VwCoinpedidosrem> VwCoinpedidosrems { get; set; }
        public virtual DbSet<VwCoinpedmerc> VwCoinpedmercs { get; set; }
        public virtual DbSet<VwCoinpedmercexp> VwCoinpedmercexps { get; set; }
        public virtual DbSet<VwCoinprod> VwCoinprods { get; set; }
        public virtual DbSet<VwCoinprodecomerce> VwCoinprodecomerces { get; set; }
        public virtual DbSet<VwCoinprodexp> VwCoinprodexps { get; set; }
        public virtual DbSet<VwCoinsaldosfacant> VwCoinsaldosfacants { get; set; }
        public virtual DbSet<VwCoinsurmerc> VwCoinsurmercs { get; set; }
        public virtual DbSet<VwCointransito> VwCointransitos { get; set; }
        public virtual DbSet<VwCointransitosenviado> VwCointransitosenviados { get; set; }
        public virtual DbSet<VwCointransitosrecibido> VwCointransitosrecibidos { get; set; }
        public virtual DbSet<VwCointraspasosdiarutum> VwCointraspasosdiaruta { get; set; }
        public virtual DbSet<VwCommovenvcte> VwCommovenvctes { get; set; }
        public virtual DbSet<VwCooxadeudorenta2> VwCooxadeudorenta2s { get; set; }
        public virtual DbSet<VwCooxadeudorentaRpt> VwCooxadeudorentaRpts { get; set; }
        public virtual DbSet<VwCooxadeudorentaanticipadaBk> VwCooxadeudorentaanticipadaBks { get; set; }
        public virtual DbSet<VwCooxadeudorentaanticipadaNva> VwCooxadeudorentaanticipadaNvas { get; set; }
        public virtual DbSet<VwCooxadeudorentaanticipadum> VwCooxadeudorentaanticipada { get; set; }
        public virtual DbSet<VwCooxadeudorentum> VwCooxadeudorenta { get; set; }
        public virtual DbSet<VwCooxaltabajaCpapbpapcon> VwCooxaltabajaCpapbpapcons { get; set; }
        public virtual DbSet<VwCooxalterruteo> VwCooxalterruteos { get; set; }
        public virtual DbSet<VwCooxcancondeposito> VwCooxcancondepositos { get; set; }
        public virtual DbSet<VwCooxcaprecetasacumulado> VwCooxcaprecetasacumulados { get; set; }
        public virtual DbSet<VwCooxcarga> VwCooxcargas { get; set; }
        public virtual DbSet<VwCooxcliente> VwCooxclientes { get; set; }
        public virtual DbSet<VwCooxclientessuspendido> VwCooxclientessuspendidos { get; set; }
        public virtual DbSet<VwCooxcobrostc> VwCooxcobrostcs { get; set; }
        public virtual DbSet<VwCooxcobrostcAnt> VwCooxcobrostcAnts { get; set; }
        public virtual DbSet<VwCooxcobrostcBk> VwCooxcobrostcBks { get; set; }
        public virtual DbSet<VwCooxcobrostcarchivo> VwCooxcobrostcarchivos { get; set; }
        public virtual DbSet<VwCooxconsultapedido> VwCooxconsultapedidos { get; set; }
        public virtual DbSet<VwCooxconsultapedidosSeg> VwCooxconsultapedidosSegs { get; set; }
        public virtual DbSet<VwCooxconsultapedidosSegTtr> VwCooxconsultapedidosSegTtrs { get; set; }
        public virtual DbSet<VwCooxcontrato> VwCooxcontratos { get; set; }
        public virtual DbSet<VwCooxcontratodetalle> VwCooxcontratodetalles { get; set; }
        public virtual DbSet<VwCooxctesduplicado> VwCooxctesduplicados { get; set; }
        public virtual DbSet<VwCooxdiapacEstcon> VwCooxdiapacEstcons { get; set; }
        public virtual DbSet<VwCooxdiapaciente> VwCooxdiapacientes { get; set; }
        public virtual DbSet<VwCooxdifequipo> VwCooxdifequipos { get; set; }
        public virtual DbSet<VwCooxdirpedido> VwCooxdirpedidos { get; set; }
        public virtual DbSet<VwCooxdirtraslado> VwCooxdirtraslados { get; set; }
        public virtual DbSet<VwCooxequipocte> VwCooxequipoctes { get; set; }
        public virtual DbSet<VwCooxequiposinserie> VwCooxequiposinseries { get; set; }
        public virtual DbSet<VwCooxequiposyepen> VwCooxequiposyepens { get; set; }
        public virtual DbSet<VwCooxformatob> VwCooxformatobs { get; set; }
        public virtual DbSet<VwCooxhojasalidum> VwCooxhojasalida { get; set; }
        public virtual DbSet<VwCooxlistadoadeudoreceta> VwCooxlistadoadeudorecetas { get; set; }
        public virtual DbSet<VwCooxlistadoadeudorecetasendia> VwCooxlistadoadeudorecetasendias { get; set; }
        public virtual DbSet<VwCooxlistadoadeudorecetaspcallcenter> VwCooxlistadoadeudorecetaspcallcenters { get; set; }
        public virtual DbSet<VwCooxlistadoreceta> VwCooxlistadorecetas { get; set; }
        public virtual DbSet<VwCooxlistareceta> VwCooxlistarecetas { get; set; }
        public virtual DbSet<VwCooxlistarecetasncparcial> VwCooxlistarecetasncparcials { get; set; }
        public virtual DbSet<VwCooxpagosoperador> VwCooxpagosoperadors { get; set; }
        public virtual DbSet<VwCooxpedido> VwCooxpedidos { get; set; }
        public virtual DbSet<VwCooxpedidosdetalle> VwCooxpedidosdetalles { get; set; }
        public virtual DbSet<VwCooxpedidosfacturado> VwCooxpedidosfacturados { get; set; }
        public virtual DbSet<VwCooxpedidospendientesttr> VwCooxpedidospendientesttrs { get; set; }
        public virtual DbSet<VwCooxpedidosruteo> VwCooxpedidosruteos { get; set; }
        public virtual DbSet<VwCooxpedpendientesfact> VwCooxpedpendientesfacts { get; set; }
        public virtual DbSet<VwCooxpoblacionCpapbpap> VwCooxpoblacionCpapbpaps { get; set; }
        public virtual DbSet<VwCooxproducto> VwCooxproductos { get; set; }
        public virtual DbSet<VwCooxrecetasadeudo> VwCooxrecetasadeudos { get; set; }
        public virtual DbSet<VwCooxrentapart> VwCooxrentaparts { get; set; }
        public virtual DbSet<VwCooxruteooxidom> VwCooxruteooxidoms { get; set; }
        public virtual DbSet<VwCooxruteotipoequipo> VwCooxruteotipoequipos { get; set; }
        public virtual DbSet<VwCooxsaldosrutatot> VwCooxsaldosrutatots { get; set; }
        public virtual DbSet<VwCooxsaldosrutum> VwCooxsaldosruta { get; set; }
        public virtual DbSet<VwCopdtiempoentrega> VwCopdtiempoentregas { get; set; }
        public virtual DbSet<VwCopolespproducto> VwCopolespproductos { get; set; }
        public virtual DbSet<VwCortconcentrado> VwCortconcentrados { get; set; }
        public virtual DbSet<VwCortconcodigoga> VwCortconcodigogas { get; set; }
        public virtual DbSet<VwCortconrutadiarium> VwCortconrutadiaria { get; set; }
        public virtual DbSet<VwCortdetalle> VwCortdetalles { get; set; }
        public virtual DbSet<VwCortdetallerutum> VwCortdetalleruta { get; set; }
        public virtual DbSet<VwCortfacturacte> VwCortfacturactes { get; set; }
        public virtual DbSet<VwCortliquidacionga> VwCortliquidaciongas { get; set; }
        public virtual DbSet<VwDetallecomisonesmerc> VwDetallecomisonesmercs { get; set; }
        public virtual DbSet<VwFadetallepedido> VwFadetallepedidos { get; set; }
        public virtual DbSet<VwFamtropedido> VwFamtropedidos { get; set; }
        public virtual DbSet<VwHcocamov> VwHcocamovs { get; set; }
        public virtual DbSet<VwMcoctgral> VwMcoctgrals { get; set; }
        public virtual DbSet<VwRotacionmer> VwRotacionmers { get; set; }
        public virtual DbSet<VwUsuario> VwUsuarios { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                 optionsBuilder.UseSqlServer("Data Source=172.16.100.21;Initial Catalog=BD_SISCOMV2_301;User ID=admsis;Password=Facili5054*;MultipleActiveResultSets=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<AumentoPrecio>(entity =>
            {
                entity.HasKey(e => new { e.CveProducto, e.CveCarga, e.Suc, e.Linea, e.Clave, e.Codigo });

                entity.Property(e => e.CveProducto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaIncremento)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Incremento");

                entity.Property(e => e.Pcio1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pcio2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pcio3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("pcio3");

                entity.Property(e => e.PorcAum)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Porc_aum");

                entity.Property(e => e.Status)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Baakm02>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.NumEmp });

                entity.ToTable("baakm02");

                entity.Property(e => e.ColumnaMarp)
                    .HasMaxLength(10)
                    .HasColumnName("Columna_MARP")
                    .IsFixedLength(true);

                entity.Property(e => e.ColumnaMarp2)
                    .HasMaxLength(10)
                    .HasColumnName("Columna_MARP2")
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TipoNom)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Bcfkm01>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bcfkm01");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Envmgm).HasColumnName("envmgm");

                entity.Property(e => e.ExentoCampana)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Bdakm01>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdakm01");

                entity.Property(e => e.AltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Capto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CertifCal)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Copias)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CteEspecial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteViejo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Delegacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Distribuidor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Efectivo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EjeGe).HasColumnName("EjeGE");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.ExentoGm)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ExentoGM")
                    .IsFixedLength(true);

                entity.Property(e => e.ExentoRenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Extra1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Extra2)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaMetros)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Giro)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Grupo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Materno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.See)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPub)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Bdakm01SatAddendum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdakm01_SAT_Addenda");

                entity.Property(e => e.Addenda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Lista1)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Lista2)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Lista3)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Lista4)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Lista5)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NoProvRecep).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.NoProveedor).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.ParteSeriePdas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Riemisor)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("RIemisor");

                entity.Property(e => e.Rireceptor)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("RIreceptor");

                entity.Property(e => e.Sociedad)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bdakm02>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdakm02");

                entity.Property(e => e.Calle)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("calle");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ciudad");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Colonia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("colonia");

                entity.Property(e => e.Delegacion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("delegacion");

                entity.Property(e => e.Estado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("estado");

                entity.Property(e => e.Materno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("materno");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Numext)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("numext");

                entity.Property(e => e.Numint)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("numint");

                entity.Property(e => e.Paterno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paterno");

                entity.Property(e => e.Suc).HasColumnName("suc");
            });

            modelBuilder.Entity<Bdakm07>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdakm07");

                entity.Property(e => e.Abr)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Banco)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cedula)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CveCancelado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveFirmaFacturar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Dic)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ene)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Extra1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Extra2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Extra3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FamiliaResponsable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Feb)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Jul)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Jun)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mar)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Matricula)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.May)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombreTarjetaHab)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nov)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Oct)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sep)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TarjetaCredito)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TelTarjetaHab)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoParticular)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bdakm14>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdakm14");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Borrame>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrame");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("decimal(38, 3)")
                    .HasColumnName("cantidad");

                entity.Property(e => e.Clientesuc).HasColumnName("clientesuc");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Facturaremision)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("facturaremision");

                entity.Property(e => e.Fechamov)
                    .HasColumnType("datetime")
                    .HasColumnName("fechamov");

                entity.Property(e => e.Folio)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("folio");

                entity.Property(e => e.Numpedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numpedimento");

                entity.Property(e => e.Pedido).HasColumnName("pedido");

                entity.Property(e => e.Tipomovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipomovimiento")
                    .IsFixedLength(true);

                entity.Property(e => e.Tipotraspaso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("tipotraspaso");
            });

            modelBuilder.Entity<BorrameRespaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrame_respaldo");

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresAddenda).IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<BorrameRespaldodetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrame_respaldodetalle");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BorrameRespaldodetallepago>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrame_respaldodetallepago");

                entity.Property(e => e.DescripcionDetalleTipoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DetalleTipoPago)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdPago)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idPago");

                entity.Property(e => e.ListaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Promociones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Borrar1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrar1");

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BorrarDoble>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Borrar_Dobles");

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CantDeposito).HasColumnType("money");

                entity.Property(e => e.CantEfectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTransferencia).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Deposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FolioApp).HasColumnName("folioApp");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.MotivoRevId).HasColumnName("MotivoRevID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PendienteNc).HasColumnName("PendienteNC");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefFormaPago).HasMaxLength(50);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TipoNc).HasColumnName("TipoNC");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BorrarTmcofaruteo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("borrar_TMCOFARUTEO");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("identificador");

                entity.Property(e => e.TipoProducto)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRuteo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CargosErroneosBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CargosErroneosBK");

                entity.Property(e => e.ArchivoEntrada).HasMaxLength(50);

                entity.Property(e => e.ArchivoSalida).HasMaxLength(50);

                entity.Property(e => e.CodigoAuto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.IdTransaccion)
                    .HasMaxLength(24)
                    .HasColumnName("idTransaccion");

                entity.Property(e => e.MovimientoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MovimientoID");

                entity.Property(e => e.NoAutorizacion).HasMaxLength(10);

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Carteraintmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("carteraintmp");

                entity.Property(e => e.Archivo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.C1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdTransmicion).ValueGeneratedOnAdd();

                entity.Property(e => e.Identificador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChecarSinfactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Checar_sinfactura");

                entity.Property(e => e.ExcentoRecarga)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(602)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TipoC)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClienteRefBorra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClienteRef_borra");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("referencia");
            });

            modelBuilder.Entity<ControlLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_ControlLog");

                entity.Property(e => e.Cmd)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Hostname)
                    .HasMaxLength(128)
                    .HasColumnName("HOSTNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Loginame).HasMaxLength(128);

                entity.Property(e => e.NetAddress)
                    .HasMaxLength(12)
                    .HasColumnName("Net_Address")
                    .IsFixedLength(true);

                entity.Property(e => e.NetLibrary)
                    .HasMaxLength(12)
                    .HasColumnName("Net_Library")
                    .IsFixedLength(true);

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(128)
                    .HasColumnName("Program_Name")
                    .IsFixedLength(true);

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Coor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("coor");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Correotemporal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CORREOTEMPORAL");

                entity.Property(e => e.C1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Identifica)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CteFirma133290>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CteFirma_133290");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Clave)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CobroConsumible)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FamResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoPoliza).HasMaxLength(100);

                entity.Property(e => e.NomTtrasociado).HasColumnName("NomTTRAsociado");

                entity.Property(e => e.ObservacionesCte).IsUnicode(false);

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Solicitante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioBaja)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VigenciaPoliza).HasColumnType("datetime");
            });

            modelBuilder.Entity<CteFirma74963>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CteFirma_74963");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Clave)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CobroConsumible)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FamResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoPoliza).HasMaxLength(100);

                entity.Property(e => e.NomTtrasociado).HasColumnName("NomTTRAsociado");

                entity.Property(e => e.ObservacionesCte).IsUnicode(false);

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Solicitante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioBaja)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VigenciaPoliza).HasColumnType("datetime");
            });

            modelBuilder.Entity<CteFirmaDo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CteFirma_dos");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Clave)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CobroConsumible)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FamResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoPoliza).HasMaxLength(100);

                entity.Property(e => e.NomTtrasociado).HasColumnName("NomTTRAsociado");

                entity.Property(e => e.ObservacionesCte).IsUnicode(false);

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Solicitante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioBaja)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VigenciaPoliza).HasColumnType("datetime");
            });

            modelBuilder.Entity<DOriente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dORIENTE");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE");

                entity.Property(e => e.Factant)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACTANT");

                entity.Property(e => e.Factnva)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACTNVA");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FECHA");

                entity.Property(e => e.Fechanva)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FECHANVA");
            });

            modelBuilder.Entity<Detalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DETALLE$");

                entity.Property(e => e.Cliente).HasColumnName("CLIENTE");

                entity.Property(e => e.Fecha).HasColumnName("FECHA");

                entity.Property(e => e.Folio).HasColumnName("FOLIO");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .HasColumnName("NOMBRE");
            });

            modelBuilder.Entity<Diferenciafolio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DIFERENCIAFOLIOS");

                entity.Property(e => e.Dia).HasColumnName("DIA");

                entity.Property(e => e.Faltante).HasColumnName("FALTANTE");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Documento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("documentos");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Documentos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("documentos2");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Documentos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("documentos3");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Duplicados777261>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Duplicados777261");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Codigor).HasColumnName("codigor");

                entity.Property(e => e.Dotacionfinal).HasColumnName("dotacionfinal");

                entity.Property(e => e.Envcont).HasColumnName("envcont");

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");
            });

            modelBuilder.Entity<Duplicados777276>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Duplicados777276");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Codigor).HasColumnName("codigor");

                entity.Property(e => e.Dotacionfinal).HasColumnName("dotacionfinal");

                entity.Property(e => e.Envcont).HasColumnName("envcont");

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");
            });

            modelBuilder.Entity<Encuestum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClinica)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pregunta)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Respuesta)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Estudio>(entity =>
            {
                entity.HasKey(e => new { e.EstudioId, e.TipoEstudioId });

                entity.Property(e => e.EstudioId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EstudioID");

                entity.Property(e => e.TipoEstudioId).HasColumnName("TipoEstudioID");

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.SucursalId).HasColumnName("SucursalID");
            });

            modelBuilder.Entity<ExentosAumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExentosAumento");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");
            });

            modelBuilder.Entity<Finaltransmitidum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FINALTRANSMITIDA");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRecolecta).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Folioalmancen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("folioalmancen");

                entity.Property(e => e.C1)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("c1");

                entity.Property(e => e.C2).HasColumnName("c2");

                entity.Property(e => e.C3).HasColumnName("c3");

                entity.Property(e => e.C6)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("c6")
                    .IsFixedLength(true);

                entity.Property(e => e.C7).HasColumnName("c7");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTATUS");

                entity.Property(e => e.Fec).HasColumnName("FEC");

                entity.Property(e => e.Fecga)
                    .HasColumnType("datetime")
                    .HasColumnName("FECGA");

                entity.Property(e => e.Folio)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("FOLIO");

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SUCURSAL")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Foliocorreo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FOLIOCORREO");

                entity.Property(e => e.Fechatrans).HasColumnName("FECHATRANS");

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUCURSAL");

                entity.Property(e => e.Tn)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TN");
            });

            modelBuilder.Entity<Folioinvent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("folioinvent");

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tm)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TM");
            });

            modelBuilder.Entity<FoliosFixeado>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.SaldoCant).HasColumnType("numeric(4, 4)");

                entity.Property(e => e.Tasa).HasColumnType("decimal(23, 4)");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GeocodificadosOxi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Geocodificados_oxi");

                entity.Property(e => e.AsignarRecursos)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asignar_Recursos");

                entity.Property(e => e.Cliente).HasColumnName("CLIENTE");

                entity.Property(e => e.DuracionDescargaUnitaria).HasColumnName("Duracion_Descarga_Unitaria");

                entity.Property(e => e.ExcluirRecursos)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Excluir_Recursos");

                entity.Property(e => e.FinIntervaloHorario)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Fin_Intervalo_Horario");

                entity.Property(e => e.InicioIntervaloHorario)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Inicio_Intervalo_Horario");

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Ruta).HasColumnName("RUTA");

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Medico>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.MedicoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MedicoID");

                entity.Property(e => e.Nombre).HasMaxLength(255);

                entity.Property(e => e.SucursalId).HasColumnName("SucursalID");
            });

            modelBuilder.Entity<Noexiste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NOEXISTE");

                entity.Property(e => e.Dia).HasColumnName("DIA");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<NotasCredito>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NotasCredito");

                entity.Property(e => e.FechaFe).HasColumnType("datetime");

                entity.Property(e => e.FolioControl).HasColumnName("folioControl");

                entity.Property(e => e.ImpFactura).HasColumnType("money");
            });

            modelBuilder.Entity<Obcfkm07>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("obcfkm07");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Obcfkm07Facturado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Obcfkm07_Facturado");

                entity.Property(e => e.Almacen).HasColumnName("ALMACEN");

                entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

                entity.Property(e => e.Cliente).HasColumnName("CLIENTE");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Codigoenvases).HasColumnName("CODIGOENVASES");

                entity.Property(e => e.Codigofact).HasColumnName("CODIGOFACT");

                entity.Property(e => e.Ctefact).HasColumnName("CTEFACT");

                entity.Property(e => e.Fechamov)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHAMOV");

                entity.Property(e => e.Fechaproceso)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHAPROCESO");

                entity.Property(e => e.Fechaultrenta)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHAULTRENTA");

                entity.Property(e => e.Folio).HasColumnName("FOLIO");

                entity.Property(e => e.Foliofactura).HasColumnName("FOLIOFACTURA");

                entity.Property(e => e.Importe).HasColumnName("IMPORTE");

                entity.Property(e => e.Notacredito).HasColumnName("NOTACREDITO");

                entity.Property(e => e.Suc).HasColumnName("SUC");

                entity.Property(e => e.Tm)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TM")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Obcfkm07RentaComercio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Obcfkm07_RentaComercio");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Cilindros).HasColumnName("cilindros");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Fechamov)
                    .HasColumnType("datetime")
                    .HasColumnName("fechamov");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Importe).HasColumnName("importe");

                entity.Property(e => e.Importeiva).HasColumnName("importeiva");

                entity.Property(e => e.Notacredito).HasColumnName("notacredito");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tm")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Odgkh05>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("odgkh05");

                entity.Property(e => e.CampoAux)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CancelaUsuario)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cancelado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClavePendiente)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Definitivo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Extra1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Extra2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Extra3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Extra4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Extra5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Facturado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImpRecetas).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ImpSee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Observac1)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.Observac2)
                    .HasMaxLength(130)
                    .IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Volante)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Oriente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ORIENTE$");

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F10).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.F7).HasMaxLength(255);

                entity.Property(e => e.F8).HasMaxLength(255);

                entity.Property(e => e.F9).HasMaxLength(255);

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(255)
                    .HasColumnName("VIGENCIA ");
            });

            modelBuilder.Entity<Paciente>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Afiliacion).HasMaxLength(50);

                entity.Property(e => e.ApMaterno).HasMaxLength(50);

                entity.Property(e => e.ApPaterno).HasMaxLength(50);

                entity.Property(e => e.Calle).HasMaxLength(255);

                entity.Property(e => e.Celular).HasMaxLength(20);

                entity.Property(e => e.ClinicaId).HasColumnName("ClinicaID");

                entity.Property(e => e.Cpid).HasColumnName("CPID");

                entity.Property(e => e.CteSiscom)
                    .HasMaxLength(10)
                    .HasColumnName("CteSISCOM");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EstadoId).HasColumnName("EstadoID");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaNac).HasColumnType("datetime");

                entity.Property(e => e.GeneroId).HasColumnName("GeneroID");

                entity.Property(e => e.MedicoId).HasColumnName("MedicoID");

                entity.Property(e => e.MunicipioId).HasColumnName("MunicipioID");

                entity.Property(e => e.Nombre).HasMaxLength(50);

                entity.Property(e => e.Observaciones).HasMaxLength(500);

                entity.Property(e => e.ObservacionesCarga).HasMaxLength(4000);

                entity.Property(e => e.PacienteId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PacienteID");

                entity.Property(e => e.SucSiscom).HasColumnName("SucSISCOM");

                entity.Property(e => e.SucursalId).HasColumnName("SucursalID");

                entity.Property(e => e.TecnicoId).HasColumnName("TecnicoID");

                entity.Property(e => e.Telefono).HasMaxLength(20);
            });

            modelBuilder.Entity<PasoTdconocomg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PASO_TDCONOCOMG");

                entity.Property(e => e.CveAux)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CvePago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PasoThcoinmov>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PASO_THCOINMOV");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC");

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PedidosMayo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pedidosMayo");

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CantDeposito).HasColumnType("money");

                entity.Property(e => e.CantEfectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTransferencia).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Deposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FolioApp).HasColumnName("folioApp");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.MotivoRevId).HasColumnName("MotivoRevID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PendienteNc).HasColumnName("PendienteNC");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefFormaPago).HasMaxLength(50);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TipoNc).HasColumnName("TipoNC");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pendiente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PENDIENTE");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pendienteinvent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PENDIENTEINVENT");

                entity.Property(e => e.Folio).HasColumnName("FOLIO");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PreciosConsumos2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PreciosConsumos2");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Diassinconsumo).HasColumnName("diassinconsumo");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Fechaconsumo)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaconsumo");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Precio)
                    .HasColumnType("money")
                    .HasColumnName("precio");

                entity.Property(e => e.PrecioEspecial).HasColumnType("money");

                entity.Property(e => e.Precioespecialanterior)
                    .HasColumnType("money")
                    .HasColumnName("precioespecialanterior");

                entity.Property(e => e.Preciomostrador)
                    .HasColumnType("money")
                    .HasColumnName("preciomostrador");

                entity.Property(e => e.Preciopiso)
                    .HasColumnType("money")
                    .HasColumnName("preciopiso");

                entity.Property(e => e.UltFechaModifPe)
                    .HasColumnType("datetime")
                    .HasColumnName("UltFechaModifPE");

                entity.Property(e => e.Uni2017).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Uni2018).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.Val2017)
                    .HasColumnType("money")
                    .HasColumnName("val2017");

                entity.Property(e => e.Val2018)
                    .HasColumnType("money")
                    .HasColumnName("val2018");
            });

            modelBuilder.Entity<PreciosConsumos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PreciosConsumos3");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Diassinconsumo).HasColumnName("diassinconsumo");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Fechaconsumo)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaconsumo");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Precio)
                    .HasColumnType("money")
                    .HasColumnName("precio");

                entity.Property(e => e.PrecioEspecial).HasColumnType("money");

                entity.Property(e => e.Precioespecialanterior)
                    .HasColumnType("money")
                    .HasColumnName("precioespecialanterior");

                entity.Property(e => e.Preciomostrador)
                    .HasColumnType("money")
                    .HasColumnName("preciomostrador");

                entity.Property(e => e.Preciopiso)
                    .HasColumnType("money")
                    .HasColumnName("preciopiso");

                entity.Property(e => e.UltFechaModifPe)
                    .HasColumnType("datetime")
                    .HasColumnName("UltFechaModifPE");

                entity.Property(e => e.Uni2017).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Uni2018).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.Val2017)
                    .HasColumnType("money")
                    .HasColumnName("val2017");

                entity.Property(e => e.Val2018)
                    .HasColumnType("money")
                    .HasColumnName("val2018");
            });

            modelBuilder.Entity<RCostoProductoPlaneacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("R_CostoProducto_Planeacion_Detalle");

                entity.Property(e => e.Abc)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ABC");

                entity.Property(e => e.GrupoInst)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoRfc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GrupoRFC");

                entity.Property(e => e.GrupoSec).HasColumnName("GrupoSEC");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGpoSec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NombreGpoSEC");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Utilidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Valores).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<RentaOxidomTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RentaOxidom_tmp");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Cilindros).HasColumnName("cilindros");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Fechamov)
                    .HasColumnType("datetime")
                    .HasColumnName("fechamov");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Importe).HasColumnName("importe");

                entity.Property(e => e.Importeiva).HasColumnName("importeiva");

                entity.Property(e => e.Notacredito).HasColumnName("notacredito");

                entity.Property(e => e.Tm)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tm")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ReprocesoVentasCierre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReprocesoVentasCierre");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaUltCon).HasColumnType("datetime");
            });

            modelBuilder.Entity<RespadoTarjeta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("respadoTarjetas");

                entity.Property(e => e.ArchivoEntrada).HasMaxLength(50);

                entity.Property(e => e.ArchivoSalida).HasMaxLength(50);

                entity.Property(e => e.CodigoAuto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.IdTransaccion)
                    .HasMaxLength(24)
                    .HasColumnName("idTransaccion");

                entity.Property(e => e.MovimientoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MovimientoID");

                entity.Property(e => e.NoAutorizacion).HasMaxLength(10);

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Respaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("respaldo");

                entity.Property(e => e.Asignacion)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BloqueoPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CargoAbono)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccsap");

                entity.Property(e => e.Cebe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cebe");

                entity.Property(e => e.Clasedoc)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("clasedoc");

                entity.Property(e => e.ClaveContable)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContraPda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPda")
                    .IsFixedLength(true);

                entity.Property(e => e.CorteFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("corteFactura")
                    .IsFixedLength(true);

                entity.Property(e => e.Ctasap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ctasap");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.ExentoRetencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Extra4)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra4");

                entity.Property(e => e.Extra5)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra5");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechacon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacon");

                entity.Property(e => e.Fechadoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechadoc");

                entity.Property(e => e.Fechavalor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fechavalor");

                entity.Property(e => e.Idenusd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("idenusd");

                entity.Property(e => e.ImpOriginal).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImpSucIva).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IndicadorCme)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorCME");

                entity.Property(e => e.IndicadorRetencion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Indicadoriva)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("indicadoriva");

                entity.Property(e => e.LdrEntityId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ldr_entity_id");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.OrdenInterna)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("referencia");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.TipoCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.UniqueId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RespaldoEdithcar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("respaldo_edithcar");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.MetodoPago)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Uuid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("UUID");
            });

            modelBuilder.Entity<Respaldoenvase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("respaldoenvases");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRecolecta).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rfcvalido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RFCVALIDOS");

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<Saldosfactura>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("SALDOSFACTURA");

                entity.Property(e => e.FechaMovimiento)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Salida).HasColumnType("decimal(5, 3)");
            });

            modelBuilder.Entity<Secuencium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("secuencia");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ServiciosNoFacturado>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Servidare>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SERVIDARE");

                entity.Property(e => e.Cliente).HasMaxLength(255);

                entity.Property(e => e.Estatus).HasMaxLength(255);

                entity.Property(e => e.Fecha).HasMaxLength(255);

                entity.Property(e => e.MotivoCancelado).HasMaxLength(255);

                entity.Property(e => e.Operador).HasMaxLength(255);

                entity.Property(e => e.TipoServicio).HasMaxLength(255);
            });

            modelBuilder.Entity<Sheet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet1$");

                entity.Property(e => e.Fecha).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre).HasMaxLength(255);

                entity.Property(e => e.NombreClinica)
                    .HasMaxLength(255)
                    .HasColumnName("Nombre Clinica");

                entity.Property(e => e.Pregunta).HasMaxLength(255);

                entity.Property(e => e.Respuesta).HasMaxLength(255);
            });

            modelBuilder.Entity<Silvium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DpfechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaFin");

                entity.Property(e => e.DpfechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaInicio");

                entity.Property(e => e.EstatusMov)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FolioReceta)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.TipoServicio)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SucCorreo319>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SucCorreo319");

                entity.Property(e => e.C1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C101)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C102)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C103)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C104)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C105)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C106)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C107)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C108)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C109)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C120)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoafdetalle>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOAFDETALLE");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoActivoNavigation)
                    .WithMany(p => p.Tccoafdetalles)
                    .HasForeignKey(d => d.TipoActivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOAFDETALLE_TCCOAFTIPOS");
            });

            modelBuilder.Entity<Tccoafrequerido>(entity =>
            {
                entity.HasKey(e => e.TipoActivo)
                    .HasName("PK_TMCOAFREQUERIDOS");

                entity.ToTable("TCCOAFREQUERIDOS");

                entity.Property(e => e.TipoActivo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Marca)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Modelo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Motor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumActivoFijo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumEco)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Palcas)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfa)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("RFA")
                    .IsFixedLength(true);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoafsistema>(entity =>
            {
                entity.HasKey(e => e.IdSistema);

                entity.ToTable("TCCOAFSISTEMAS");

                entity.Property(e => e.IdSistema).HasColumnName("Id_Sistema");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sistema)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoaftipo>(entity =>
            {
                entity.HasKey(e => e.IdActivo)
                    .HasName("PK_TCCOAFTIPOS_1");

                entity.ToTable("TCCOAFTIPOS");

                entity.Property(e => e.IdActivo)
                    .ValueGeneratedNever()
                    .HasColumnName("idActivo");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocabancoscomp>(entity =>
            {
                entity.HasKey(e => e.Rfcbanco);

                entity.ToTable("TCCOCABANCOSCOMP");

                entity.Property(e => e.Rfcbanco)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFCBanco");

                entity.Property(e => e.Fechaaudit).HasColumnType("datetime");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocacondetgto>(entity =>
            {
                entity.HasKey(e => e.IdConcepto);

                entity.ToTable("TCCOCACONDETGTO");

                entity.Property(e => e.IdConcepto).HasColumnName("Id_Concepto");

                entity.Property(e => e.Costo).HasColumnType("money");

                entity.Property(e => e.Frecuencia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Incluye)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Proceso)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServicioDescripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tccocactaspartida>(entity =>
            {
                entity.HasKey(e => e.Cuenta);

                entity.ToTable("TCCOCACTASPARTIDAS");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocacuentagasto>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoGasto, e.Cuenta, e.Contador });

                entity.ToTable("TCCOCACUENTAGASTOS");

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AbrP).HasColumnType("money");

                entity.Property(e => e.AbrR).HasColumnType("money");

                entity.Property(e => e.AgoP).HasColumnType("money");

                entity.Property(e => e.AgoR).HasColumnType("money");

                entity.Property(e => e.CuentaRet1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescUsos)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DicP).HasColumnType("money");

                entity.Property(e => e.DicR).HasColumnType("money");

                entity.Property(e => e.EneP).HasColumnType("money");

                entity.Property(e => e.EneR).HasColumnType("money");

                entity.Property(e => e.FebP).HasColumnType("money");

                entity.Property(e => e.FebR).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.JulP).HasColumnType("money");

                entity.Property(e => e.JulR).HasColumnType("money");

                entity.Property(e => e.JunP).HasColumnType("money");

                entity.Property(e => e.JunR).HasColumnType("money");

                entity.Property(e => e.MarP).HasColumnType("money");

                entity.Property(e => e.MarR).HasColumnType("money");

                entity.Property(e => e.MayP).HasColumnType("money");

                entity.Property(e => e.MayR).HasColumnType("money");

                entity.Property(e => e.NovP).HasColumnType("money");

                entity.Property(e => e.NovR).HasColumnType("money");

                entity.Property(e => e.OctP).HasColumnType("money");

                entity.Property(e => e.OctR).HasColumnType("money");

                entity.Property(e => e.PorcenRet1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PorcenRet2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SepP).HasColumnType("money");

                entity.Property(e => e.SepR).HasColumnType("money");

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoSucAplica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoccSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaXml).HasColumnName("validaXML");

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tccocatgasto)
                    .WithMany(p => p.Tccocacuentagastos)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoccSap })
                    .HasConstraintName("FK_TCCOCACUENTAGASTOS_TCCOCACUENTAGASTOS");
            });

            modelBuilder.Entity<TccocacuentagastosConta2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOCACUENTAGASTOS_CONTA2");

                entity.Property(e => e.AbrP).HasColumnType("money");

                entity.Property(e => e.AbrR).HasColumnType("money");

                entity.Property(e => e.AgoP).HasColumnType("money");

                entity.Property(e => e.AgoR).HasColumnType("money");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescUsos)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DicP).HasColumnType("money");

                entity.Property(e => e.DicR).HasColumnType("money");

                entity.Property(e => e.EneP).HasColumnType("money");

                entity.Property(e => e.EneR).HasColumnType("money");

                entity.Property(e => e.FebP).HasColumnType("money");

                entity.Property(e => e.FebR).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.JulP).HasColumnType("money");

                entity.Property(e => e.JulR).HasColumnType("money");

                entity.Property(e => e.JunP).HasColumnType("money");

                entity.Property(e => e.JunR).HasColumnType("money");

                entity.Property(e => e.MarP).HasColumnType("money");

                entity.Property(e => e.MarR).HasColumnType("money");

                entity.Property(e => e.MayP).HasColumnType("money");

                entity.Property(e => e.MayR).HasColumnType("money");

                entity.Property(e => e.NovP).HasColumnType("money");

                entity.Property(e => e.NovR).HasColumnType("money");

                entity.Property(e => e.OctP).HasColumnType("money");

                entity.Property(e => e.OctR).HasColumnType("money");

                entity.Property(e => e.PorcenRet1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PorcenRet2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SepP).HasColumnType("money");

                entity.Property(e => e.SepR).HasColumnType("money");

                entity.Property(e => e.TipoGasto)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoSucAplica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoccSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaXml).HasColumnName("validaXML");

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccocacuentagastosContum>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoGasto, e.Cuenta, e.Contador });

                entity.ToTable("TCCOCACUENTAGASTOS_conta");

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AbrP).HasColumnType("money");

                entity.Property(e => e.AbrR).HasColumnType("money");

                entity.Property(e => e.AgoP).HasColumnType("money");

                entity.Property(e => e.AgoR).HasColumnType("money");

                entity.Property(e => e.CuentaRet1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescUsos)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DicP).HasColumnType("money");

                entity.Property(e => e.DicR).HasColumnType("money");

                entity.Property(e => e.EneP).HasColumnType("money");

                entity.Property(e => e.EneR).HasColumnType("money");

                entity.Property(e => e.FebP).HasColumnType("money");

                entity.Property(e => e.FebR).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.JulP).HasColumnType("money");

                entity.Property(e => e.JulR).HasColumnType("money");

                entity.Property(e => e.JunP).HasColumnType("money");

                entity.Property(e => e.JunR).HasColumnType("money");

                entity.Property(e => e.MarP).HasColumnType("money");

                entity.Property(e => e.MarR).HasColumnType("money");

                entity.Property(e => e.MayP).HasColumnType("money");

                entity.Property(e => e.MayR).HasColumnType("money");

                entity.Property(e => e.NovP).HasColumnType("money");

                entity.Property(e => e.NovR).HasColumnType("money");

                entity.Property(e => e.OctP).HasColumnType("money");

                entity.Property(e => e.OctR).HasColumnType("money");

                entity.Property(e => e.PorcenRet1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PorcenRet2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SepP).HasColumnType("money");

                entity.Property(e => e.SepR).HasColumnType("money");

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoSucAplica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoccSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Xml).HasColumnName("XML");
            });

            modelBuilder.Entity<TccocacuentagastosResp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOCACUENTAGASTOS_RESP");

                entity.Property(e => e.AbrP).HasColumnType("money");

                entity.Property(e => e.AbrR).HasColumnType("money");

                entity.Property(e => e.AgoP).HasColumnType("money");

                entity.Property(e => e.AgoR).HasColumnType("money");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescUsos)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DicP).HasColumnType("money");

                entity.Property(e => e.DicR).HasColumnType("money");

                entity.Property(e => e.EneP).HasColumnType("money");

                entity.Property(e => e.EneR).HasColumnType("money");

                entity.Property(e => e.FebP).HasColumnType("money");

                entity.Property(e => e.FebR).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.JulP).HasColumnType("money");

                entity.Property(e => e.JulR).HasColumnType("money");

                entity.Property(e => e.JunP).HasColumnType("money");

                entity.Property(e => e.JunR).HasColumnType("money");

                entity.Property(e => e.MarP).HasColumnType("money");

                entity.Property(e => e.MarR).HasColumnType("money");

                entity.Property(e => e.MayP).HasColumnType("money");

                entity.Property(e => e.MayR).HasColumnType("money");

                entity.Property(e => e.NovP).HasColumnType("money");

                entity.Property(e => e.NovR).HasColumnType("money");

                entity.Property(e => e.OctP).HasColumnType("money");

                entity.Property(e => e.OctR).HasColumnType("money");

                entity.Property(e => e.PorcenRet1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PorcenRet2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SepP).HasColumnType("money");

                entity.Property(e => e.SepR).HasColumnType("money");

                entity.Property(e => e.TipoGasto)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoSucAplica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoccSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaXml).HasColumnName("validaXML");

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocadepartamento>(entity =>
            {
                entity.ToTable("TCCOCADEPARTAMENTOS");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .HasColumnName("id");

                entity.Property(e => e.NombreDepartamento).IsRequired();
            });

            modelBuilder.Entity<TccocadepartamentosEstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOCADEPARTAMENTOS_ESTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("id");

                entity.Property(e => e.IdDepartamento)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NombreStatus).IsRequired();

                entity.HasOne(d => d.IdDepartamentoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdDepartamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.TCCOCADEPARTAMENTOS_ESTATUS_IdDepartamento");
            });

            modelBuilder.Entity<Tccocadiasrevcob>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Periodo });

                entity.ToTable("TCCOCADIASREVCOB");

                entity.Property(e => e.DiaCobro).HasColumnType("date");

                entity.Property(e => e.DiaRevision).HasColumnType("date");

                entity.Property(e => e.FechaAudit).HasColumnType("date");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tccocadiasrevcobs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOCADIASREVCOB_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tccocaempanticipo>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Empleado });

                entity.ToTable("TCCOCAEMPANTICIPO");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tcconoemp)
                    .WithOne(p => p.Tccocaempanticipo)
                    .HasForeignKey<Tccocaempanticipo>(d => new { d.Sucursal, d.Empleado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOCAEMPANTICIPO_TCCONOEMP");
            });

            modelBuilder.Entity<Tccocafestivo>(entity =>
            {
                entity.HasKey(e => new { e.FechaFestiva, e.Proceso });

                entity.ToTable("TCCOCAFESTIVOS");

                entity.Property(e => e.FechaFestiva).HasColumnType("date");

                entity.Property(e => e.Proceso)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaReemplazo).HasColumnType("date");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocaintersuc>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TCCOCAINTERSUC");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<Tccocasaldosproc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOCASALDOSPROC");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoProceso)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocastatusseg>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCASTATUSSEG");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoMercadoNavigation)
                    .WithMany(p => p.Tccocastatussegs)
                    .HasForeignKey(d => d.TipoMercado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOCASTATUSSEG_TCCOCATMERC");
            });

            modelBuilder.Entity<Tccocatcofeprisproducto>(entity =>
            {
                entity.ToTable("TCCOCATCOFEPRISPRODUCTOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CondicionesEspTransp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DatosFabricante)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.DatosFormulador)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.DatosMaquilador)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.DenominacionDistintivaProd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DenominacionGenericaProd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fabricante)
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCaducidad).HasColumnType("date");

                entity.Property(e => e.FolioImpoVucem)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FolioImpoVUCEM");

                entity.Property(e => e.FormaFarmaceutica)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoteMedicamento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NomQuimico)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreIngredienteActivo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NumCas)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NumCAS");

                entity.Property(e => e.NumRegSanPlagCofepris)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NumRegSanPlagCOFEPRIS");

                entity.Property(e => e.PermisoImportacion)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocialEmpImp)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.RegistroSanitarioFolioAutorizacion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SectorCofepris)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UsoAutorizado)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatcondicionesespecialestra>(entity =>
            {
                entity.ToTable("TCCOCATCONDICIONESESPECIALESTRA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Clave)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicioVigencia).HasColumnType("date");
            });

            modelBuilder.Entity<Tccocatdenogenerica>(entity =>
            {
                entity.ToTable("TCCOCATDENOGENERICA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DenominacionGenerica)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatformafarmaceutica>(entity =>
            {
                entity.ToTable("TCCOCATFORMAFARMACEUTICA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Clave)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinVigencia).HasColumnType("date");

                entity.Property(e => e.FechaInicioVigencia).HasColumnType("date");
            });

            modelBuilder.Entity<Tccocatgasto>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoCcsap });

                entity.ToTable("TCCOCATGASTOS");

                entity.Property(e => e.TipoCcsap)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TipoCCSap");

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatidenprod>(entity =>
            {
                entity.ToTable("TCCOCATIDENPROD");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocating>(entity =>
            {
                entity.HasKey(e => e.IdTipo);

                entity.ToTable("TCCOCATING");

                entity.Property(e => e.IdTipo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccocatmateriaprima>(entity =>
            {
                entity.ToTable("TCCOCATMATERIAPRIMA");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatmerc>(entity =>
            {
                entity.HasKey(e => e.IdMercado);

                entity.ToTable("TCCOCATMERC");

                entity.Property(e => e.IdMercado).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Sector).HasColumnName("sector");

                entity.Property(e => e.TipoMercado)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatormateriaprima>(entity =>
            {
                entity.ToTable("TCCOCATORMATERIAPRIMA");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatprodmedicinale>(entity =>
            {
                entity.HasKey(e => e.CodigoProducto)
                    .HasName("PK__TCCOCATP__785B009E78BC1426");

                entity.ToTable("TCCOCATPRODMEDICINALES");

                entity.Property(e => e.CodigoProducto).ValueGeneratedNever();

                entity.Property(e => e.CondicionesEspTransp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DenominacionDistintiva)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DenominacionGenerica)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionProducto)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fabricante)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FormaFarmaceutica)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegistroSanitario)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatsector>(entity =>
            {
                entity.HasKey(e => e.IdSector);

                entity.ToTable("TCCOCATSECTOR");

                entity.Property(e => e.IdSector)
                    .ValueGeneratedNever()
                    .HasColumnName("idSector");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocatsectorcofepri>(entity =>
            {
                entity.ToTable("TCCOCATSECTORCOFEPRIS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Clave)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinVigencia).HasColumnType("date");

                entity.Property(e => e.FechaInicioVigencia).HasColumnType("date");
            });

            modelBuilder.Entity<Tccocattipogasto>(entity =>
            {
                entity.HasKey(e => e.IdTipoGasto)
                    .HasName("PK_TCCOCATGASTO");

                entity.ToTable("TCCOCATTIPOGASTO");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocattipomaterium>(entity =>
            {
                entity.ToTable("TCCOCATTIPOMATERIA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Clave)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinVigencia).HasColumnType("date");

                entity.Property(e => e.FechaInicioVigencia).HasColumnType("date");
            });

            modelBuilder.Entity<Tccocpclaveprodservcp>(entity =>
            {
                entity.HasKey(e => e.Clave)
                    .HasName("PK_TTCCOCPCLAVEPRODSERVCP");

                entity.ToTable("TCCOCPCLAVEPRODSERVCP");

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FehcaInicio).HasColumnType("datetime");

                entity.Property(e => e.MaterialPeligroso)
                    .HasMaxLength(5)
                    .IsFixedLength(true);

                entity.Property(e => e.Palabras)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocpclaveunidadpeso>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPCLAVEUNIDADPESO");

                entity.Property(e => e.Clave)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bandera)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_fin");

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_inicio");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nota)
                    .HasMaxLength(250)
                    .IsFixedLength(true);

                entity.Property(e => e.Simbolo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocpconfautotransporte>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPCONFAUTOTRANSPORTE");

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Fin");

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Inicio");

                entity.Property(e => e.NumEjes)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Num_Ejes")
                    .IsFixedLength(true);

                entity.Property(e => e.NumLlanta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Num_Llanta")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccocpcvetransporte>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPCVETRANSPORTE");

                entity.Property(e => e.Clave)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_inicio");

                entity.Property(e => e.FechaVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_vigencia");
            });

            modelBuilder.Entity<Tccocpmaterialpeligroso>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPMATERIALPELIGROSO");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CantidadLim)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("Cantidad_lim");

                entity.Property(e => e.CisternasConte)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Cisternas_conte");

                entity.Property(e => e.Clase)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DispEsp)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Disp_esp");

                entity.Property(e => e.FechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_fin");

                entity.Property(e => e.FechaIni)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_ini");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Peligro)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocptipoembalaje>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPTIPOEMBALAJE");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_fin");

                entity.Property(e => e.FechaIni)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_ini");
            });

            modelBuilder.Entity<Tccocptipoestacion>(entity =>
            {
                entity.HasKey(e => e.Clave)
                    .HasName("PK_TransactionHistoryArchive_TransactionID");

                entity.ToTable("TCCOCPTIPOESTACION");

                entity.Property(e => e.Clave)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveTransporte)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Clave_transporte")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_inicio");

                entity.Property(e => e.FechaVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_vigencia");
            });

            modelBuilder.Entity<Tccocptipopermiso>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOCPTIPOPERMISO");

                entity.Property(e => e.Clave)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveTransporte)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Clave_Transporte")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_inicio");

                entity.Property(e => e.FechaVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_vigencia");
            });

            modelBuilder.Entity<Tccoctbanco>(entity =>
            {
                entity.HasKey(e => e.Banco);

                entity.ToTable("TCCOCTBANCOS");

                entity.Property(e => e.Banco).ValueGeneratedNever();

                entity.Property(e => e.Clabe)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaBancoComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBancoComplemento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Promociones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBanco)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctbloqueapre>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo, e.TipoBloqueo });

                entity.ToTable("TCCOCTBLOQUEAPRE");

                entity.Property(e => e.TipoBloqueo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tccoctcondpago>(entity =>
            {
                entity.HasKey(e => e.IdCondPago);

                entity.ToTable("TCCOCTCONDPAGO");

                entity.Property(e => e.IdCondPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctgiro>(entity =>
            {
                entity.HasKey(e => e.IdGiro);

                entity.ToTable("TCCOCTGIRO");

                entity.Property(e => e.IdGiro).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctgpocium>(entity =>
            {
                entity.HasKey(e => e.GrupoCia);

                entity.ToTable("TCCOCTGPOCIA");

                entity.Property(e => e.GrupoCia)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctmcapto>(entity =>
            {
                entity.HasKey(e => e.MedioCapto);

                entity.ToTable("TCCOCTMCAPTO");

                entity.Property(e => e.MedioCapto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctpagoautomatico>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.Cliente });

                entity.ToTable("TCCOCTPAGOAUTOMATICO");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoctporcodpreesp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Codigo });

                entity.ToTable("TCCOCTPORCODPREESP");

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(10, 3)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tccoctporcodpreesps)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOCTPORCODPREESP_TMCOINPROD01");
            });

            modelBuilder.Entity<Tccoctsee>(entity =>
            {
                entity.HasKey(e => e.CveSee);

                entity.ToTable("TCCOCTSEE");

                entity.Property(e => e.CveSee)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Escala1).HasColumnType("money");

                entity.Property(e => e.Escala2).HasColumnType("money");

                entity.Property(e => e.Escala3).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoctsubgiro>(entity =>
            {
                entity.HasKey(e => new { e.IdSubGiro, e.IdGiro });

                entity.ToTable("TCCOCTSUBGIRO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdGiroNavigation)
                    .WithMany(p => p.Tccoctsubgiros)
                    .HasForeignKey(d => d.IdGiro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOCTSUBGIRO_TCCOCTGIRO");
            });

            modelBuilder.Entity<Tccoctsubtct>(entity =>
            {
                entity.HasKey(e => e.IdSubTipoCliente);

                entity.ToTable("TCCOCTSUBTCT");

                entity.Property(e => e.DescTipoCliente)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdTipoCliente)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocttc>(entity =>
            {
                entity.HasKey(e => e.Tipo);

                entity.ToTable("TCCOCTTC");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocttipoejega>(entity =>
            {
                entity.HasKey(e => e.Tipo);

                entity.ToTable("TCCOCTTIPOEJEGAS");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccocvepedidossap>(entity =>
            {
                entity.HasKey(e => e.ClaveDoc);

                entity.ToTable("TCCOCVEPEDIDOSSAP");

                entity.Property(e => e.ClaveDoc)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MascaraLongitud)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Prefijo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenerrorcorpo>(entity =>
            {
                entity.HasKey(e => e.IdError);

                entity.ToTable("TCCOENERRORCORPO");

                entity.Property(e => e.IdError)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_Error");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenfamilium>(entity =>
            {
                entity.HasKey(e => e.Familia);

                entity.ToTable("TCCOENFAMILIA");

                entity.Property(e => e.Familia).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenponderaox>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TCCOENPONDERAOX");

                entity.Property(e => e.Codigo).ValueGeneratedNever();
            });

            modelBuilder.Entity<Tccoenruncampana>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOENRUNCAMPANA");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.Mes)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Parametros)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProcesoCampana)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoensucrem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOENSUCREM");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoRem)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoentgarantium>(entity =>
            {
                entity.HasKey(e => e.IdTgarantia);

                entity.ToTable("TCCOENTGARANTIA");

                entity.Property(e => e.IdTgarantia).HasColumnName("Id_TGarantia");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenvalvula>(entity =>
            {
                entity.HasKey(e => e.IdValvula);

                entity.ToTable("TCCOENVALVULA");

                entity.Property(e => e.IdValvula)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_Valvula");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenvmovrem>(entity =>
            {
                entity.HasKey(e => e.IdMovimiento);

                entity.ToTable("TCCOENVMOVREM");

                entity.Property(e => e.IdMovimiento).HasColumnName("Id_Movimiento");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenvstatusrem>(entity =>
            {
                entity.HasKey(e => e.IdStatus);

                entity.ToTable("TCCOENVSTATUSREM");

                entity.Property(e => e.IdStatus).HasColumnName("Id_Status");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoenvtiporem>(entity =>
            {
                entity.HasKey(e => e.IdTipoRem);

                entity.ToTable("TCCOENVTIPOREM");

                entity.Property(e => e.IdTipoRem)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Id_TipoRem")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoerror>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK__TCCOERRO__06370DADE719CFEC");

                entity.ToTable("TCCOERROR");

                entity.Property(e => e.Codigo).HasMaxLength(10);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<Tccoexpfarancelarium>(entity =>
            {
                entity.HasKey(e => new { e.FraccionArancelaria, e.Um });

                entity.ToTable("TCCOEXPFARANCELARIA");

                entity.Property(e => e.FraccionArancelaria)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM")
                    .IsFixedLength(true);

                entity.Property(e => e.CodUm)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CodUM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoexppuerto>(entity =>
            {
                entity.HasKey(e => e.IdPuerto);

                entity.ToTable("TCCOEXPPUERTOS");

                entity.Property(e => e.Descripcion).HasMaxLength(30);
            });

            modelBuilder.Entity<Tccoexptermventum>(entity =>
            {
                entity.HasKey(e => e.IdTerminoV);

                entity.ToTable("TCCOEXPTERMVENTA");

                entity.Property(e => e.TerminoVenta).HasMaxLength(30);
            });

            modelBuilder.Entity<Tccoexptipoenvio>(entity =>
            {
                entity.HasKey(e => e.TipoEnvio);

                entity.ToTable("TCCOEXPTIPOENVIO");

                entity.Property(e => e.TipoEnvio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).HasMaxLength(20);
            });

            modelBuilder.Entity<Tccoexpzonacot>(entity =>
            {
                entity.HasKey(e => e.IdZona);

                entity.ToTable("TCCOEXPZONACOT");

                entity.Property(e => e.Moneda).HasMaxLength(5);

                entity.Property(e => e.Zona).HasMaxLength(30);
            });

            modelBuilder.Entity<Tccofaaddendum>(entity =>
            {
                entity.HasKey(e => new { e.ClaveAddenda, e.TipoAddenda });

                entity.ToTable("TCCOFAADDENDA");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofaaduana>(entity =>
            {
                entity.HasKey(e => e.Aduana);

                entity.ToTable("TCCOFAADUANA");

                entity.Property(e => e.Aduana)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofaalmacendestino>(entity =>
            {
                entity.ToTable("TCCOFAALMACENDESTINO");
            });

            modelBuilder.Entity<Tccofacatformapagosat>(entity =>
            {
                entity.HasKey(e => e.FormaPago);

                entity.ToTable("TCCOFACATFORMAPAGOSAT");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacatpago>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOFACATPAGOS");

                entity.Property(e => e.Clave)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("clave");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacatregfi>(entity =>
            {
                entity.HasKey(e => e.TipoReg);

                entity.ToTable("TCCOFACATREGFIS");

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacatrelacion>(entity =>
            {
                entity.HasKey(e => e.Relacion);

                entity.ToTable("TCCOFACATRELACION");

                entity.Property(e => e.Relacion)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("relacion");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacattfactor>(entity =>
            {
                entity.HasKey(e => e.TipoFactor);

                entity.ToTable("TCCOFACATTFACTOR");

                entity.Property(e => e.TipoFactor)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacattimpuesto>(entity =>
            {
                entity.HasKey(e => e.Impuesto);

                entity.ToTable("TCCOFACATTIMPUESTO");

                entity.Property(e => e.Impuesto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacattiposcomp>(entity =>
            {
                entity.HasKey(e => e.TipoComp);

                entity.ToTable("TCCOFACATTIPOSCOMP");

                entity.Property(e => e.TipoComp)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacatusocfdi>(entity =>
            {
                entity.HasKey(e => e.Uso);

                entity.ToTable("TCCOFACATUSOCFDI");

                entity.Property(e => e.Uso)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofacolocapuefac>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.TipoDoc });

                entity.ToTable("TCCOFACOLOCAPUEFAC");

                entity.Property(e => e.TipoDoc)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofadesolicitude>(entity =>
            {
                entity.ToTable("TCCOFADESOLICITUDES");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Nombre ");

                entity.Property(e => e.Proceso)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Valores)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofamotivonc>(entity =>
            {
                entity.HasKey(e => new { e.TipoNota, e.NumeroMotivo, e.NumeroSubMotivo });

                entity.ToTable("TCCOFAMOTIVONC");

                entity.Property(e => e.TipoNota)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombreMotivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSubMotivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapatente>(entity =>
            {
                entity.HasKey(e => e.Patente);

                entity.ToTable("TCCOFAPATENTE");

                entity.Property(e => e.Patente)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FinVigencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InicioVigencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapedciladd>(entity =>
            {
                entity.ToTable("TCCOFAPEDCILADD");

                entity.Property(e => e.Leyenda)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Proceso)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Signo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapedimento>(entity =>
            {
                entity.HasKey(e => new { e.Aduana, e.Patente, e.Ejercicio });

                entity.ToTable("TCCOFAPEDIMENTOS");

                entity.Property(e => e.Aduana)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Patente)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ejercicio)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapreusuario>(entity =>
            {
                entity.ToTable("TCCOFAPREUSUARIO");

                entity.Property(e => e.Preferencia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valores)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapromocione>(entity =>
            {
                entity.HasKey(e => e.NoPromocion);

                entity.ToTable("TCCOFAPROMOCIONES");

                entity.Property(e => e.NoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CantidaPromo).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.DescripcionGral)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.MetodoPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MonedaPromocion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioEditable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioTomar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Promocion)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccofapromomayoreo>(entity =>
            {
                entity.HasKey(e => new { e.PromoMayoreo, e.TipoFactura, e.Codigo, e.Grupo });

                entity.ToTable("TCCOFAPROMOMAYOREO");

                entity.Property(e => e.PromoMayoreo)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Grupo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.Maximo).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TipoDescuento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tccofapromomayoreos)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOFAPROMOMAYOREO_TMCOINPROD01");
            });

            modelBuilder.Entity<Tccofatfacturacion>(entity =>
            {
                entity.HasKey(e => e.ClaveTipoFacturacion);

                entity.ToTable("TCCOFATFACTURACION");

                entity.Property(e => e.ClaveTipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccofatipoAddendum>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoAddenda, e.Descripcion });

                entity.ToTable("TCCOFATipoAddenda");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreTipoAddenda)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogralgeoremove>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOGRALGEOREMOVE");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TipoCampo)
                    .IsRequired()
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<Tccograreasnotif>(entity =>
            {
                entity.HasKey(e => e.IdProcesoArea);

                entity.ToTable("TCCOGRAREASNOTIF");

                entity.Property(e => e.IdProcesoArea).HasColumnName("Id_ProcesoArea");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrcaport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOGRCAPORT");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Etiqueta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Version).HasColumnType("decimal(2, 1)");
            });

            modelBuilder.Entity<Tccogrcat>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Partida, e.Catalogo });

                entity.ToTable("TCCOGRCAT");

                entity.Property(e => e.Catalogo)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.Valor)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrcatsat>(entity =>
            {
                entity.HasKey(e => new { e.IdCataloGo, e.Clave });

                entity.ToTable("TCCOGRCATSAT");

                entity.Property(e => e.IdCataloGo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idCataloGO");

                entity.Property(e => e.Clave)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Remolque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tccogrcodigocliente>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TCCOGRCODIGOCLIENTE");

                entity.Property(e => e.TipoProd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccogrcolonium>(entity =>
            {
                entity.HasKey(e => new { e.CodigoColonia, e.CodigoPostal });

                entity.ToTable("TCCOGRCOLONIA");

                entity.Property(e => e.CodigoColonia).HasMaxLength(5);

                entity.Property(e => e.CodigoPostal).HasMaxLength(5);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<Tccogrcorreonotif>(entity =>
            {
                entity.HasKey(e => e.IdEmail);

                entity.ToTable("TCCOGRCORREONOTIF");

                entity.Property(e => e.IdEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Id_Email");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasComment("Usuario o uso que se le da a ese correo electronico.");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOGRCP");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdEstado).HasColumnName("Id_Estado");

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TipoColonia)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoPaisNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRCP_TCCOGRPAIS");

                entity.HasOne(d => d.IdEstadoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRCP_TCCOGREDO");
            });

            modelBuilder.Entity<Tccogrcp2>(entity =>
            {
                entity.HasKey(e => new { e.CodigoPostal, e.CodigoEstado, e.CodigoMunicipio, e.CodigoLocalidad });

                entity.ToTable("TCCOGRCP2");

                entity.Property(e => e.CodigoPostal).HasMaxLength(5);

                entity.Property(e => e.CodigoEstado).HasMaxLength(5);

                entity.Property(e => e.CodigoMunicipio).HasMaxLength(5);

                entity.Property(e => e.CodigoLocalidad).HasMaxLength(5);

                entity.HasOne(d => d.CodigoEstadoNavigation)
                    .WithMany(p => p.Tccogrcp2s)
                    .HasForeignKey(d => d.CodigoEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRCP2_TCCOGRESTADO");

                entity.HasOne(d => d.Codigo)
                    .WithMany(p => p.Tccogrcp2s)
                    .HasForeignKey(d => new { d.CodigoMunicipio, d.CodigoEstado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRCP2_TCCOGRMUNICIPIO");
            });

            modelBuilder.Entity<Tccogredo>(entity =>
            {
                entity.HasKey(e => e.IdEstado);

                entity.ToTable("TCCOGREDO");

                entity.Property(e => e.IdEstado)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_Estado");

                entity.Property(e => e.Abreviacion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NombreEstado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoPaisNavigation)
                    .WithMany(p => p.Tccogredos)
                    .HasForeignKey(d => d.CodigoPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGREDO_TCCOGRPAIS");
            });

            modelBuilder.Entity<Tccogreqexcluye>(entity =>
            {
                entity.ToTable("TCCOGREQEXCLUYE");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("direccion");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("tipo");
            });

            modelBuilder.Entity<Tccogrestado>(entity =>
            {
                entity.HasKey(e => e.CodigoEstado);

                entity.ToTable("TCCOGRESTADO");

                entity.Property(e => e.CodigoEstado).HasMaxLength(5);

                entity.Property(e => e.CodigoPais)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.CodigoPaisNavigation)
                    .WithMany(p => p.Tccogrestados)
                    .HasForeignKey(d => d.CodigoPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRESTADO_TCCOGRPAIS2");
            });

            modelBuilder.Entity<Tccogrexproceso>(entity =>
            {
                entity.ToTable("TCCOGREXPROCESOS");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Proceso)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrfarancelarium>(entity =>
            {
                entity.HasKey(e => e.FraccionArancelaria);

                entity.ToTable("TCCOGRFARANCELARIA");

                entity.Property(e => e.FraccionArancelaria)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Criterio)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFinVig).HasColumnType("date");

                entity.Property(e => e.FechaInicioVig).HasColumnType("date");

                entity.Property(e => e.ImpuestoExp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImpuestoImp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccogridentificacarga>(entity =>
            {
                entity.HasKey(e => e.Identificador);

                entity.ToTable("TCCOGRIDENTIFICACARGA");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSp)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NombreSP");
            });

            modelBuilder.Entity<Tccogrintercomp>(entity =>
            {
                entity.HasKey(e => e.Rfc);

                entity.ToTable("TCCOGRINTERCOMP");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.RazonSocial)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tccogriva>(entity =>
            {
                entity.HasKey(e => e.IdTipoIva);

                entity.ToTable("TCCOGRIVA");

                entity.Property(e => e.IdTipoIva).ValueGeneratedNever();

                entity.Property(e => e.ClavePoliza)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tasa).HasColumnType("decimal(23, 4)");
            });

            modelBuilder.Entity<Tccogrlocalidad>(entity =>
            {
                entity.HasKey(e => new { e.CodigoLocalidad, e.CodigoEstado });

                entity.ToTable("TCCOGRLOCALIDAD");

                entity.Property(e => e.CodigoLocalidad).HasMaxLength(5);

                entity.Property(e => e.CodigoEstado).HasMaxLength(5);

                entity.Property(e => e.Localidad)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.CodigoEstadoNavigation)
                    .WithMany(p => p.Tccogrlocalidads)
                    .HasForeignKey(d => d.CodigoEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRLOCALIDAD_TCCOGRESTADO");
            });

            modelBuilder.Entity<Tccogrlogin>(entity =>
            {
                entity.HasKey(e => e.Nick);

                entity.ToTable("TCCOGRLOGIN");

                entity.Property(e => e.Nick)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tccogrmisc>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOGRMISC");

                entity.Property(e => e.Clave)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campo2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campo3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campo4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Campo5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrmunicipio>(entity =>
            {
                entity.HasKey(e => new { e.CodigoMunicipio, e.CodigoEstado });

                entity.ToTable("TCCOGRMUNICIPIO");

                entity.Property(e => e.CodigoMunicipio).HasMaxLength(5);

                entity.Property(e => e.CodigoEstado).HasMaxLength(5);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.CodigoEstadoNavigation)
                    .WithMany(p => p.Tccogrmunicipios)
                    .HasForeignKey(d => d.CodigoEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRMUNICIPIO_TCCOGRESTADO");
            });

            modelBuilder.Entity<Tccogroperacion>(entity =>
            {
                entity.HasKey(e => e.IdOperacion);

                entity.ToTable("TCCOGROperacion");

                entity.Property(e => e.IdOperacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombreOperacion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrpai>(entity =>
            {
                entity.HasKey(e => e.CodigoPais)
                    .HasName("PK_TCCOGRPAIS_1");

                entity.ToTable("TCCOGRPAIS");

                entity.HasComment("Catalogo de Paises");

                entity.Property(e => e.CodigoPais)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("Catalogo de Paises");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NombrePais)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrpais2>(entity =>
            {
                entity.HasKey(e => e.CodigoPais3);

                entity.ToTable("TCCOGRPAIS2");

                entity.Property(e => e.CodigoPais3).HasMaxLength(5);

                entity.Property(e => e.Agrupacion).HasMaxLength(50);

                entity.Property(e => e.CodigoPais2)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoCodPostal).HasMaxLength(50);

                entity.Property(e => e.FormatoRit)
                    .HasMaxLength(150)
                    .HasColumnName("FormatoRIT");

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ValidacionRit)
                    .HasMaxLength(50)
                    .HasColumnName("ValidacionRIT");

                entity.HasOne(d => d.CodigoPais2Navigation)
                    .WithMany(p => p.Tccogrpais2s)
                    .HasForeignKey(d => d.CodigoPais2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRPAIS2_TCCOGRPAIS");
            });

            modelBuilder.Entity<Tccogrperfil>(entity =>
            {
                entity.HasKey(e => e.IdPerfil);

                entity.ToTable("TCCOGRPerfil");

                entity.Property(e => e.IdPerfil).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePerfil)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrpermiso>(entity =>
            {
                entity.ToTable("TCCOGRPERMISOS");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCSAP");

                entity.Property(e => e.CodigoAutorizacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdPermiso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idPermiso")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrproccierre>(entity =>
            {
                entity.HasKey(e => e.Proceso);

                entity.ToTable("TCCOGRPROCCIERRE");

                entity.Property(e => e.Proceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Frecuencia)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MensajeError)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrret>(entity =>
            {
                entity.HasKey(e => e.IdRetencion);

                entity.ToTable("TCCOGRRET");

                entity.Property(e => e.IdRetencion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LeyendaRetencion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRetencion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RetencionIva).HasColumnName("RetencionIVA");
            });

            modelBuilder.Entity<Tccogrsuc>(entity =>
            {
                entity.HasKey(e => e.Sucursal);

                entity.ToTable("TCCOGRSUC");

                entity.HasIndex(e => e.Sucursal, "IX_TCCOGRSUC")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Sucursal).ValueGeneratedNever();

                entity.Property(e => e.BajaSucursal)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Calle)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CcSap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSAP");

                entity.Property(e => e.CcSapAcetileno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSapAcetileno");

                entity.Property(e => e.CcSapOxidom)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSapOxidom");

                entity.Property(e => e.Ccagrupacion).HasColumnName("CCAgrupacion");

                entity.Property(e => e.Ccelectrodos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CCElectrodos")
                    .IsFixedLength(true);

                entity.Property(e => e.Ccnodo).HasColumnName("CCNodo");

                entity.Property(e => e.Ccplanta).HasColumnName("CCPlanta");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPostal)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DiaPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Fenuevos)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FEnuevos")
                    .IsFixedLength(true);

                entity.Property(e => e.LocationNomina)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Location_Nomina");

                entity.Property(e => e.MarcaExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Marcacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MatrizMetro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Nacional)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombrePta)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Prochemex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SerieFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SucSap).HasColumnName("SucSAP");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEmpaque)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSucursal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTransmision)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.PaisNavigation)
                    .WithMany(p => p.Tccogrsucs)
                    .HasForeignKey(d => d.Pais)
                    .HasConstraintName("FK_TCCOGRSUC_TCCOGRPAIS");
            });

            modelBuilder.Entity<TccogrsucCodigosdir>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOGRSUC_CODIGOSDIR");

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Localidad)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.HasOne(d => d.EstadoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Estado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRESTADO");

                entity.HasOne(d => d.PaisNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Pais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRPAIS2");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRSUC");

                entity.HasOne(d => d.Co)
                    .WithMany()
                    .HasForeignKey(d => new { d.Colonia, d.CodigoPostal })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRCOLONIA");

                entity.HasOne(d => d.Tccogrlocalidad)
                    .WithMany()
                    .HasForeignKey(d => new { d.Localidad, d.Estado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRLOCALIDAD");

                entity.HasOne(d => d.Tccogrmunicipio)
                    .WithMany()
                    .HasForeignKey(d => new { d.Municipio, d.Estado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRMUNICIPIO");

                entity.HasOne(d => d.Tccogrcp2)
                    .WithMany()
                    .HasForeignKey(d => new { d.CodigoPostal, d.Estado, d.Municipio, d.Localidad })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_CODIGOSDIR_TCCOGRCP2");
            });

            modelBuilder.Entity<Tccogrterminale>(entity =>
            {
                entity.HasKey(e => e.IdTerminal);

                entity.ToTable("TCCOGRTERMINALES");

                entity.Property(e => e.IdTerminal).HasColumnName("idTerminal");

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionBancoTerminal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.ReferenciaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.Tccogrterminales)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_TCCOGRTERMINALES_TCCOCTBANCOS1");
            });

            modelBuilder.Entity<TccogrterminalesRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOGRTERMINALES_RES");

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionBancoTerminal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdTerminal)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idTerminal");

                entity.Property(e => e.ReferenciaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrtmon>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOGRTMON");

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoDeCambio).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrtmov>(entity =>
            {
                entity.HasKey(e => e.TipoMovimiento);

                entity.ToTable("TCCOGRTMOV");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadReferencia)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccogrtraslado>(entity =>
            {
                entity.ToTable("TCCOGRTRASLADO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Desripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAccion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TccogrupoLinea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tccogrupoLinea");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoidcaja>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Caja })
                    .HasName("PK_TCCOIDCAJAS");

                entity.ToTable("TCCOIDCAJA");

                entity.Property(e => e.Corte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUltCorte)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_ult_corte");

                entity.Property(e => e.MontoCorte).HasColumnType("money");

                entity.Property(e => e.NotificacionCorte)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Notificacion_corte");

                entity.Property(e => e.ResponsableCaja)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TiempoDeCorte).HasColumnName("Tiempo_de_corte");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCorte)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_corte");
            });

            modelBuilder.Entity<Tccoidcatpago>(entity =>
            {
                entity.HasKey(e => e.Clave);

                entity.ToTable("TCCOIDCATPAGOS");

                entity.Property(e => e.Clave)
                    .ValueGeneratedNever()
                    .HasColumnName("clave");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoiddettpago>(entity =>
            {
                entity.HasKey(e => new { e.Idmodulo, e.Clave });

                entity.ToTable("TCCOIDDETTPAGOS");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoidinfdiario>(entity =>
            {
                entity.ToTable("TCCOIDINFDIARIO");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Cbsap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CBSap");

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.ClaveMon)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Clave_Mon");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescPartida)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionTm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DescripcionTM");

                entity.Property(e => e.FechaBase)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IndicadorIva)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorIVA")
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenInterna)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SelCuenta)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAccionImporte)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoAsignacion)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCreacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoImporte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.UsarPoliza)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoidpolizasmov>(entity =>
            {
                entity.ToTable("TCCOIDPOLIZASMOV");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Indicador)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PolizaClave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PolizaCuenta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PolizaTipoCliente)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimientoPoliza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TccoidribbonOption>(entity =>
            {
                entity.HasKey(e => e.IdRibbonOption);

                entity.ToTable("TCCOIDRibbonOption");

                entity.Property(e => e.IdRibbonOption).ValueGeneratedNever();

                entity.Property(e => e.NombreRibbonOption)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdRibbonTabNavigation)
                    .WithMany(p => p.TccoidribbonOptions)
                    .HasForeignKey(d => d.IdRibbonTab)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOIDRibbonOption_TCCOIDRibbonTab");
            });

            modelBuilder.Entity<TccoidribbonTab>(entity =>
            {
                entity.HasKey(e => e.IdRibbonTab);

                entity.ToTable("TCCOIDRibbonTab");

                entity.Property(e => e.IdRibbonTab).ValueGeneratedNever();

                entity.Property(e => e.NombreRibbonTab)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoidusuariospermitido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOIDUSUARIOSPERMITIDOS");

                entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinaduana>(entity =>
            {
                entity.HasKey(e => e.IdAduana);

                entity.ToTable("TCCOINADUANAS");

                entity.Property(e => e.IdAduana).HasColumnName("Id_Aduana");

                entity.Property(e => e.Aduana)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinalmemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOINALMEMP");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tccoinalmper>(entity =>
            {
                entity.HasKey(e => e.Almacen);

                entity.ToTable("TCCOINALMPER");

                entity.Property(e => e.Almacen).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinauts03>(entity =>
            {
                entity.HasKey(e => new { e.SucEnvia, e.SucRecibe, e.Activo });

                entity.ToTable("TCCOINAUTS03");
            });

            modelBuilder.Entity<Tccoinccper>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccpermitida, e.TipoProducto })
                    .HasName("PK_TCCOINCCPER_1");

                entity.ToTable("TCCOINCCPER");

                entity.Property(e => e.Ccpermitida).HasColumnName("CCPermitida");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CcpermitidaNavigation)
                    .WithMany(p => p.Tccoinccpers)
                    .HasForeignKey(d => d.Ccpermitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOINCCPER_TCCOGRSUC");

                entity.HasOne(d => d.TipoProductoNavigation)
                    .WithMany(p => p.Tccoinccpers)
                    .HasForeignKey(d => d.TipoProducto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOINCCPER_TCCOINTPROD");
            });

            modelBuilder.Entity<Tccoinccsap>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsap });

                entity.ToTable("TCCOINCCSAP");

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(10)
                    .HasColumnName("CCSAP");

                entity.Property(e => e.Descripcion).HasMaxLength(100);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tccoincodconsigna>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Codigo, e.Proveedor });

                entity.ToTable("TCCOINCODCONSIGNAS");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Centro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NombreProv)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlanEntrega)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoindiasur>(entity =>
            {
                entity.HasKey(e => e.Sucursal)
                    .HasName("PK_TCCOINDIASUR_1");

                entity.ToTable("TCCOINDIASUR");

                entity.Property(e => e.Sucursal).ValueGeneratedNever();

                entity.Property(e => e.DiaPedido)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DiaSurtimiento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoindiasuralter>(entity =>
            {
                entity.ToTable("TCCOINDIASURALTER");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DiaPedidoAlterno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DiaSurtimientoAlterno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoinmotivorechazo>(entity =>
            {
                entity.HasKey(e => e.IdMotRechazo);

                entity.ToTable("TCCOINMOTIVORECHAZO");

                entity.Property(e => e.IdMotRechazo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinmotivosmov>(entity =>
            {
                entity.HasKey(e => new { e.IdMotivo, e.TipoMovimiento });

                entity.ToTable("TCCOINMOTIVOSMOV");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoinmotivossap>(entity =>
            {
                entity.HasKey(e => new { e.Linea, e.TipoMovimiento, e.IdMotivo });

                entity.ToTable("TCCOINMOTIVOSSAP");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IdMotivo).HasColumnName("Id_Motivo");

                entity.Property(e => e.CapturaCc).HasColumnName("CapturaCC");

                entity.Property(e => e.CatValoracion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescMotivo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Desc_Motivo");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCc)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TipoCC");

                entity.Property(e => e.TipoMovCancelacionSap)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoMovCancelacionSAP");

                entity.Property(e => e.TipoMovimientoSap)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoMovimientoSAP");
            });

            modelBuilder.Entity<Tccoinprodclave>(entity =>
            {
                entity.HasKey(e => e.IdClave);

                entity.ToTable("TCCOINPRODCLAVE");

                entity.Property(e => e.IdClave)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Id_Clave")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinproddescuento>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.TipoDescuento });

                entity.ToTable("TCCOINPRODDESCUENTOS");

                entity.Property(e => e.PorcentajeDescuento).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tccoinproddescuentos)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOINPRODDESCUENTOS_TMCOINPROD01");

                entity.HasOne(d => d.TipoDescuentoNavigation)
                    .WithMany(p => p.Tccoinproddescuentos)
                    .HasForeignKey(d => d.TipoDescuento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOINPRODDESCUENTOS_TCCOINTDESCUENTO");
            });

            modelBuilder.Entity<Tccoinprov>(entity =>
            {
                entity.HasKey(e => e.Nproveedor);

                entity.ToTable("TCCOINPROV");

                entity.Property(e => e.Nproveedor)
                    .ValueGeneratedNever()
                    .HasColumnName("NProveedor");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MXN')");

                entity.Property(e => e.MunDel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(105)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinreg4730>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TCCOINREG4730");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinrutasdi>(entity =>
            {
                entity.HasKey(e => new { e.Ruta, e.Sucursal, e.SucursalDes, e.TipoAccion });

                entity.ToTable("TCCOINRUTASDIS");

                entity.Property(e => e.TipoAccion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S')")
                    .IsFixedLength(true);

                entity.Property(e => e.DiaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Distancia).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.NomRuta)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinsubtenv>(entity =>
            {
                entity.HasKey(e => e.IdSubTipo);

                entity.ToTable("TCCOINSUBTENV");

                entity.Property(e => e.IdSubTipo)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_SubTipo");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnvase)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccointdescuento>(entity =>
            {
                entity.HasKey(e => e.IdTipoDescuento);

                entity.ToTable("TCCOINTDESCUENTO");

                entity.Property(e => e.IdTipoDescuento)
                    .ValueGeneratedNever()
                    .HasColumnName("idTipoDescuento");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccointenv>(entity =>
            {
                entity.HasKey(e => e.IdTipoEnvase);

                entity.ToTable("TCCOINTENV");

                entity.HasIndex(e => e.IdTipoEnvase, "IX_TCCOINTENV");

                entity.Property(e => e.IdTipoEnvase).HasColumnName("id_TipoEnvase");

                entity.Property(e => e.ClaseEnvase).HasDefaultValueSql("((1))");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.DepositoCamp).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnvase)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClaseEnvaseNavigation)
                    .WithMany(p => p.InverseClaseEnvaseNavigation)
                    .HasForeignKey(d => d.ClaseEnvase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOINTENV_TCCOINTENV");
            });

            modelBuilder.Entity<Tccointpedido>(entity =>
            {
                entity.HasKey(e => e.IdTipoPedido);

                entity.ToTable("TCCOINTPEDIDO");

                entity.Property(e => e.IdTipoPedido)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_TipoPedido");

                entity.Property(e => e.ClavePedido)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoApartado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccointprod>(entity =>
            {
                entity.HasKey(e => e.IdTipoProd)
                    .HasName("PK_TCCOINTIPOPROD");

                entity.ToTable("TCCOINTPROD");

                entity.HasIndex(e => e.IdTipoProd, "IX_TCCOINTIPOPROD");

                entity.Property(e => e.IdTipoProd).HasColumnName("id_TipoProd");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccoinum>(entity =>
            {
                entity.HasKey(e => e.IdUm);

                entity.ToTable("TCCOINUM");

                entity.HasIndex(e => e.IdUm, "IX_TCCOINUM");

                entity.Property(e => e.IdUm).HasColumnName("id_UM");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UmSat)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UmSatCod)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinun>(entity =>
            {
                entity.HasKey(e => e.Un);

                entity.ToTable("TCCOINUN");

                entity.Property(e => e.Un).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Riesgo1).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Riesgo20).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Riesgo21).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Rombo1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rombo2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rombo21)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinunidaddi>(entity =>
            {
                entity.HasKey(e => e.NoEconomico);

                entity.ToTable("TCCOINUNIDADDIS");

                entity.Property(e => e.NoEconomico)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Alto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ancho).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AsgAmbiental)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AsgCarga)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AsgCivil)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Conftransporte)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("conftransporte");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Largo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modelo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("modelo");

                entity.Property(e => e.Numpermisosct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("numpermisosct");

                entity.Property(e => e.Permsct)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("permsct")
                    .IsFixedLength(true);

                entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoCabina).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoRampa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PolAmbiental)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PolCarga)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PolCivil)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaSeg).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccoinunidaddisRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOINUNIDADDIS_RES");

                entity.Property(e => e.Alto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ancho).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Largo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoCabina).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoRampa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoinunimg>(entity =>
            {
                entity.HasKey(e => e.Riesgo);

                entity.ToTable("TCCOINUNIMG");

                entity.Property(e => e.Riesgo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcconocodinccomg>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TCCONOCODINCCOMG");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcconoeje>(entity =>
            {
                entity.HasKey(e => new { e.NumeroEjecutivo, e.Nomina });

                entity.ToTable("TCCONOEJE");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoEjecutivoNavigation)
                    .WithMany(p => p.Tcconoejes)
                    .HasForeignKey(d => d.TipoEjecutivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCONOEJE_TCCONOTEJE");

                entity.HasOne(d => d.Tcconoemp)
                    .WithMany(p => p.Tcconoejes)
                    .HasForeignKey(d => new { d.Sucursal, d.Nomina })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCONOEJE_TCCONOEMP");
            });

            modelBuilder.Entity<Tcconoemp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Nomina });

                entity.ToTable("TCCONOEMP");

                entity.Property(e => e.Amaterno)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Apaterno)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nick)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Puesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tcconoemps)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCONOEMP_TCCOGRSUC");
            });

            modelBuilder.Entity<Tcconoteje>(entity =>
            {
                entity.HasKey(e => e.TipoEjecutivo);

                entity.ToTable("TCCONOTEJE");

                entity.Property(e => e.TipoEjecutivo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxbintarjetum>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Bin });

                entity.ToTable("TCCOOXBINTARJETA");

                entity.Property(e => e.Bin).HasColumnName("BIN");

                entity.Property(e => e.FechaAudit).HasColumnType("smalldatetime");

                entity.Property(e => e.Institucion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Naturaleza)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Producto)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxclasifica>(entity =>
            {
                entity.HasKey(e => e.Clasificacion);

                entity.ToTable("TCCOOXCLASIFICA");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Pedido)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxcliente>(entity =>
            {
                entity.HasKey(e => e.IdClietesOx);

                entity.ToTable("TCCOOXCLIENTES");

                entity.Property(e => e.IdClietesOx).HasColumnName("Id_ClietesOX");

                entity.Property(e => e.CobConsFamilias).HasMaxLength(50);

                entity.Property(e => e.CobroServUnificado).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaXcliente).HasColumnName("FacturaXCliente");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormaCobro)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoReporte).HasMaxLength(150);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxclinica>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Delegacion, e.Unidad, e.IdClienteOx, e.CteFactura });

                entity.ToTable("TCCOOXCLINICAS");

                entity.Property(e => e.IdClienteOx).HasColumnName("Id_ClienteOx");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Repetido)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("repetido")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdClienteOxNavigation)
                    .WithMany(p => p.Tccooxclinicas)
                    .HasForeignKey(d => d.IdClienteOx)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOOXCLINICAS_TCCOOXCLIENTES");
            });

            modelBuilder.Entity<Tccooxcodigosfactura>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.IdClientesOx, e.CodigoFacturar, e.FamiliaServicio });

                entity.ToTable("TCCOOXCODIGOSFACTURA");

                entity.Property(e => e.IdClientesOx).HasColumnName("Id_ClientesOx");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Tipo).HasMaxLength(2);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxcodigostc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOOXCODIGOSTC");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCodigo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccooxconfturnosrutum>(entity =>
            {
                entity.HasKey(e => e.Turno);

                entity.ToTable("TCCOOXCONFTURNOSRUTA");

                entity.Property(e => e.Turno)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraFinal)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.HoraInicial)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxdestinatario>(entity =>
            {
                entity.HasKey(e => e.DestinatarioId);

                entity.ToTable("TCCOOXDESTINATARIO");

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.NivelConsumo)
                    .WithMany(p => p.Tccooxdestinatarios)
                    .HasForeignKey(d => d.NivelConsumoId)
                    .HasConstraintName("FK_TCCOOXDESTINATARIO_TCCOOXNOTIFNIVCONSUMO");

                entity.HasOne(d => d.Notificacion)
                    .WithMany(p => p.Tccooxdestinatarios)
                    .HasForeignKey(d => d.NotificacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOOXDESTINATARIO_TCCOOXNOTIFICACION");

                entity.HasOne(d => d.TipoCorreo)
                    .WithMany(p => p.Tccooxdestinatarios)
                    .HasForeignKey(d => d.TipoCorreoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOOXDESTINATARIO_TCCOOXTIPOCORREO");
            });

            modelBuilder.Entity<Tccooxfamilium>(entity =>
            {
                entity.HasKey(e => e.Familia);

                entity.ToTable("TCCOOXFAMILIA");

                entity.Property(e => e.Familia).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).HasMaxLength(100);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxfamservicio>(entity =>
            {
                entity.HasKey(e => e.IdFamiliaServicio);

                entity.ToTable("TCCOOXFAMSERVICIO");

                entity.Property(e => e.IdFamiliaServicio).HasColumnName("Id_FamiliaServicio");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tccooxlogcorepartner>(entity =>
            {
                entity.HasKey(e => e.IdLog)
                    .HasName("PK__TCCOOXLO__0C54DBC6A0A68673");

                entity.ToTable("TCCOOXLOGCOREPARTNERS");

                entity.Property(e => e.Accion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxlstreporte>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOOXLSTREPORTES");

                entity.Property(e => e.FechaAudit).HasMaxLength(255);

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Procedured).HasMaxLength(255);

                entity.Property(e => e.Rdcl).HasColumnName("RDCL");

                entity.Property(e => e.Reporte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReporteId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ReporteID");

                entity.Property(e => e.Spparams).HasColumnName("SPParams");

                entity.Property(e => e.SucursalId).HasColumnName("SucursalID");

                entity.Property(e => e.TituloReporte).HasMaxLength(255);

                entity.Property(e => e.Usuario).HasMaxLength(255);
            });

            modelBuilder.Entity<Tccooxmantoimss>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Delegacion, e.Unidad });

                entity.ToTable("TCCOOXMANTOIMSS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxmotcancela>(entity =>
            {
                entity.HasKey(e => e.MotivoId);

                entity.ToTable("TCCOOXMOTCANCELA");

                entity.Property(e => e.MotivoId).HasColumnName("MotivoID");

                entity.Property(e => e.DescCorta).HasMaxLength(20);

                entity.Property(e => e.Descripcion).HasMaxLength(100);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Pantalla).HasMaxLength(100);
            });

            modelBuilder.Entity<Tccooxnotificacion>(entity =>
            {
                entity.HasKey(e => e.NotificacionId);

                entity.ToTable("TCCOOXNOTIFICACION");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cuerpo)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxnotifnivconsumo>(entity =>
            {
                entity.HasKey(e => e.NivelConsumoId);

                entity.ToTable("TCCOOXNOTIFNIVCONSUMO");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeConsumo).HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.Notificacion)
                    .WithMany(p => p.Tccooxnotifnivconsumos)
                    .HasForeignKey(d => d.NotificacionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOOXNOTIFNIVCONSUMO_TCCOOXNOTIFICACION");
            });

            modelBuilder.Entity<Tccooxorigenfactura>(entity =>
            {
                entity.HasKey(e => e.TipoOriFacId)
                    .HasName("PK_TCCOOXORIGENFACTURA_TipoOriFacID");

                entity.ToTable("TCCOOXORIGENFACTURA");

                entity.Property(e => e.TipoOriFacId).HasColumnName("TipoOriFacID");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRegistro)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Tccooxplazorevision>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TCCOOXPLAZOREVISION");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.NumDias).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tccooxrefcallcenter>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_tccooxrefcallcenter");

                entity.ToTable("TCCOOXREFCALLCENTER");

                entity.Property(e => e.CondPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tccooxrepvisimp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCOOXREPVISIMP");

                entity.Property(e => e.FechaImpresion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Tccooxrepvisimp2>(entity =>
            {
                entity.ToTable("TCCOOXREPVISIMP2");

                entity.Property(e => e.FechaImpresion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SucursalImprimio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxresidentifica>(entity =>
            {
                entity.HasKey(e => e.IdIdentifica)
                    .HasName("PK__TCCOOXRE__4CBF04D3E02E6EDD");

                entity.ToTable("TCCOOXRESIDENTIFICA");

                entity.Property(e => e.Accion).IsUnicode(false);

                entity.Property(e => e.DescripcionRes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActualizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxtipocorreo>(entity =>
            {
                entity.HasKey(e => e.TipoCorreoId);

                entity.ToTable("TCCOOXTIPOCORREO");

                entity.Property(e => e.TipoCorreo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccooxtipoequipo>(entity =>
            {
                entity.HasKey(e => e.TipoEquipoId);

                entity.ToTable("TCCOOXTIPOEQUIPO");

                entity.Property(e => e.TipoEquipoId).HasColumnName("TipoEquipoID");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEquipoDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<Tccooxtiposlistado>(entity =>
            {
                entity.HasKey(e => e.TipoListado);

                entity.ToTable("TCCOOXTIPOSLISTADO");

                entity.Property(e => e.TipoListado).HasMaxLength(3);

                entity.Property(e => e.DescLarga)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Tccooxtiposorigen>(entity =>
            {
                entity.HasKey(e => e.IdTipo)
                    .HasName("PK__TCCOOXTI__9E3A29A5AC994507");

                entity.ToTable("TCCOOXTIPOSORIGEN");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tccooxttr>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.NoNomina });

                entity.ToTable("TCCOOXTTRS");
            });

            modelBuilder.Entity<Tccortcodigosbar>(entity =>
            {
                entity.HasKey(e => e.Valor);

                entity.ToTable("TCCORTCODIGOSBAR");

                entity.Property(e => e.Valor).ValueGeneratedNever();

                entity.Property(e => e.CodBar)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccortgrupoalmrutum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCCORTGRUPOALMRUTA");

                entity.Property(e => e.Dbnombre)
                    .HasMaxLength(50)
                    .HasColumnName("DBnombre");

                entity.Property(e => e.SchemaDb)
                    .HasMaxLength(50)
                    .HasColumnName("SchemaDB");
            });

            modelBuilder.Entity<Tccotermventaexp>(entity =>
            {
                entity.HasKey(e => e.IdTerminoV);

                entity.ToTable("TCCOTERMVENTAEXP");

                entity.Property(e => e.TerminoVenta).HasMaxLength(30);
            });

            modelBuilder.Entity<Tccotipodocumento>(entity =>
            {
                entity.HasKey(e => e.Tipo);

                entity.ToTable("TCCOTIPODOCUMENTOS");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoxfpago>(entity =>
            {
                entity.HasKey(e => e.IdFormaPagoOx);

                entity.ToTable("TCCOXFPAGO");

                entity.Property(e => e.IdFormaPagoOx)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_FormaPagoOx");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tccoxtserv>(entity =>
            {
                entity.HasKey(e => e.IdTipoServicio);

                entity.ToTable("TCCOXTSERV");

                entity.Property(e => e.IdTipoServicio)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_TipoServicio");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcgrlinea>(entity =>
            {
                entity.HasKey(e => e.Linea);

                entity.ToTable("TCGRLINEAS");

                entity.HasIndex(e => e.Linea, "IX_TCGRLINEAS");

                entity.Property(e => e.Linea).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoLinea)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tcidgrupo>(entity =>
            {
                entity.HasKey(e => e.IdGrupo);

                entity.ToTable("TCIDGrupo");

                entity.Property(e => e.NombreGrupo)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcidusuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.ToTable("TCIDUsuario");

                entity.Property(e => e.IdUsuario).ValueGeneratedNever();

                entity.Property(e => e.NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(180)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcwictefil01>(entity =>
            {
                entity.HasKey(e => e.Grupo);

                entity.ToTable("TCWICTEFIL01");

                entity.Property(e => e.Grupo).ValueGeneratedNever();

                entity.Property(e => e.Division)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormatoCartera)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoSec).HasColumnName("FormatoSEC");

                entity.Property(e => e.GestionPorResp)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGpo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdadtransescala>(entity =>
            {
                entity.HasKey(e => new { e.IdTransEscala, e.IdDetTransEscala });

                entity.ToTable("TDADTRANSESCALAS");

                entity.Property(e => e.IdTransEscala).HasColumnName("idTransEscala");

                entity.Property(e => e.IdDetTransEscala).HasColumnName("idDetTransEscala");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Precio).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.TopeEscala).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Total).HasColumnType("decimal(13, 3)");
            });

            modelBuilder.Entity<Tdcegspa>(entity =>
            {
                entity.HasKey(e => e.DetPacienteId);

                entity.ToTable("TDCEGSPAS");

                entity.Property(e => e.DetPacienteId)
                    .ValueGeneratedNever()
                    .HasColumnName("DetPacienteID");

                entity.Property(e => e.Calle).HasMaxLength(150);

                entity.Property(e => e.Calle1).HasMaxLength(150);

                entity.Property(e => e.Calle2).HasMaxLength(150);

                entity.Property(e => e.Ciudad).HasMaxLength(150);

                entity.Property(e => e.Colonia).HasMaxLength(150);

                entity.Property(e => e.Cpid)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CPID")
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .HasColumnName("EMail");

                entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");

                entity.Property(e => e.Estado).HasMaxLength(150);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat).HasMaxLength(20);

                entity.Property(e => e.GeoLon).HasMaxLength(20);

                entity.Property(e => e.HospitalId).HasColumnName("HospitalID");

                entity.Property(e => e.Municipio).HasMaxLength(150);

                entity.Property(e => e.NoExt).HasMaxLength(50);

                entity.Property(e => e.NoInt).HasMaxLength(50);

                entity.Property(e => e.PacienteId).HasColumnName("PacienteID");

                entity.Property(e => e.SucursalId).HasColumnName("SucursalID");

                entity.Property(e => e.Telefono1).HasMaxLength(20);

                entity.Property(e => e.Telefono2).HasMaxLength(20);

                entity.Property(e => e.TipoInsumoId).HasColumnName("TipoInsumoID");

                entity.Property(e => e.UsuarioAudit)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tdcegssol>(entity =>
            {
                entity.HasKey(e => e.DetalleId);

                entity.ToTable("TDCEGSSOL");

                entity.Property(e => e.DetalleId).HasColumnName("DetalleID");

                entity.Property(e => e.EventoId).HasColumnName("EventoID");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSol).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasMaxLength(500);

                entity.Property(e => e.PacienteId).HasColumnName("PacienteID");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tdcocacomppago>(entity =>
            {
                entity.HasKey(e => new { e.Uuid, e.Serie, e.Folio, e.TraTasa });

                entity.ToTable("TDCOCACOMPPAGOS");

                entity.HasIndex(e => new { e.Serie, e.Folio }, "SerieFolio");

                entity.HasIndex(e => new { e.SerieDocto, e.FolioDocto }, "SerieFolioCom");

                entity.HasIndex(e => e.Uuid, "UUIDIndex");

                entity.HasIndex(e => e.Folio, "missing_index_1632_1631_TDCOCACOMPPAGOS");

                entity.Property(e => e.Uuid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("UUID");

                entity.Property(e => e.Serie)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("serie");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.TraTasa)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("traTasa");

                entity.Property(e => e.ImpPagado).HasColumnType("money");

                entity.Property(e => e.ImpSaldoAnt).HasColumnType("money");

                entity.Property(e => e.ImpSaldoSoluto).HasColumnType("money");

                entity.Property(e => e.MetodoPagoDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoDR");

                entity.Property(e => e.MonedaDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MonedaDR");

                entity.Property(e => e.RetBase)
                    .HasColumnType("money")
                    .HasColumnName("retBase");

                entity.Property(e => e.RetImporte)
                    .HasColumnType("money")
                    .HasColumnName("retImporte");

                entity.Property(e => e.RetImpuesto)
                    .HasColumnType("money")
                    .HasColumnName("retImpuesto");

                entity.Property(e => e.RetImpuestoV4)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("retImpuestoV4");

                entity.Property(e => e.RetTasa)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("retTasa");

                entity.Property(e => e.RetTipoFactor).HasColumnName("retTipoFactor");

                entity.Property(e => e.RetTipoFactorV4)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("retTipoFactorV4");

                entity.Property(e => e.SerieDocto)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambioDr)
                    .HasColumnType("money")
                    .HasColumnName("TipoCambioDR");

                entity.Property(e => e.TraBase)
                    .HasColumnType("money")
                    .HasColumnName("traBase");

                entity.Property(e => e.TraImporte)
                    .HasColumnType("money")
                    .HasColumnName("traImporte");

                entity.Property(e => e.TraImpuesto)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("traImpuesto");

                entity.Property(e => e.TraTipoFactor).HasColumnName("traTipoFactor");

                entity.Property(e => e.TraTipoFactorV4)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("traTipoFactorV4");

                entity.HasOne(d => d.Tmcocacomppago)
                    .WithMany(p => p.Tdcocacomppagos)
                    .HasForeignKey(d => new { d.Serie, d.Folio })
                    .HasConstraintName("FK_TDCOCACOMPPAGOS_TMCOCACOMPPAGOS");
            });

            modelBuilder.Entity<Tdcocagastosdium>(entity =>
            {
                entity.HasKey(e => e.IdDetalle);

                entity.ToTable("TDCOCAGASTOSDIA");

                entity.Property(e => e.IdDetalle).HasColumnName("Id_Detalle");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdActivo).HasColumnName("Id_Activo");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Km).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Retencion1).HasColumnType("money");

                entity.Property(e => e.Retencion2).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcocapromotora>(entity =>
            {
                entity.HasKey(e => new { e.NumPromotora, e.NumZona });

                entity.ToTable("TDCOCAPROMOTORAS");

                entity.Property(e => e.NumZona).ValueGeneratedOnAdd();

                entity.HasOne(d => d.NumPromotoraNavigation)
                    .WithMany(p => p.Tdcocapromotoras)
                    .HasForeignKey(d => d.NumPromotora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOCAPROMOTORAS_TMCOCAPROMOTORAS");
            });

            modelBuilder.Entity<Tdcocomisionesmerc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOCOMISIONESMERC");

                entity.Property(e => e.Abonos).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.Cancelada)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cargos).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.FechaVta).HasColumnType("datetime");

                entity.Property(e => e.ImpContado).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.ImporteFac).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ImporteParaPago).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEje)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NotasCredCarg).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.PagoCalculado).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.PorcAplic).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.SaldoCartera).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.TipoFac)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VentaMes).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.VtaMercancia).HasColumnType("numeric(10, 2)");
            });

            modelBuilder.Entity<Tdcoctclubsoldador>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TDCOCTCLUBSOLDADOR");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.NotarjetaClub)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.Tdcoctclubsoldador)
                    .HasForeignKey<Tdcoctclubsoldador>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOCTCLUBSOLDADOR_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tdcoctconvig>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Contrato });

                entity.ToTable("TDCOCTCONVIG");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tdcoctentrega>(entity =>
            {
                entity.HasKey(e => e.IdDireccion)
                    .HasName("PK_TDCOCTENTREGA_1");

                entity.ToTable("TDCOCTENTREGA");

                entity.HasIndex(e => new { e.Cliente, e.Sucursal }, "IndicePK_TDCOCTENTREGA");

                entity.Property(e => e.IdDireccion).HasColumnName("idDireccion");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CodPos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia).HasColumnType("text");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tdcoctentregas)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOCTENTREGA_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tdcoctgralcbe>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.Cliente });

                entity.ToTable("TDCOCTGRALCBE");

                entity.Property(e => e.DiaCobro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DiaRevision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EmailEnvio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaCobro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdcoctobservacione>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Sucursal, e.Cliente });

                entity.ToTable("TDCOCTOBSERVACIONES");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.DocumentoPresenta)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tdcoctobservaciones)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOCTOBSERVACIONES_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tdcoecpedido>(entity =>
            {
                entity.HasKey(e => new { e.Pedido, e.Cliente, e.Sucursal, e.Codigo });

                entity.ToTable("TDCOECPEDIDOS");

                entity.Property(e => e.CantNc).HasColumnName("CantNC");

                entity.Property(e => e.FactorIva)
                    .HasColumnType("money")
                    .HasColumnName("FactorIVA");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasColumnName("ImporteIVA");

                entity.Property(e => e.PrecioUnit).HasColumnType("money");

                entity.Property(e => e.TipoProd).HasMaxLength(50);
            });

            modelBuilder.Entity<Tdcoenconteofi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOENCONTEOFIS");

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoencontrato>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TDCOENCONTRATOS");

                entity.Property(e => e.DireccionFiscal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Folios)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Giro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionCte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plazo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PtoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PtoInfra)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespInfra)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoSociedad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoencontratourb>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo });

                entity.ToTable("TDCOENCONTRATOURB");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoendemora>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Gas, e.FechaCobro });

                entity.ToTable("TDCOENDEMORA");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaCobro)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CantidadAcobrar)
                    .HasColumnType("money")
                    .HasColumnName("CantidadACobrar");

                entity.Property(e => e.DiasAcobrar).HasColumnName("DiasACobrar");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.MotivoMovimiento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCobro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoenv01)
                    .WithMany(p => p.Tdcoendemoras)
                    .HasForeignKey(d => new { d.Sucursal, d.Ccsucursal, d.Cliente, d.Gas })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENDEMORA_TMCOENV01");
            });

            modelBuilder.Entity<Tdcoendotideal>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Codigo });

                entity.ToTable("TDCOENDOTIDEAL");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTransmite).HasColumnType("datetime");

                entity.Property(e => e.Pedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcoendotideals)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENDOTIDEAL_TMCOINPROD01");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tdcoendotideals)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENDOTIDEAL_TCCOGRSUC");
            });

            modelBuilder.Entity<Tdcoenimprecibo>(entity =>
            {
                entity.HasKey(e => new { e.Recibo, e.Sucursal, e.Ccsucursal, e.Cliente, e.Movimiento, e.Codigo, e.FechaAudit })
                    .HasName("PK_TDCOENIMPRECIBOS_1");

                entity.ToTable("TDCOENIMPRECIBOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Movimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Cancelado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionCodigo)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionCte)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEntrega)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaEncargado)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaFacturista)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaGerente)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesGral)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoEnvase)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoeninventario>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo, e.Fecha });

                entity.ToTable("TDCOENINVENTARIO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Amtto).HasColumnName("AMtto");

                entity.Property(e => e.Aotros).HasColumnName("AOtros");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Asucursales).HasColumnName("ASucursales");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fintocables).HasColumnName("FIntocables");

                entity.Property(e => e.Fllenos).HasColumnName("FLlenos");

                entity.Property(e => e.Fruta).HasColumnName("FRuta");

                entity.Property(e => e.Fvacios).HasColumnName("FVacios");

                entity.Property(e => e.SdotacionTot).HasColumnName("SDotacionTot");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.Spatios).HasColumnName("SPatios");

                entity.HasOne(d => d.Tmcoenv01)
                    .WithMany(p => p.Tdcoeninventarios)
                    .HasForeignKey(d => new { d.Sucursal, d.Ccsucursal, d.Cliente, d.Codigo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENINVENTARIO_TMCOENV01");
            });

            modelBuilder.Entity<Tdcoenpagare>(entity =>
            {
                entity.HasKey(e => e.NoPagare);

                entity.ToTable("TDCOENPAGARE");

                entity.Property(e => e.NoPagare)
                    .ValueGeneratedNever()
                    .HasColumnName("No_Pagare");

                entity.Property(e => e.Aval)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Domicilio).IsUnicode(false);

                entity.Property(e => e.DomicilioA).IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoenremisionesnodo>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Remision, e.FechaRemision })
                    .HasName("PK_TDCOENREMISIONESNODO_1");

                entity.ToTable("TDCOENREMISIONESNODO");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaNodoDestino).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tdcoenvcampautcred>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tdcoenvcampautcred");
            });

            modelBuilder.Entity<Tdcoenvisitadorcam>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_TDCOENVISITADORCAM_1");

                entity.ToTable("TDCOENVISITADORCAM");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.Tdcoenvisitadorcam)
                    .HasForeignKey<Tdcoenvisitadorcam>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENVISITADORCAM_TMCOCTGRAL");
            });

            modelBuilder.Entity<TdcoenvisitadorcamRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOENVISITADORCAM_RES");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoenvmov>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo, e.Recibo, e.Fecha, e.TipoMovimiento })
                    .HasName("PK_TDCOENVMOV_1");

                entity.ToTable("TDCOENVMOV");

                entity.HasIndex(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo, e.Recibo, e.Contrato, e.Provisional, e.Importe, e.Usuario }, "IX_MOVENV");

                entity.HasIndex(e => new { e.Ccsucursal, e.TipoMovimiento }, "missing_index_1022_1021_TDCOENVMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.FacturaVta, e.MovCorp, e.Cliente, e.Fecha, e.Contrato }, "missing_index_1085_1084_TDCOENVMOV");

                entity.HasIndex(e => new { e.Ccsucursal, e.TipoPago, e.TipoMovimiento }, "missing_index_1469_1468_TDCOENVMOV");

                entity.HasIndex(e => e.Cliente, "missing_index_2875_2874_TDCOENVMOV");

                entity.HasIndex(e => new { e.Ccsucursal, e.FacturaVta, e.Fecha, e.Contrato, e.MovCorp }, "missing_index_687_686_TDCOENVMOV");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FacturaVta).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRecolecta).HasColumnType("datetime");

                entity.Property(e => e.Importe)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtaOrigen).HasDefaultValueSql("((0))");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransferPago).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => d.Banco)
                    .HasConstraintName("FK_TDCOENVMOV_TCCOCTBANCOS");

                entity.HasOne(d => d.TipoGarantiaNavigation)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => d.TipoGarantia)
                    .HasConstraintName("FK_TDCOENVMOV_TCCOENTGARANTIA");

                entity.HasOne(d => d.TipoMovimientoNavigation)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => d.TipoMovimiento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENVMOV_TCCOGRTMOV");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENVMOV_TMCOCTGRAL");

                entity.HasOne(d => d.Tdcogrproch)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => new { d.NumCheque, d.TipoMovimiento, d.Recibo })
                    .HasConstraintName("FK_TDCOENVMOV_TDCOGRPROCH");

                entity.HasOne(d => d.Tmcoenv01)
                    .WithMany(p => p.Tdcoenvmovs)
                    .HasForeignKey(d => new { d.Sucursal, d.Ccsucursal, d.Cliente, d.Codigo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOENVMOV_TMCOENV01");
            });

            modelBuilder.Entity<TdcoenvmovRespaldoDep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOENVMOV_RespaldoDep");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRecolecta).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoenvmovmtro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOENVMOVMTRO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRecolecta).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoenvprov>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Recibo, e.Codigo, e.FechaMov });

                entity.ToTable("TDCOENVPROV");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaOrgVig).HasColumnType("datetime");

                entity.Property(e => e.FechaVigencia).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoexppedido>(entity =>
            {
                entity.HasKey(e => new { e.Folio, e.Pedido });

                entity.ToTable("TDCOEXPPEDIDOS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.FolioNavigation)
                    .WithMany(p => p.Tdcoexppedidos)
                    .HasForeignKey(d => d.Folio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOEXPPEDIDOS_TMCOEXPPEDIDOS");
            });

            modelBuilder.Entity<Tdcoexpprof>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Folio, e.Cliente, e.Codigo });

                entity.ToTable("TDCOEXPPROF");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CantidadTigie)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("CantidadTIGIE");

                entity.Property(e => e.Cilindros).HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion).HasMaxLength(2500);

                entity.Property(e => e.Descuento).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Envio).HasMaxLength(12);

                entity.Property(e => e.Facturado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Farancelaria)
                    .HasMaxLength(18)
                    .HasColumnName("FArancelaria");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrecioCompra)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrecioTigie)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PrecioTIGIE");

                entity.Property(e => e.PrecioVenta)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .HasColumnName("UM");

                entity.Property(e => e.Umtigie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UMTIGIE");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Tmcoexpprof)
                    .WithMany(p => p.Tdcoexpprofs)
                    .HasForeignKey(d => new { d.Sucursal, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOEXPPROF_TDCOEXPPROF");
            });

            modelBuilder.Entity<Tdcoexpprofseries>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Folio, e.Cliente, e.Codigo, e.NoSerie });

                entity.ToTable("TDCOEXPPROFSERIES");

                entity.Property(e => e.NoSerie).HasMaxLength(50);

                entity.Property(e => e.Marca).HasMaxLength(50);

                entity.Property(e => e.Modelo).HasMaxLength(50);

                entity.Property(e => e.SubModelo).HasMaxLength(50);

                entity.HasOne(d => d.Tdcoexpprof)
                    .WithMany(p => p.Tdcoexpprofseries)
                    .HasForeignKey(d => new { d.Sucursal, d.Folio, d.Cliente, d.Codigo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOEXPPROFSERIES_TDCOEXPPROF");
            });

            modelBuilder.Entity<Tdcofacatalogosaddendum>(entity =>
            {
                entity.HasKey(e => new { e.IdMenu, e.IdCampos })
                    .HasName("PK_TDCOFACATALOGOSADDENDA_1");

                entity.ToTable("TDCOFACATALOGOSADDENDA");

                entity.Property(e => e.IdMenu).HasColumnName("idMenu");

                entity.Property(e => e.IdCampos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idCampos");

                entity.Property(e => e.NombreEtiqueta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMenuNavigation)
                    .WithMany(p => p.Tdcofacatalogosaddenda)
                    .HasForeignKey(d => d.IdMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFACATALOGOSADDENDA_TMCOFAMENUCATALOGOADDENDA");
            });

            modelBuilder.Entity<Tdcofacodigoadicional>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOFACODIGOADICIONAL");
            });

            modelBuilder.Entity<Tdcofacodigoadicionalexcep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOFACODIGOADICIONALEXCEP");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcofaconsumo>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo, e.Anio, e.Mes })
                    .HasName("PK_TDCOFACONSUMOS_1");

                entity.ToTable("TDCOFACONSUMOS");

                entity.HasIndex(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo, e.Anio, e.Mes }, "Consulta")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Cliente, e.Codigo, e.Anio, e.Mes, e.Cargas, e.Unidades, e.ValoresMxp }, "Index")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Unidades).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresDll).HasColumnType("money");

                entity.Property(e => e.ValoresMxp).HasColumnType("money");

                entity.HasOne(d => d.Tmcofaconsumo)
                    .WithMany(p => p.Tdcofaconsumos)
                    .HasForeignKey(d => new { d.Sucursal, d.Ccsucursal, d.Cliente, d.Codigo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFACONSUMOS_TMCOFACONSUMOS");
            });

            modelBuilder.Entity<TdcofaconsumosResp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOFACONSUMOS_RESP");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Unidades).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresDll).HasColumnType("money");

                entity.Property(e => e.ValoresMxp).HasColumnType("money");
            });

            modelBuilder.Entity<Tdcofadetalle>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo });

                entity.ToTable("TDCOFADETALLE");

                entity.HasIndex(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Codigo }, "IX_RUTEO_DETALLEFAC")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TipoDocumento, e.Folio }, "_dta_index_TDCOFADETALLE_11_1358627883__K2_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Folio, e.TipoDocumento, e.Codigo, e.Sucursal, e.Cliente, e.Partida }, "_dta_index_TDCOFADETALLE_11_1358627883__K3_K2_K6_K1_K4_K5_13_17")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Folio, e.Codigo, e.TipoDocumento }, "_dta_index_TDCOFADETALLE_11_1358627883__K3_K6_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PorcentajeIva, "missing_index_1042_1041_TDCOFADETALLE");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.HasOne(d => d.Tmcofamtro)
                    .WithMany(p => p.Tdcofadetalles)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFADETALLE_TMCOFAMTRO");
            });

            modelBuilder.Entity<Tdcofadetalleimpuesto>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.TipoMovimiento, e.Folio, e.Cliente, e.Tasa });

                entity.ToTable("TDCOFADETALLEIMPUESTOS");

                entity.HasIndex(e => new { e.Sucursal, e.Folio, e.Cliente }, "missing_index_1590_1589_TDCOFADETALLEIMPUESTOS");

                entity.HasIndex(e => e.Ccsucursal, "missing_index_2207_2206_TDCOFADETALLEIMPUESTOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tasa).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.IvaRet).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.SubtotalRetenciones).HasColumnType("money");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TipoImpuesto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdcofadetallepedido>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo })
                    .HasName("PK_TDCOFADETALLEPEDIDO");

                entity.ToTable("TDCOFADETALLEPEDIDOS");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BackOrder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadOrigen).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FolioOrigen)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.HasOne(d => d.Tmcofamtropedido)
                    .WithMany(p => p.Tdcofadetallepedidos)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFADETALLEPEDIDO_TMCOFAMTROPEDIDO");
            });

            modelBuilder.Entity<TdcofadetallepedidosPv>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo })
                    .HasName("PK_TDCOFADETALLEPEDIDO_PV");

                entity.ToTable("TDCOFADETALLEPEDIDOS_PV");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BackOrder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TdcofadetallepedidosTe>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo })
                    .HasName("PK_TDCOFADETALLEPEDIDO_TE");

                entity.ToTable("TDCOFADETALLEPEDIDOS_TE");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BackOrder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.HasOne(d => d.TmcofamtropedidosTe)
                    .WithMany(p => p.TdcofadetallepedidosTes)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFADETALLEPEDIDO_TE_TMCOFAMTROPEDIDO_TE");
            });

            modelBuilder.Entity<Tdcofadetallepredial>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo });

                entity.ToTable("TDCOFADETALLEPREDIAL");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CtaPredial)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Tmcofamtro)
                    .WithMany(p => p.Tdcofadetallepredials)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFADETALLEPREDIAL_TMCOFAMTRO");

                entity.HasOne(d => d.Tdcofadetalle)
                    .WithOne(p => p.Tdcofadetallepredial)
                    .HasForeignKey<Tdcofadetallepredial>(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente, d.Partida, d.Codigo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFADETALLEPREDIAL_TDCOFADETALLE");
            });

            modelBuilder.Entity<Tdcofadetallesvalore>(entity =>
            {
                entity.HasKey(e => e.IdDetalles);

                entity.ToTable("TDCOFADETALLESVALORES");

                entity.Property(e => e.IdDetalles).HasColumnName("idDetalles");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ClavePrn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ClavePRN");

                entity.Property(e => e.ClavePropiedadAddenda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorPrn)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ValorPRN");

                entity.Property(e => e.ValorReemplazo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcofadoctosrel>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Uuid, e.FolioRel });

                entity.ToTable("TDCOFADOCTOSREL");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(36)
                    .HasColumnName("UUID");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaFerel)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFERel");

                entity.Property(e => e.TipoRelacion)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tdcofaejecodigo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOFAEJECODIGO");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdcofamapeoprn>(entity =>
            {
                entity.HasKey(e => new { e.IdPrnValor, e.ClaveAddenda, e.TipoAddenda, e.IdCampoAddenda });

                entity.ToTable("TDCOFAMAPEOPRN");

                entity.Property(e => e.IdPrnValor).HasColumnName("idPrnValor");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdCampoAddenda).HasColumnName("idCampoAddenda");

                entity.Property(e => e.CampoPrn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CampoPRN");

                entity.HasOne(d => d.Tmcofacamposaddendum)
                    .WithMany(p => p.Tdcofamapeoprns)
                    .HasForeignKey(d => new { d.ClaveAddenda, d.TipoAddenda, d.IdCampoAddenda })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFAMAPEOPRN_TMCOFACAMPOSADDENDA");
            });

            modelBuilder.Entity<Tdcofapagosfactura>(entity =>
            {
                entity.HasKey(e => new { e.Folio, e.Sucursal, e.Cliente, e.TipoDocumento, e.IdPago });

                entity.ToTable("TDCOFAPAGOSFACTURA");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdPago)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idPago");

                entity.Property(e => e.DescripcionDetalleTipoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DetalleTipoPago)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.ListaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Promociones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tdcogrproch)
                    .WithMany(p => p.Tdcofapagosfacturas)
                    .HasForeignKey(d => new { d.NoPago, d.TipoDocumento, d.Folio })
                    .HasConstraintName("FK_TDCOFAPAGOSFACTURA_TDCOGRPROCH");

                entity.HasOne(d => d.Tmcofamtro)
                    .WithMany(p => p.Tdcofapagosfacturas)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFAPAGOSFACTURA_TMCOFAMTRO");
            });

            modelBuilder.Entity<Tdcofapagosfacturapedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOFAPAGOSFACTURAPEDIDOS");

                entity.Property(e => e.DescripcionDetalleTipoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DetalleTipoPago)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdPago)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idPago");

                entity.Property(e => e.ListaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Promociones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoLiquidacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcofamtropedido)
                    .WithMany()
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFAPAGOSFACTURAPEDIDOS_TMCOFAMTROPEDIDOS");
            });

            modelBuilder.Entity<Tdcofapedciladd>(entity =>
            {
                entity.HasKey(e => e.Idsol)
                    .HasName("PK__TDCOFAPE__13C249A68FF5A00D");

                entity.ToTable("TDCOFAPEDCILADD");

                entity.Property(e => e.Elemento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tablavalida).IsUnicode(false);

                entity.Property(e => e.Valores)
                    .HasMaxLength(1500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcofapromacum>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Cliente })
                    .HasName("PK_TDCOFAPROMACUM_Codigo_Cliente");

                entity.ToTable("TDCOFAPROMACUM");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcofapromo>(entity =>
            {
                entity.HasKey(e => new { e.NoPromocion, e.Tipo, e.FormaPromocion, e.Codigo });

                entity.ToTable("TDCOFAPROMO");

                entity.Property(e => e.NoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPromocion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CantidadPermitida).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Leyenda)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Objetivo).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PrecioEspecial).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Tdcofaretencione>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.IdRetencion, e.Codigo });

                entity.ToTable("TDCOFARETENCIONES");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRetencion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("idRetencion");

                entity.Property(e => e.Monto).HasColumnType("money");

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.Tmcofamtro)
                    .WithMany(p => p.Tdcofaretenciones)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFARETENCIONES_TMCOFAMTRO1");
            });

            modelBuilder.Entity<Tdcofavaloresdefaultaddendum>(entity =>
            {
                entity.HasKey(e => new { e.ClaveAddenda, e.TipoAddenda, e.IdCampoAddenda });

                entity.ToTable("TDCOFAVALORESDEFAULTADDENDA");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.IdCampoAddenda).HasColumnName("idCampoAddenda");

                entity.Property(e => e.Valor)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcofavaloresfijosaddendum>(entity =>
            {
                entity.HasKey(e => new { e.IdCampoAddenda, e.TipoAddenda, e.ClaveAddenda, e.Sucursal, e.Cliente });

                entity.ToTable("TDCOFAVALORESFIJOSADDENDA");

                entity.Property(e => e.IdCampoAddenda).HasColumnName("idCampoAddenda");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAsociado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcofacamposaddendum)
                    .WithMany(p => p.Tdcofavaloresfijosaddenda)
                    .HasForeignKey(d => new { d.ClaveAddenda, d.TipoAddenda, d.IdCampoAddenda })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFAVALORESFIJOSADDENDA_TMCOFACAMPOSADDENDA");
            });

            modelBuilder.Entity<Tdcofaventaenvase>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.TipoDocumento, e.Codigo, e.Folio });

                entity.ToTable("TDCOFAVENTAENVASES");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.HasOne(d => d.Tmcofamtro)
                    .WithMany(p => p.Tdcofaventaenvases)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoDocumento, d.Folio, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOFAVENTAENVASES_TMCOFAMTRO");
            });

            modelBuilder.Entity<Tdcogrbusq>(entity =>
            {
                entity.HasKey(e => e.IdRestriccion);

                entity.ToTable("TDCOGRBUSQ");

                entity.Property(e => e.IdRestriccion).ValueGeneratedNever();

                entity.Property(e => e.Campos)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CamposOrden)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcogrcotizacione>(entity =>
            {
                entity.HasKey(e => new { e.NoCotizacion, e.Codigo });

                entity.ToTable("TDCOGRCOTIZACIONES");

                entity.Property(e => e.NoCotizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TotalPartida).HasColumnType("money");

                entity.HasOne(d => d.NoCotizacionNavigation)
                    .WithMany(p => p.Tdcogrcotizaciones)
                    .HasForeignKey(d => d.NoCotizacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOGRCOTIZACIONES_TMCOGRCOTIZACION");
            });

            modelBuilder.Entity<Tdcogrgtosm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOGRGTOSM");

                entity.Property(e => e.CvePago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.ImporteFacturado).HasColumnType("money");

                entity.Property(e => e.MotivoMovimiento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcogrgtosmant>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TDCOGRGTOSMANT");

                entity.Property(e => e.CvePago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.ImporteFacturado).HasColumnType("money");

                entity.Property(e => e.MotivoMovimiento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.Tdcogrgtosmant)
                    .HasForeignKey<Tdcogrgtosmant>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOGRGTOSMANT_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tdcogrleyendacotizacion>(entity =>
            {
                entity.HasKey(e => new { e.NoCotizacion, e.IdLeyenda });

                entity.ToTable("TDCOGRLEYENDACOTIZACION");

                entity.Property(e => e.NoCotizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdLeyenda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("idLeyenda");

                entity.HasOne(d => d.NoCotizacionNavigation)
                    .WithMany(p => p.Tdcogrleyendacotizacions)
                    .HasForeignKey(d => d.NoCotizacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOGRLEYENDACOTIZACION_TMCOGRCOTIZACION");
            });

            modelBuilder.Entity<Tdcogrproch>(entity =>
            {
                entity.HasKey(e => new { e.NumCheque, e.TipoMov, e.FolioMov })
                    .HasName("PK_TDCOGRPROCH_1");

                entity.ToTable("TDCOGRPROCH");

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMov)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CtaCheque)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CveProchemex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.SucBanco)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoidcajausu>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Caja, e.Nick })
                    .HasName("PK_TDCOIDCAJAUSU_1");

                entity.ToTable("TDCOIDCAJAUSU");

                entity.Property(e => e.Nick)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoiddiasrecolec>(entity =>
            {
                entity.HasKey(e => e.Sucursal);

                entity.ToTable("TDCOIDDIASRECOLEC");

                entity.Property(e => e.Sucursal).ValueGeneratedNever();

                entity.Property(e => e.DirEnvase)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EntEvases)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProximaRecoleccion).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tdcoidsuc>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal });

                entity.ToTable("TDCOIDSUC");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.CondicionA01)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionSucursal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificadorPermiso)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MovimientosIngresos)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoincapacidade>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TDCOINCAPACIDADES");
            });

            modelBuilder.Entity<Tdcoincteequipo>(entity =>
            {
                entity.HasKey(e => e.IdClienteEquipo);

                entity.ToTable("TDCOINCTEEQUIPO");

                entity.HasIndex(e => e.NoSerie, "NonCluster-NoSerie")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Cliente, e.Codigo }, "NonClustered-Clientecodigo")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdClienteEquipo).HasColumnName("Id_ClienteEquipo");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaUltMov).HasColumnType("datetime");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoActivoFijo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TdcoincteequipoNoborrar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOINCTEEQUIPO_noborrar");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaUltMov).HasColumnType("datetime");

                entity.Property(e => e.IdClienteEquipo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ClienteEquipo");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoActivoFijo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinembarque>(entity =>
            {
                entity.HasKey(e => new { e.FolioEmbarque, e.Codigo })
                    .HasName("PK_TDCOINEMBARQUE_1");

                entity.ToTable("TDCOINEMBARQUE");

                entity.Property(e => e.Bienestransp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bienestransp");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Descguiaiden)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("descguiaiden");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensiones)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dimensiones");

                entity.Property(e => e.Embalaje)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("embalaje")
                    .IsFixedLength(true);

                entity.Property(e => e.Fraccarancelaria)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("fraccarancelaria");

                entity.Property(e => e.Fraccionarancelaria)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fraccionarancelaria")
                    .IsFixedLength(true);

                entity.Property(e => e.Lotemedicamento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("lotemedicamento");

                entity.Property(e => e.Materialpeligroso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("materialpeligroso")
                    .IsFixedLength(true);

                entity.Property(e => e.Numguiaiden)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numguiaiden");

                entity.Property(e => e.Numpedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numpedimento");

                entity.Property(e => e.PesoBruto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoNeto).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Riesgo1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Riesgo20).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Riesgo21).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Unidadpeso)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("unidadpeso")
                    .IsFixedLength(true);

                entity.Property(e => e.Uuidcomercioext)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("uuidcomercioext");

                entity.Property(e => e.Uuidexterior)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("uuidexterior");

                entity.Property(e => e.Volumen).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Tdcoinembarquelotescantidad>(entity =>
            {
                entity.ToTable("TDCOINEMBARQUELOTESCANTIDAD");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Idlote).HasColumnName("IDLote");
            });

            modelBuilder.Entity<Tdcoinembarqueoperador>(entity =>
            {
                entity.ToTable("TDCOINEMBARQUEOPERADOR");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NumLicencia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<Tdcoinestimado>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TDCOINESTIMADOS");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinfisico>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Marbete })
                    .HasName("PK_TDCOINFISICO_1");

                entity.ToTable("TDCOINFISICO");

                entity.Property(e => e.Diferencia).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaFisica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaTeorica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInventario).HasColumnType("datetime");

                entity.Property(e => e.TipoMov)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinfisicoresp1803>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOINFISICOresp_1803");

                entity.Property(e => e.Diferencia).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaFisica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaTeorica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInventario).HasColumnType("datetime");

                entity.Property(e => e.TipoMov)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoininventariomer>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Codigo, e.Fecha });

                entity.ToTable("TDCOININVENTARIOMER");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Aclaraciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Diferencia).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Fcantidad)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FCantidad");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.Scantidad)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("SCantidad");

                entity.Property(e => e.TipoMer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcoininventariomers)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOININVENTARIOMER_TMCOINPROD01");
            });

            modelBuilder.Entity<Tdcoinmovscod>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMovCod);

                entity.ToTable("TDCOINMOVSCOD");

                entity.HasIndex(e => e.Codigo, "IX_COD");

                entity.HasIndex(e => e.IdConsecutivoMov, "IX_IDMOV");

                entity.HasIndex(e => new { e.IdConsecutivoMov, e.Codigo, e.NumeroPartida }, "IX_NC_ConMov_Cod");

                entity.HasIndex(e => new { e.IdConsecutivoMov, e.Codigo }, "_dta_index_TDCOINMOVSCOD_11_1950629992__K2_K3_7_8_15");

                entity.HasIndex(e => e.Codigo, "missing_index_1037_1036_TDCOINMOVSCOD");

                entity.HasIndex(e => e.IdConsecutivoMov, "missing_index_635_634_TDCOINMOVSCOD");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioLista).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcoinmovscods)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOINMOVSCOD_TMCOINPROD01");

                entity.HasOne(d => d.IdConsecutivoMovNavigation)
                    .WithMany(p => p.Tdcoinmovscods)
                    .HasForeignKey(d => d.IdConsecutivoMov)
                    .HasConstraintName("FK_TDCOINMOVSCOD_THCOINMOVS");
            });

            modelBuilder.Entity<Tdcoinmovscoddup>(entity =>
            {
                entity.HasKey(e => e.IdCodDup);

                entity.ToTable("TDCOINMOVSCODDUP");

                entity.Property(e => e.IdCodDup).HasColumnName("Id_CodDup");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.IdDup).HasColumnName("Id_Dup");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Tdcoinmovscodnogen>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMovCod);

                entity.ToTable("TDCOINMOVSCODNOGEN");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadFacturada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcoinmovscodnogens)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOINMOVSCODNOGEN_TMCOINPROD01");

                entity.HasOne(d => d.IdConsecutivoMovNavigation)
                    .WithMany(p => p.Tdcoinmovscodnogens)
                    .HasForeignKey(d => d.IdConsecutivoMov)
                    .HasConstraintName("FK_TDCOINMOVSCODNOGEN_THCOINMOVSNOGEN");
            });

            modelBuilder.Entity<Tdcoinmovscodseries>(entity =>
            {
                entity.HasKey(e => new { e.IdConsecutivoMov, e.IdConsecutivoMovCod, e.IdConsecutivoMovSerie });

                entity.ToTable("TDCOINMOVSCODSERIES");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.IdConsecutivoMovSerie)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ConsecutivoMovSerie");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdConsecutivoMovNavigation)
                    .WithMany(p => p.Tdcoinmovscodseries)
                    .HasForeignKey(d => d.IdConsecutivoMov)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOINMOVSCODSERIES_THCOINMOVS");

                entity.HasOne(d => d.IdConsecutivoMovCodNavigation)
                    .WithMany(p => p.Tdcoinmovscodseries)
                    .HasForeignKey(d => d.IdConsecutivoMovCod)
                    .HasConstraintName("FK_TDCOINMOVSCODSERIES_TDCOINMOVSCOD");
            });

            modelBuilder.Entity<Tdcoinmovscodserieswm>(entity =>
            {
                entity.HasKey(e => new { e.IdConsecutivoMov, e.IdConsecutivoMovCod, e.IdConsecutivoMovSerie });

                entity.ToTable("TDCOINMOVSCODSERIESWMS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.IdConsecutivoMovSerie)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ConsecutivoMovSerie");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdConsecutivoMovNavigation)
                    .WithMany(p => p.Tdcoinmovscodserieswms)
                    .HasForeignKey(d => d.IdConsecutivoMov)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOINMOVSCODSERIESWMS_THCOINMOVSWMS");

                entity.HasOne(d => d.IdConsecutivoMovCodNavigation)
                    .WithMany(p => p.Tdcoinmovscodserieswms)
                    .HasForeignKey(d => d.IdConsecutivoMovCod)
                    .HasConstraintName("FK_TDCOINMOVSCODSERIESWMS_TDCOINMOVSCODWMS");
            });

            modelBuilder.Entity<Tdcoinmovscodwm>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMovCod);

                entity.ToTable("TDCOINMOVSCODWMS");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.IdConsecutivoMovNavigation)
                    .WithMany(p => p.Tdcoinmovscodwms)
                    .HasForeignKey(d => d.IdConsecutivoMov)
                    .HasConstraintName("FK_TDCOINMOVSCODWMS_THCOINMOVSWMS");
            });

            modelBuilder.Entity<Tdcoinpedmerc>(entity =>
            {
                entity.HasKey(e => new { e.TipoPedido, e.AlmacenCliente, e.Proveedor, e.Pedido, e.Codigo, e.Partida, e.FechaPedido });

                entity.ToTable("TDCOINPEDMERC");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Costo).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinprod02estimado>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TDCOINPROD02ESTIMADOS");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estimados)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("estimados");
            });

            modelBuilder.Entity<Tdcoinprod03>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TDCOINPROD03");

                entity.Property(e => e.Codigo).ValueGeneratedNever();
            });

            modelBuilder.Entity<Tdcoinprodbar>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.CodigoBarAlter });

                entity.ToTable("TDCOINPRODBAR");

                entity.Property(e => e.CodigoBarAlter)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnidadBarras).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcoinprodbars)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOINPRODBAR_TMCOINPROD01");
            });

            modelBuilder.Entity<Tdcoinprovcod>(entity =>
            {
                entity.HasKey(e => new { e.IdInfo, e.Proveedor, e.Codigo, e.Moneda, e.FechaValIni, e.FechaValFin })
                    .HasName("PK_TDCOINPROVCOD_1");

                entity.ToTable("TDCOINPROVCOD");

                entity.Property(e => e.IdInfo).ValueGeneratedOnAdd();

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaValIni).HasColumnType("datetime");

                entity.Property(e => e.FechaValFin).HasColumnType("datetime");

                entity.Property(e => e.CodigoProv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Costo).HasColumnType("money");

                entity.Property(e => e.CostoPesos).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueProv).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUltCompra).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinsolexmerc>(entity =>
            {
                entity.HasKey(e => new { e.TipoPedido, e.FolioPedido, e.Sucursal, e.Codigo, e.Partida });

                entity.ToTable("TDCOINSOLEXMERC");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadSolicitada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcoinsucequipo>(entity =>
            {
                entity.HasKey(e => e.IdSucEquipo);

                entity.ToTable("TDCOINSUCEQUIPO");

                entity.Property(e => e.IdSucEquipo).HasColumnName("Id_SucEquipo");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdcoinsurpedmer>(entity =>
            {
                entity.HasKey(e => e.Consec)
                    .HasName("PK_TDCOINSURPEDMER_1");

                entity.ToTable("TDCOINSURPEDMER");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdPedido).HasColumnName("idPedido");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoinsurpedmer)
                    .WithMany(p => p.Tdcoinsurpedmers)
                    .HasForeignKey(d => new { d.IdPedido, d.Sucursal, d.FolioPedido, d.Codigo, d.Partida })
                    .HasConstraintName("FK_TDCOINSURPEDMER_TMCOINSURPEDMER");
            });

            modelBuilder.Entity<Tdcointransitoseries>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Partida, e.Codigo, e.TipoMovimiento, e.Folio, e.ClienteSuc, e.Pedido, e.FacturaRemision, e.Transmision });

                entity.ToTable("TDCOINTRANSITOSERIES");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoSerie)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcointransitoserieswm>(entity =>
            {
                entity.HasKey(e => new { e.IdConsecutivoMov, e.IdConsecutivoMovCod, e.IdConsecutivoMovSerie });

                entity.ToTable("TDCOINTRANSITOSERIESWMS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.IdConsecutivoMovSerie).HasColumnName("Id_ConsecutivoMovSerie");

                entity.Property(e => e.FacturaRemision)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerie)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transmision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdconocomg>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Gas, e.Nomina });

                entity.ToTable("TDCONOCOMG");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.ComisionInicial)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.ComisionSubsecuente)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresInicial).HasColumnType("money");

                entity.HasOne(d => d.GasNavigation)
                    .WithMany(p => p.Tdconocomgs)
                    .HasForeignKey(d => d.Gas)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCONOCOMG_TMCOINPROD01");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tdconocomgs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCONOCOMG_TMCOCTGRAL1");

                entity.HasOne(d => d.Tcconoemp)
                    .WithMany(p => p.Tdconocomgs)
                    .HasForeignKey(d => new { d.Sucursal, d.Nomina })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCONOCOMG_TCCONOEMP1");
            });

            modelBuilder.Entity<Tdconoconsultacomg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCONOCONSULTACOMG");

                entity.HasIndex(e => new { e.Nomina, e.Cliente, e.Gas, e.SucOrigen, e.TipoPago }, "KEY_TDCONOCONSULTACOMG")
                    .IsUnique();

                entity.Property(e => e.Comision).HasColumnType("money");

                entity.Property(e => e.ComisionInicial).HasColumnType("money");

                entity.Property(e => e.ComisionSubsecuente).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empleado)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaValidacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCliente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreSucursal)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Valores).HasColumnType("money");

                entity.Property(e => e.Valores1).HasColumnType("money");

                entity.Property(e => e.Valores2).HasColumnType("money");

                entity.Property(e => e.Valores3).HasColumnType("money");
            });

            modelBuilder.Entity<Tdconoemp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Nomina });

                entity.ToTable("TDCONOEMP");

                entity.Property(e => e.NoLicencia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdconovalidacomg>(entity =>
            {
                entity.HasKey(e => new { e.TipoPago, e.SucOrigen, e.Nomina, e.Cliente, e.Gas, e.AnioProceso, e.MesProceso })
                    .HasName("PK_THCONOPAGOCOMG");

                entity.ToTable("TDCONOVALIDACOMG");

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Comision).HasColumnType("money");

                entity.Property(e => e.ComisionInicial).HasColumnType("money");

                entity.Property(e => e.ComisionSubsecuente).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empleado)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaValidacion).HasColumnType("datetime");

                entity.Property(e => e.NombreCliente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreSucursal)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valores).HasColumnType("money");

                entity.Property(e => e.Valores1).HasColumnType("money");

                entity.Property(e => e.Valores2).HasColumnType("money");

                entity.Property(e => e.Valores3).HasColumnType("money");
            });

            modelBuilder.Entity<Tdcooxcapreceta>(entity =>
            {
                entity.HasKey(e => e.IdCapRecetas)
                    .HasName("PK_TDCOOXCAPRECETAS_1");

                entity.ToTable("TDCOOXCAPRECETAS");

                entity.Property(e => e.IdCapRecetas).HasColumnName("Id_CapRecetas");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MotivoCancelacion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProcesoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcooxcliente)
                    .WithMany(p => p.Tdcooxcapreceta)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXCAPRECETAS_TMCOOXCLIENTES");
            });

            modelBuilder.Entity<Tdcooxcbtreporte>(entity =>
            {
                entity.HasKey(e => new { e.ReporteId, e.Campo })
                    .HasName("TDCOOXCBTREPORTES_PK");

                entity.ToTable("TDCOOXCBTREPORTES");

                entity.Property(e => e.Campo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Procedured)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxequiposye>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Fecha, e.Ruta, e.Turno, e.Unidad, e.Partida, e.Codigo })
                    .HasName("PK_TDCOOXEQUIPOSYE_1");

                entity.ToTable("TDCOOXEQUIPOSYE");

                entity.HasIndex(e => new { e.Ruta, e.Turno, e.Codigo, e.Operador, e.Fecha }, "missing_index_800_799_TDCOOXEQUIPOSYE");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.SeriesEnt)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SeriesSal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tdcooxequiposyes)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXEQUIPOSYE_TMCOINPROD011");

                entity.HasOne(d => d.Tmcooxequiposye)
                    .WithMany(p => p.Tdcooxequiposyes)
                    .HasForeignKey(d => new { d.Sucursal, d.Fecha, d.Ruta, d.Turno, d.Unidad })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXEQUIPOSYE_TMCOOXEQUIPOSYE1");
            });

            modelBuilder.Entity<TdcooxequiposyeRespaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXEQUIPOSYE_respaldo");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.SeriesEnt)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SeriesSal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxfolreceta>(entity =>
            {
                entity.HasKey(e => e.IdFolioRecetas);

                entity.ToTable("TDCOOXFOLRECETAS");

                entity.Property(e => e.IdFolioRecetas).HasColumnName("Id_FolioRecetas");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdCapRecetas).HasColumnName("Id_CapRecetas");

                entity.Property(e => e.TipoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCapRecetasNavigation)
                    .WithMany(p => p.Tdcooxfolreceta)
                    .HasForeignKey(d => d.IdCapRecetas)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXFOLRECETAS_TDCOOXCAPRECETAS");
            });

            modelBuilder.Entity<Tdcooxformatob>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TDCOOXFORMATOB");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxkit>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.Codigo });

                entity.ToTable("TDCOOXKITS");

                entity.Property(e => e.Cantidad).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Tdcooxlistadoreceta>(entity =>
            {
                entity.HasKey(e => new { e.IdCapRecetas, e.Sucursal, e.Cliente, e.Anio, e.Mes })
                    .HasName("PK__TDCOOXLI__938278962FE2B355");

                entity.ToTable("TDCOOXLISTADORECETAS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Curp)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("CURP");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DpfechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaFin");

                entity.Property(e => e.DpfechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaInicio");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EstatusMov)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FolioReceta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.TipoCaptura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxpagincentivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXPAGINCENTIVOS");

                entity.Property(e => e.FechaRuteo).HasColumnType("date");

                entity.Property(e => e.FechaSalida).HasColumnType("date");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PrioridadServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Turno)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TdcooxpagincentivosAnt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXPAGINCENTIVOS_ANT");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PrioridadServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Turno)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tdcooxreceta>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Anio, e.Mes });

                entity.ToTable("TDCOOXRECETAS");

                entity.HasOne(d => d.Tmcooxcliente)
                    .WithMany(p => p.Tdcooxreceta)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXRECETAS_TMCOOXCLIENTES");
            });

            modelBuilder.Entity<Tdcooxrentascte>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo, e.CodigoEnvases });

                entity.ToTable("TDCOOXRENTASCTE");

                entity.HasIndex(e => new { e.Cliente, e.Codigo }, "missing_index_1725_1724_TDCOOXRENTASCTE");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasMaxLength(1000);

                entity.Property(e => e.Pantalla).HasMaxLength(100);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcooxcliente)
                    .WithMany(p => p.Tdcooxrentasctes)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXRENTASCTE_TMCOOXCLIENTES");
            });

            modelBuilder.Entity<Tdcooxrespuestatc>(entity =>
            {
                entity.HasKey(e => e.MovimientoId)
                    .HasName("PK_TDCOOXRESPUESTATC_1");

                entity.ToTable("TDCOOXRESPUESTATC");

                entity.Property(e => e.MovimientoId).HasColumnName("MovimientoID");

                entity.Property(e => e.ArchivoEntrada).HasMaxLength(50);

                entity.Property(e => e.ArchivoSalida).HasMaxLength(50);

                entity.Property(e => e.CodigoAuto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.IdTransaccion)
                    .HasMaxLength(24)
                    .HasColumnName("idTransaccion");

                entity.Property(e => e.NoAutorizacion).HasMaxLength(10);

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxseguimientoequipo>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Codigo });

                entity.ToTable("TDCOOXSEGUIMIENTOEQUIPO");

                entity.HasComment("Tabla que contiene la relación de equipos vs cliente así como sus fechas de alta y baja ");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });


            modelBuilder.Entity<Tdcooxseguimientoequiporesp>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Codigo });

                entity.ToTable("TDCOOXSEGUIMIENTOEQUIPORESP"); 

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxseriessye>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Fecha, e.Ruta, e.Unidad, e.Turno, e.Partida, e.Codigo, e.Serie })
                    .HasName("PK_TDCOOXSERIESSYE_1");

                entity.ToTable("TDCOOXSERIESSYE");

                entity.HasIndex(e => new { e.Codigo, e.Serie, e.Fecha }, "missing_index_346_345_TDCOOXSERIESSYE");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Serie)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Recolectado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TdcooxseriessyeRespaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXSERIESSYE_respaldo");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcooxservicio>(entity =>
            {
                entity.HasKey(e => new { e.Pedido, e.Cliente, e.Sucursal, e.Codigo });

                entity.ToTable("TDCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Pedido, e.Cliente, e.Sucursal, e.Codigo, e.FechaRuteo }, "Index_Servicios")
                    .IsUnique();

                entity.HasIndex(e => e.FechaRuteo, "missing_index_530_529_TDCOOXSERVICIOS");

                entity.Property(e => e.CantNc).HasColumnName("CantNC");

                entity.Property(e => e.ChoferSvoNvo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('''')");

                entity.Property(e => e.FacConsIva)
                    .HasColumnType("money")
                    .HasColumnName("FacConsIVA");

                entity.Property(e => e.FacRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("FacRentaIVA");

                entity.Property(e => e.FactorIva)
                    .HasColumnType("money")
                    .HasColumnName("FactorIVA");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaUltPago).HasColumnType("datetime");

                entity.Property(e => e.ImpConsIva)
                    .HasColumnType("money")
                    .HasColumnName("ImpConsIVA");

                entity.Property(e => e.ImpDeposito).HasColumnType("money");

                entity.Property(e => e.ImpRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("ImpRentaIVA");

                entity.Property(e => e.ImporteConsumible).HasColumnType("money");

                entity.Property(e => e.ImporteConsumo).HasColumnType("money");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasColumnName("ImporteIVA");

                entity.Property(e => e.ImporteRenta).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoProd).HasMaxLength(50);
            });

            modelBuilder.Entity<Tdcooxservicios23012022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXSERVICIOS_23012022");

                entity.Property(e => e.CantNc).HasColumnName("CantNC");

                entity.Property(e => e.ChoferSvoNvo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FacConsIva)
                    .HasColumnType("money")
                    .HasColumnName("FacConsIVA");

                entity.Property(e => e.FacRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("FacRentaIVA");

                entity.Property(e => e.FactorIva)
                    .HasColumnType("money")
                    .HasColumnName("FactorIVA");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaUltPago).HasColumnType("datetime");

                entity.Property(e => e.ImpConsIva)
                    .HasColumnType("money")
                    .HasColumnName("ImpConsIVA");

                entity.Property(e => e.ImpDeposito).HasColumnType("money");

                entity.Property(e => e.ImpRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("ImpRentaIVA");

                entity.Property(e => e.ImporteConsumible).HasColumnType("money");

                entity.Property(e => e.ImporteConsumo).HasColumnType("money");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasColumnName("ImporteIVA");

                entity.Property(e => e.ImporteRenta).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd).HasMaxLength(50);
            });

            modelBuilder.Entity<Tdcooxserviciostipoorigen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDCOOXSERVICIOSTIPOORIGEN");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.IdTipoOrigenNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTipoOrigen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TDCOOXSER__IdTip__087B7B06");
            });

            modelBuilder.Entity<Tdcooxtarjeta>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.NumTarjeta });

                entity.ToTable("TDCOOXTARJETAS");

                entity.Property(e => e.NumTarjeta)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Cvv2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CVV2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TarjetaHabiente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany(p => p.Tdcooxtarjeta)
                    .HasForeignKey(d => d.Banco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXTARJETAS_TCCOCTBANCOS");

                entity.HasOne(d => d.Tmcooxcliente)
                    .WithMany(p => p.Tdcooxtarjeta)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCOOXTARJETAS_TMCOOXCLIENTES");
            });

            modelBuilder.Entity<Tdcorthorario>(entity =>
            {
                entity.HasKey(e => new { e.IdHorario, e.Sucursal, e.Cliente });

                entity.ToTable("TDCORTHORARIOS");

                entity.Property(e => e.IdHorario)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Horario");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdcortproforma>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Folio, e.TipoDocumento, e.FechaRuteo, e.Cliente, e.Partida, e.Codigo });

                entity.ToTable("TDCORTPROFORMAS");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcortproforma)
                    .WithMany(p => p.Tdcortproformas)
                    .HasForeignKey(d => new { d.Sucursal, d.Folio, d.TipoDocumento, d.FechaRuteo, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDCORTPROFORMAS_TMCORTPROFORMAS");
            });

            modelBuilder.Entity<Tdcorttemp>(entity =>
            {
                entity.HasKey(e => e.Numero);

                entity.ToTable("TDCORTTEMP");

                entity.Property(e => e.Numero).ValueGeneratedNever();

                entity.Property(e => e.Cantidad1).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Cantidad2).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Dirección)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Entrega)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoInicio)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Id_Tipo");

                entity.Property(e => e.Lat).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Libre1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Libre2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Libre3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Libre4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Libre5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lon).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Móvil)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo1)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo2)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMóvilSol)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdemora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TDEMORA");

                entity.Property(e => e.CantidadAcobrar)
                    .HasColumnType("money")
                    .HasColumnName("CantidadACobrar");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.DiasAcobrar).HasColumnName("DiasACobrar");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.MotivoMovimiento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCobro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempDetallePago>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AbonosDolares).HasColumnType("money");

                entity.Property(e => e.AbonosPesos).HasColumnType("money");

                entity.Property(e => e.Cargopesos)
                    .HasColumnType("money")
                    .HasColumnName("cargopesos");

                entity.Property(e => e.CargosDolares).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Clave)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("clave");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.ImpSaldoAnt).HasColumnType("money");

                entity.Property(e => e.ImpSaldoInsoluto).HasColumnType("money");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.ImporteDocto).HasColumnType("money");

                entity.Property(e => e.ImporteDoctoDlls).HasColumnType("money");

                entity.Property(e => e.ImporteDr)
                    .HasColumnType("money")
                    .HasColumnName("ImporteDR");

                entity.Property(e => e.MetodoPagoDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoDR");

                entity.Property(e => e.MonedaDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MonedaDR");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Numparcialidad)
                    .HasMaxLength(2)
                    .HasColumnName("numparcialidad");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCambioDr)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TipoCambioDR");

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UUID");
            });

            modelBuilder.Entity<TempMovDiaComplemento>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AnioMesProceso)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSaldosComplemento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempSaldosComplementos");

                entity.Property(e => e.AbonosDolares).HasColumnType("money");

                entity.Property(e => e.AbonosPesos).HasColumnType("money");

                entity.Property(e => e.CargoPesos).HasColumnType("money");

                entity.Property(e => e.CargosDolares).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.SaldoDlls).HasColumnType("money");

                entity.Property(e => e.SaldoPesos).HasColumnType("money");

                entity.Property(e => e.TipomovimientoOrigino)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSeries450059>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempSeries450059");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IdClienteEquipo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ClienteEquipo");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSeries4795>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempSeries4795");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IdClienteEquipo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ClienteEquipo");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSeries47952>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempSeries4795_2");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IdClienteEquipo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_ClienteEquipo");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempTccogrterminale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TCCOGRTERMINALES");

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionBancoTerminal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdTerminal)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idTerminal");

                entity.Property(e => e.ReferenciaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempTccogrterminalesall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_TCCOGRTERMINALESALL");

                entity.Property(e => e.CuentaContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionBancoTerminal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdTerminal)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idTerminal");

                entity.Property(e => e.ReferenciaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tempconciliadopago>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPconciliadopagos");

                entity.Property(e => e.AbonosDolares).HasColumnType("money");

                entity.Property(e => e.AbonosPesos).HasColumnType("money");

                entity.Property(e => e.BajaSucursal)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Cargopesos)
                    .HasColumnType("money")
                    .HasColumnName("cargopesos");

                entity.Property(e => e.CargosDolares).HasColumnType("money");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CcSap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSAP");

                entity.Property(e => e.CcSapAcetileno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSapAcetileno");

                entity.Property(e => e.CcSapOxidom)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccSapOxidom");

                entity.Property(e => e.Ccagrupacion).HasColumnName("CCAgrupacion");

                entity.Property(e => e.Ccelectrodos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CCElectrodos");

                entity.Property(e => e.Ccnodo).HasColumnName("CCNodo");

                entity.Property(e => e.Ccplanta).HasColumnName("CCPlanta");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Clave)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("clave");

                entity.Property(e => e.CodigoPostal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ComEtiquetaComplemento)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("com_etiquetaComplemento");

                entity.Property(e => e.ComFolio).HasColumnName("com_folio");

                entity.Property(e => e.ComNoCertificado)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("com_noCertificado");

                entity.Property(e => e.ComSerie)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("com_serie");

                entity.Property(e => e.ComSubtotal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_subtotal");

                entity.Property(e => e.ComTipoDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("com_tipoDocumento");

                entity.Property(e => e.ComTipoDocumentoEmpresa)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_tipoDocumentoEmpresa");

                entity.Property(e => e.ComTotal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_total");

                entity.Property(e => e.ComVersion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("com_version");

                entity.Property(e => e.DiaPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesado).HasColumnType("datetime");

                entity.Property(e => e.Fenuevos)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FEnuevos");

                entity.Property(e => e.GraFechaImpresaDelDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_fechaImpresaDelDocumento");

                entity.Property(e => e.GraIfai)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("gra_IFAI");

                entity.Property(e => e.GraLeyenda1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_Leyenda1");

                entity.Property(e => e.GraLeyenda2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_Leyenda2");

                entity.Property(e => e.GraTipoDocumentoGra)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("gra_TipoDocumentoGra");

                entity.Property(e => e.GrlCopias).HasColumnName("grl_copias");

                entity.Property(e => e.GrlImpresora)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_impresora");

                entity.Property(e => e.GrlNombreAddenda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("grl_nombreAddenda");

                entity.Property(e => e.GrlReimprime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_reimprime");

                entity.Property(e => e.GrlTipoAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_tipoAddenda");

                entity.Property(e => e.GrlUsuarioRealizoDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_usuarioRealizoDocumento");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdBancoComplemento).HasColumnName("idBancoComplemento");

                entity.Property(e => e.ImpPagado).HasColumnType("money");

                entity.Property(e => e.ImpSaldoAnt).HasColumnType("money");

                entity.Property(e => e.ImpSaldoInsoluto).HasColumnType("money");

                entity.Property(e => e.ImpTotalDeImpuestosRetenidos)
                    .HasColumnType("money")
                    .HasColumnName("imp_totalDeImpuestosRetenidos");

                entity.Property(e => e.ImpTotalDeImpuestosTrasladados)
                    .HasColumnType("money")
                    .HasColumnName("imp_totalDeImpuestosTrasladados");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.ImporteDocto).HasColumnType("money");

                entity.Property(e => e.ImporteDoctoDlls).HasColumnType("money");

                entity.Property(e => e.ImporteDr)
                    .HasColumnType("money")
                    .HasColumnName("ImporteDR");

                entity.Property(e => e.LocationNomina)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Location_Nomina");

                entity.Property(e => e.MarcaExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Marcacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MatrizMetro)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MetodoPagoDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoDR");

                entity.Property(e => e.MonedaDr)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MonedaDR");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Nacional)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePta)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Numparcialidad)
                    .HasMaxLength(2)
                    .HasColumnName("numparcialidad");

                entity.Property(e => e.PagAmbiente)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("pag_ambiente");

                entity.Property(e => e.PagCadPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CadPago");

                entity.Property(e => e.PagCertPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CertPago");

                entity.Property(e => e.PagCtaBeneficiario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CtaBeneficiario");

                entity.Property(e => e.PagCtaOrdenante)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CtaOrdenante");

                entity.Property(e => e.PagEmailReceptor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pag_emailReceptor");

                entity.Property(e => e.PagFechaPago)
                    .HasColumnType("datetime")
                    .HasColumnName("pag_FechaPago");

                entity.Property(e => e.PagFormaDePagoP)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_FormaDePagoP");

                entity.Property(e => e.PagLugarExpedicionGrafico)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("pag_LugarExpedicionGrafico");

                entity.Property(e => e.PagLugarExpedicionSat)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("pag_LugarExpedicionSAT");

                entity.Property(e => e.PagMonedaP)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_MonedaP");

                entity.Property(e => e.PagMonto)
                    .HasColumnType("money")
                    .HasColumnName("pag_Monto");

                entity.Property(e => e.PagNomBancoBen)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_NomBancoBen");

                entity.Property(e => e.PagNomBancoOrdEx)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("pag_NomBancoOrdEx");

                entity.Property(e => e.PagNumeroOperacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("pag_NumeroOperacion");

                entity.Property(e => e.PagRazonSocialEmisor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_RazonSocialEmisor");

                entity.Property(e => e.PagRazonSocialReceptor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_RazonSocialReceptor");

                entity.Property(e => e.PagRegimen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_regimen");

                entity.Property(e => e.PagRegimenFiscal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_RegimenFiscal");

                entity.Property(e => e.PagRfcEmisor)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RfcEmisor");

                entity.Property(e => e.PagRfcReceptor)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RfcReceptor");

                entity.Property(e => e.PagRfcemisorCtaBen)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RFCEmisorCtaBen");

                entity.Property(e => e.PagRfcemisorCtaOrd)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RFCEmisorCtaOrd");

                entity.Property(e => e.PagSelloPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_SelloPago");

                entity.Property(e => e.PagTipoCadPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_TipoCadPago");

                entity.Property(e => e.PagTipoCambioP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pag_TipoCambioP");

                entity.Property(e => e.PagUsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_UsoCFDI");

                entity.Property(e => e.PagVersion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("pag_version");

                entity.Property(e => e.Pais)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Procesado)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Prochemex)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaInterna)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.SerieDocto)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SerieFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SucSap).HasColumnName("SucSAP");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCambioDr)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TipoCambioDR");

                entity.Property(e => e.TipoComplemento)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEmpaque)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSucursal)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTransmision)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UUID");
            });

            modelBuilder.Entity<TempfacturasConSaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPFacturasConSaldo");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.TipoCambio).HasColumnType("money");
            });

            modelBuilder.Entity<Templeado>(entity =>
            {
                entity.HasKey(e => e.TeId)
                    .HasName("PK_TEmpleado_1");

                entity.ToTable("TEmpleado");

                entity.HasIndex(e => new { e.TeId, e.TeApaterno, e.TeAmaterno, e.TeNombre }, "iEmpleado");

                entity.Property(e => e.TeId)
                    .ValueGeneratedNever()
                    .HasColumnName("TE_id");

                entity.Property(e => e.TeActivo).HasColumnName("TE_Activo");

                entity.Property(e => e.TeAmaterno)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TE_Amaterno")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeApaterno)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("TE_Apaterno")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeCelular)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TE_Celular")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeEmail)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("TE_Email")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeEqComputo).HasColumnName("TE_EqComputo");

                entity.Property(e => e.TeEqMovil).HasColumnName("TE_EqMovil");

                entity.Property(e => e.TeExt)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TE_Ext")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeFechaBaja)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TE_FechaBaja");

                entity.Property(e => e.TeFechaIng)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TE_FechaIng");

                entity.Property(e => e.TeFechaVto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TE_FechaVto");

                entity.Property(e => e.TeIdPuesto).HasColumnName("TE_IdPuesto");

                entity.Property(e => e.TeNick)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TE_Nick")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TeNombre)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("TE_Nombre")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TePassword)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TE_Password")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TePreguntaSecreta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TE_PreguntaSecreta");

                entity.Property(e => e.TeRespuestaSecreta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TE_RespuestaSecreta");

                entity.Property(e => e.TeTelefono)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TE_Telefono")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TsuId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TSu_Id")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");
            });

            modelBuilder.Entity<ThcocaexpcredContacto>(entity =>
            {
                entity.ToTable("THCOCAEXPCRED_CONTACTO");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Departamento).HasColumnType("text");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NombreContacto).HasColumnType("text");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ThcocaexpcredGenerale)
                    .WithMany(p => p.ThcocaexpcredContactos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_CONTACTO_THCOCAEXPCRED_GENERALES");
            });

            modelBuilder.Entity<ThcocaexpcredGenerale>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("THCOCAEXPCRED_GENERALES");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitudCredito).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasColumnType("text");

                entity.Property(e => e.Rfc).HasColumnName("RFC");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.ThcocaexpcredGenerale)
                    .HasForeignKey<ThcocaexpcredGenerale>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_GENERALES_TMCOCTGRAL");
            });

            modelBuilder.Entity<ThcocaexpcredLegal>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_THCOCAEXPCRED_LEGAL_1");

                entity.ToTable("THCOCAEXPCRED_LEGAL");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaDemanda).HasColumnType("datetime");

                entity.Property(e => e.FolioDemanda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ThcocaexpcredGenerale)
                    .WithOne(p => p.ThcocaexpcredLegal)
                    .HasForeignKey<ThcocaexpcredLegal>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_LEGAL_THCOCAEXPCRED_GENERALES");
            });

            modelBuilder.Entity<ThcocaexpcredPagare>(entity =>
            {
                entity.ToTable("THCOCAEXPCRED_PAGARES");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ThcocaexpcredGenerale)
                    .WithMany(p => p.ThcocaexpcredPagares)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_PAGARES_THCOCAEXPCRED_GENERALES");
            });

            modelBuilder.Entity<ThcocaexpcredProcedimiento>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("THCOCAEXPCRED_PROCEDIMIENTO");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasColumnType("text");

                entity.Property(e => e.Paso1).HasColumnType("text");

                entity.Property(e => e.Paso2).HasColumnType("text");

                entity.Property(e => e.Paso3).HasColumnType("text");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ThcocaexpcredGenerale)
                    .WithOne(p => p.ThcocaexpcredProcedimiento)
                    .HasForeignKey<ThcocaexpcredProcedimiento>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_PROCEDIMIENTO_THCOCAEXPCRED_GENERALES");
            });

            modelBuilder.Entity<ThcocaexpcredSeguimiento>(entity =>
            {
                entity.ToTable("THCOCAEXPCRED_SEGUIMIENTO");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.HoraLlamada).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasColumnType("text");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasColumnName("visible")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ThcocaexpcredGenerale)
                    .WithMany(p => p.ThcocaexpcredSeguimientos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCAEXPCRED_SEGUIMIENTO_THCOCAEXPCRED_GENERALES");
            });

            modelBuilder.Entity<Thcocasusp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("THCOCASUSP");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSuspension).HasColumnType("datetime");

                entity.Property(e => e.SalVen30).HasColumnType("money");

                entity.Property(e => e.SalVen45).HasColumnType("money");

                entity.Property(e => e.SalVen75).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctcred)
                    .WithOne(p => p.Thcocasusp)
                    .HasForeignKey<Thcocasusp>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOCASUSP_TMCOCTCRED");
            });

            modelBuilder.Entity<Thcocatc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOCATC");

                entity.HasIndex(e => e.Fecha, "UQ_Fecha_THCOCATC")
                    .IsUnique();

                entity.Property(e => e.Fecha)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tc)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("TC");
            });

            modelBuilder.Entity<Thcocatemporala01>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.NoDocumento });

                entity.ToTable("THCOCATEMPORALA01");

                entity.Property(e => e.Error)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Procesado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Thcoctdepurado>(entity =>
            {
                entity.ToTable("THCOCTDEPURADOS");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaDepuracion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoctpreesp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOCTPREESP");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia).HasColumnType("datetime");
            });

            modelBuilder.Entity<Thcoctpresupuesto>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Mes })
                    .HasName("PK_TMCOCTPRESUPUESTO");

                entity.ToTable("THCOCTPRESUPUESTO");

                entity.Property(e => e.NombreMes)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoenimpreciboscan>(entity =>
            {
                entity.ToTable("THCOENIMPRECIBOSCAN");

                entity.Property(e => e.Cancelado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.DescripcionCodigo)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionCte)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEntrega)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEliminacion).HasColumnType("datetime");

                entity.Property(e => e.FirmaCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaEncargado)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaFacturista)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FirmaGerente)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesGral)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoEnvase)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancelo)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoenpatio>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo });

                entity.ToTable("THCOENPATIOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");
            });

            modelBuilder.Entity<Thcoenremisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOENREMISIONES");

                entity.Property(e => e.AreaFechaLiberacion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaLibere1).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion1).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EstatusMto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.MttoLibere)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MttoRecibi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nodo1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPar)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ThcoenvcampLm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOENVCAMP_LM");
            });

            modelBuilder.Entity<ThcoenvcampNc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOENVCAMP_NC");
            });

            modelBuilder.Entity<Thcoerrorfac>(entity =>
            {
                entity.ToTable("THCOERRORFAC");

                entity.HasIndex(e => e.CodigoError, "IX_THCOERRORFAC_CodigoError");

                entity.HasIndex(e => new { e.Sucursal, e.Cliente, e.TipoDocumento, e.Folio }, "IX_THCOERRORFAC_SucursalClienteTipoDocumentoFolio");

                entity.HasIndex(e => e.TipoReg, "IX_THCOERRORFAC_TipoTeg");

                entity.Property(e => e.CodigoError)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.FechaError).HasColumnType("datetime");

                entity.Property(e => e.MensajeError)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoErrorNavigation)
                    .WithMany(p => p.Thcoerrorfacs)
                    .HasForeignKey(d => d.CodigoError)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOERRORFAC_TCCOERROR");

                entity.HasOne(d => d.TipoRegNavigation)
                    .WithMany(p => p.Thcoerrorfacs)
                    .HasForeignKey(d => d.TipoReg)
                    .HasConstraintName("FK_THCOERRORFAC_TCCOFACATREGFIS");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Thcoerrorfacs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOERRORFAC_TMCOCTGRAL");
            });

            modelBuilder.Entity<Thcofacontrato>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOFACONTRATOS");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.NoContrato)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ValorActual)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ValorNuevo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ThcofadetallepedidosCon>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Partida, e.Codigo, e.FechaFe });

                entity.ToTable("THCOFADETALLEPEDIDOS_CON");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.BackOrder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadOrigen).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FolioOrigen)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<Thcofaerafectacione>(entity =>
            {
                entity.ToTable("THCOFAERAFECTACIONES");

                entity.Property(e => e.ErrorMessage).HasMaxLength(4000);

                entity.Property(e => e.ErrorProcedure).HasMaxLength(128);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormaFacturacion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcofamtropedido>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.FechaFe });

                entity.ToTable("THCOFAMTROPEDIDOS");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<ThcofamtropedidosCon>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.FechaFe });

                entity.ToTable("THCOFAMTROPEDIDOS_CON");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.AutCancelacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutExtemporaneo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cancelo)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DoctoEmitir)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.GrupoRuta)
                    .HasMaxLength(200)
                    .HasColumnName("Grupo_Ruta");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioPedido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<Thcofamtropropedrem>(entity =>
            {
                entity.ToTable("THCOFAMTROPROPEDREM");

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaProgramacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioProgramo)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresAddenda).IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<Thcofapedidosautoriza>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOFAPEDIDOSAUTORIZA");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAuto)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCaptura)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcogrerror>(entity =>
            {
                entity.ToTable("THCOGRERROR");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Error)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Modulo)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcogrlog>(entity =>
            {
                entity.HasKey(e => e.IdLog);

                entity.ToTable("THCOGRLOG");

                entity.Property(e => e.IdLog).HasColumnName("Id_Log");

                entity.Property(e => e.EquipoConexion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraEntrada).HasColumnType("datetime");

                entity.Property(e => e.HoraSalida).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ThcogrlogBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOGRLOG_bk");

                entity.Property(e => e.EquipoConexion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraEntrada).HasColumnType("datetime");

                entity.Property(e => e.HoraSalida).HasColumnType("datetime");

                entity.Property(e => e.IdLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Log");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcogrproccierre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOGRPROCCIERRE");

                entity.Property(e => e.Proceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcogrsucgeo>(entity =>
            {
                entity.HasKey(e => e.Sucursal);

                entity.ToTable("THCOGRSUCGEO");

                entity.Property(e => e.Sucursal).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcogrtokenaut>(entity =>
            {
                entity.ToTable("THCOGRTOKENAUT");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoidpolizasap>(entity =>
            {
                entity.HasKey(e => e.UniqueId);

                entity.ToTable("THCOIDPOLIZASAP");

                entity.Property(e => e.Asignacion)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BloqueoPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CargoAbono)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccsap");

                entity.Property(e => e.Cebe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cebe");

                entity.Property(e => e.Clasedoc)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("clasedoc");

                entity.Property(e => e.ClaveContable)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContraPda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPda")
                    .IsFixedLength(true);

                entity.Property(e => e.CorteFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("corteFactura")
                    .IsFixedLength(true);

                entity.Property(e => e.Ctasap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ctasap");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.ExentoRetencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Extra4)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra4");

                entity.Property(e => e.Extra5)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra5");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechacon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacon");

                entity.Property(e => e.Fechadoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechadoc");

                entity.Property(e => e.Fechavalor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fechavalor");

                entity.Property(e => e.Idenusd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("idenusd");

                entity.Property(e => e.ImpOriginal).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImpSucIva).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IndicadorCme)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorCME");

                entity.Property(e => e.IndicadorRetencion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Indicadoriva)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("indicadoriva");

                entity.Property(e => e.LdrEntityId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ldr_entity_id");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.OrdenInterna)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("referencia");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.TipoCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ThcoidpolizasapCaja>(entity =>
            {
                entity.HasKey(e => e.UniqueId);

                entity.ToTable("THCOIDPOLIZASAP_CAJA");

                entity.Property(e => e.Asignacion)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BloqueoPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CargoAbono)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccsap");

                entity.Property(e => e.Cebe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cebe");

                entity.Property(e => e.Clasedoc)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("clasedoc");

                entity.Property(e => e.ClaveContable)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContraPda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPda")
                    .IsFixedLength(true);

                entity.Property(e => e.CorteFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("corteFactura")
                    .IsFixedLength(true);

                entity.Property(e => e.Ctasap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ctasap");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.ExentoRetencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Extra4)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra4");

                entity.Property(e => e.Extra5)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra5");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechacon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacon");

                entity.Property(e => e.Fechadoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechadoc");

                entity.Property(e => e.Fechavalor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fechavalor");

                entity.Property(e => e.Idenusd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("idenusd");

                entity.Property(e => e.ImpOriginal).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImpSucIva).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IndicadorCme)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorCME");

                entity.Property(e => e.IndicadorRetencion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Indicadoriva)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("indicadoriva");

                entity.Property(e => e.LdrEntityId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ldr_entity_id");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.OrdenInterna)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("referencia");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.TipoCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<Thcoidpolizasapresp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOIDPOLIZASAPRESP");

                entity.Property(e => e.Asignacion)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BloqueoPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CargoAbono)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccsap");

                entity.Property(e => e.Cebe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cebe");

                entity.Property(e => e.Clasedoc)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("clasedoc");

                entity.Property(e => e.ClaveContable)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContraPda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPda")
                    .IsFixedLength(true);

                entity.Property(e => e.CorteFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("corteFactura")
                    .IsFixedLength(true);

                entity.Property(e => e.Ctasap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ctasap");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.ExentoRetencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Extra4)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra4");

                entity.Property(e => e.Extra5)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra5");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechacon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacon");

                entity.Property(e => e.Fechadoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechadoc");

                entity.Property(e => e.Fechavalor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fechavalor");

                entity.Property(e => e.Idenusd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("idenusd");

                entity.Property(e => e.ImpOriginal).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImpSucIva).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IndicadorCme)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorCME");

                entity.Property(e => e.IndicadorRetencion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Indicadoriva)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("indicadoriva");

                entity.Property(e => e.LdrEntityId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ldr_entity_id");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.OrdenInterna)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("referencia");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.TipoCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<Thcoidpolizasapresp2911>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOIDPOLIZASAPRESP_29_11");

                entity.Property(e => e.Asignacion)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BloqueoPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CargoAbono)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ccsap");

                entity.Property(e => e.Cebe)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cebe");

                entity.Property(e => e.Clasedoc)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("clasedoc");

                entity.Property(e => e.ClaveContable)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContraPda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPda")
                    .IsFixedLength(true);

                entity.Property(e => e.CorteFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("corteFactura")
                    .IsFixedLength(true);

                entity.Property(e => e.Ctasap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ctasap");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.ExentoRetencion).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Extra4)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra4");

                entity.Property(e => e.Extra5)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("extra5");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechacon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacon");

                entity.Property(e => e.Fechadoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechadoc");

                entity.Property(e => e.Fechavalor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("fechavalor");

                entity.Property(e => e.Idenusd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("idenusd");

                entity.Property(e => e.ImpOriginal).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ImpSucIva).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IndicadorCme)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorCME");

                entity.Property(e => e.IndicadorRetencion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Indicadoriva)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("indicadoriva");

                entity.Property(e => e.LdrEntityId)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ldr_entity_id");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.OrdenInterna)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("referencia");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.TipoCarga)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<Thcoidsapfile>(entity =>
            {
                entity.HasKey(e => new { e.Fechaarchivo, e.Nombrearchivo, e.Tipo })
                    .HasName("PK_dbo.THCOIDSAPFILES");

                entity.ToTable("THCOIDSAPFILES");

                entity.Property(e => e.Fechaarchivo)
                    .HasColumnType("date")
                    .HasColumnName("fechaarchivo");

                entity.Property(e => e.Nombrearchivo)
                    .HasMaxLength(35)
                    .HasColumnName("nombrearchivo");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(7)
                    .HasColumnName("tipo");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<Thcoidsaplog>(entity =>
            {
                entity.ToTable("THCOIDSAPLOG");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaAudit)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaAudit");

                entity.Property(e => e.Fechasap)
                    .HasColumnType("date")
                    .HasColumnName("fechasap");

                entity.Property(e => e.Mensajeerror).HasColumnName("mensajeerror");

                entity.Property(e => e.Tiposap)
                    .IsRequired()
                    .HasMaxLength(7)
                    .HasColumnName("tiposap");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<ThcoidusoVistum>(entity =>
            {
                entity.HasKey(e => e.IdUsoVista);

                entity.ToTable("THCOIDUsoVista");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.HasOne(d => d.IdRibbonOptionNavigation)
                    .WithMany(p => p.ThcoidusoVista)
                    .HasForeignKey(d => d.IdRibbonOption)
                    .HasConstraintName("FK_THCOIDUsoVista_THCOIDUsoVista");
            });

            modelBuilder.Entity<Thcoinauts03>(entity =>
            {
                entity.HasKey(e => e.IdAut);

                entity.ToTable("THCOINAUTS03");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinayb>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivo);

                entity.ToTable("THCOINAYB");

                entity.Property(e => e.IdConsecutivo).HasColumnName("Id_Consecutivo");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Documento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Thcoinaybs)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINAYB_TMCOINPROD01");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Thcoinaybs)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINAYB_TCCOGRSUC");
            });

            modelBuilder.Entity<Thcoinbitacoramovsnogen>(entity =>
            {
                entity.HasKey(e => e.IdBitacora);

                entity.ToTable("THCOINBITACORAMOVSNOGEN");

                entity.Property(e => e.Enviado).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMovNoGen).HasColumnName("Id_ConsecutivoMovNoGen");

                entity.Property(e => e.InnerException).IsUnicode(false);

                entity.Property(e => e.MensajeError).IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);

                entity.Property(e => e.StackTrace).IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinestimado>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("THCOINESTIMADOS");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinmov>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.NumeroPartida, e.Codigo, e.FechaMov, e.TipoMovimiento, e.Folio, e.NotaCredito });

                entity.ToTable("THCOINMOV");

                entity.HasIndex(e => new { e.Almacen, e.NumeroPartida, e.Codigo, e.FechaMov, e.TipoMovimiento, e.Folio, e.NotaCredito }, "IX_THCOINMOV")
                    .IsUnique();

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CveImpresion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Descuento)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ejecutivo).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.Importe)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumRefactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRemision).HasDefaultValueSql("((0))");

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PedidoGas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.AlmacenNavigation)
                    .WithMany(p => p.Thcoinmovs)
                    .HasForeignKey(d => d.Almacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINMOV_TCCOGRSUC");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Thcoinmovs)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINMOV_TMCOINPROD01");

                entity.HasOne(d => d.IdTipoIvaNavigation)
                    .WithMany(p => p.Thcoinmovs)
                    .HasForeignKey(d => d.IdTipoIva)
                    .HasConstraintName("FK_THCOINMOV_TCCOGRIVA");

                entity.HasOne(d => d.LineaNavigation)
                    .WithMany(p => p.Thcoinmovs)
                    .HasForeignKey(d => d.Linea)
                    .HasConstraintName("FK_THCOINMOV_TCGRLINEAS");

                entity.HasOne(d => d.Thcoinobmov)
                    .WithMany(p => p.Thcoinmovs)
                    .HasForeignKey(d => new { d.TipoMovimiento, d.Folio, d.FechaMov })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINMOV_THCOINOBMOV");
            });

            modelBuilder.Entity<Thcoinmov1>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMov);

                entity.ToTable("THCOINMOVS");

                entity.HasIndex(e => new { e.Almacen, e.FechaMov, e.TipoMovimiento, e.Folio, e.NotaCredito }, "IX_INVEN_MIG");

                entity.HasIndex(e => new { e.FechaMov, e.TipoMovimiento }, "IX_TipoMov_FechaMov");

                entity.HasIndex(e => new { e.FechaMov, e.TipoMovimiento, e.ClienteSuc }, "IX_TipoMov_FechaMov_ClienteSuc");

                entity.HasIndex(e => new { e.TipoMovimiento, e.IdConsecutivoMov }, "_dta_index_THCOINMOVS_11_875150163__K4_K1_3");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Folio, e.IdConsecutivoMov }, "_dta_index_THCOINMOVS_11_875150163__K4_K5_K1_13_24");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Folio, e.IdConsecutivoMov }, "_dta_index_THCOINMOVS_11_875150163__K4_K5_K1_3_13");

                entity.HasIndex(e => new { e.Folio, e.TipoMovimiento, e.IdConsecutivoMov }, "_dta_index_THCOINMOVS_11_875150163__K5_K4_K1_13");

                entity.HasIndex(e => new { e.Almacen, e.FechaMov }, "missing_index_1034_1033_THCOINMOVS");

                entity.HasIndex(e => e.TipoMovimiento, "missing_index_2046_2045_THCOINMOVS");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Pedido, e.FacturaRemision, e.ClienteSuc }, "missing_index_254_253_THCOINMOVS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CveImpresion).HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ejecutivo).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdTipoIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.Iuuid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IUUID");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumRefactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PedidoGas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.AlmacenNavigation)
                    .WithMany(p => p.Thcoinmov1s)
                    .HasForeignKey(d => d.Almacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINMOVS_TCCOGRSUC");
            });

            modelBuilder.Entity<Thcoinmovsdup>(entity =>
            {
                entity.HasKey(e => e.IdDup);

                entity.ToTable("THCOINMOVSDUP");

                entity.Property(e => e.IdDup).HasColumnName("Id_Dup");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CveImpresion).HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ejecutivo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Enviado).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdTipoIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumRefactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PedidoGas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinmovsnogen>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMov);

                entity.ToTable("THCOINMOVSNOGEN");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CveImpresion).HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Ejecutivo).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("MotivoNC")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.NumRefactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoGas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Thcoinmovspedga>(entity =>
            {
                entity.HasKey(e => new { e.IdMovimiento, e.FechaPedido });

                entity.ToTable("THCOINMOVSPEDGAS");

                entity.Property(e => e.IdMovimiento).HasColumnName("Id_Movimiento");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMovimientoNavigation)
                    .WithMany(p => p.Thcoinmovspedgas)
                    .HasForeignKey(d => d.IdMovimiento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THCOINMOVSPEDGAS_THCOINMOVS");
            });

            modelBuilder.Entity<Thcoinmovswm>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoMov);

                entity.ToTable("THCOINMOVSWMS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CveImpresion).HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ejecutivo).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdTipoIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumRefactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PedidoGas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Transmitir)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinobmov>(entity =>
            {
                entity.HasKey(e => new { e.TipoMovimiento, e.Folio, e.FechaMov });

                entity.ToTable("THCOINOBMOV");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Thcoinpedidorem>(entity =>
            {
                entity.ToTable("THCOINPEDIDOREM");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEliminacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Metros).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancelo)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinpedidosmovil>(entity =>
            {
                entity.HasKey(e => new { e.Folio, e.FechaRecibo, e.NoCliente, e.SucursalReparte, e.SucursalFactura, e.Codigo });

                entity.ToTable("THCOINPEDIDOSMOVIL");

                entity.Property(e => e.FechaRecibo).HasColumnType("datetime");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.NivelFinal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NivelInicial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRepartidor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Placas)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PresionFinal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresionInicial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Unidad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioFactura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcoinserieequipomov>(entity =>
            {
                entity.ToTable("THCOINSERIEEQUIPOMOVS");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NoSerie).HasMaxLength(50);

                entity.Property(e => e.TipoDestino)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento).HasMaxLength(3);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Thcoinserieequipomovsdel>(entity =>
            {
                entity.ToTable("THCOINSERIEEQUIPOMOVSDEL");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NoSerie).HasMaxLength(50);

                entity.Property(e => e.TipoDestino)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento).HasMaxLength(3);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Thcooxasignaconsumible>(entity =>
            {
                entity.HasKey(e => e.IdAsignacion);

                entity.ToTable("THCOOXASIGNACONSUMIBLES");

                entity.HasIndex(e => e.FechaMov, "missing_index_1805_1804_THCOOXASIGNACONSUMIBLES");

                entity.Property(e => e.CantidadAsignada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadFacturada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadGratis).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ThcooxasignaconsumiblesBk20210503Iperez>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOOXASIGNACONSUMIBLES_bk20210503_IPEREZ");

                entity.Property(e => e.CantidadAsignada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadFacturada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadGratis).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdAsignacion).ValueGeneratedOnAdd();

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Thcooxbitacoracambiarutum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOOXBITACORACAMBIARUTA");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteoAnt).HasColumnType("datetime");

                entity.Property(e => e.IdBitacora).ValueGeneratedOnAdd();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcooxbloqcuentum>(entity =>
            {
                entity.HasKey(e => e.HistorialId);

                entity.ToTable("THCOOXBLOQCUENTA");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Thcooxcanmovaumento>(entity =>
            {
                entity.HasKey(e => e.CanMovAumentoId)
                    .HasName("PK_THCOOXCANMOVAUMENTO_CanMovAumentoId");

                entity.ToTable("THCOOXCANMOVAUMENTO");

                entity.Property(e => e.FechaMovI07)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaMov_I07");

                entity.Property(e => e.FechaMovO01)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaMov_O01");

                entity.Property(e => e.FechaRegistro)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Msg)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReciboI07).HasColumnName("Recibo_I07");

                entity.Property(e => e.ReciboO01).HasColumnName("Recibo_O01");
            });

            modelBuilder.Entity<Thcooxorigenfactura>(entity =>
            {
                entity.HasKey(e => e.OriFacId)
                    .HasName("PK_TMCOOXORIGENFACTURA_OrigenFacturaID");

                entity.ToTable("THCOOXORIGENFACTURA");

                entity.Property(e => e.OriFacId).HasColumnName("OriFacID");

                entity.Property(e => e.FechaRegistro)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOriFacId).HasColumnName("TipoOriFacID");
            });

            modelBuilder.Entity<Thcooxrecepcionseries>(entity =>
            {
                entity.ToTable("THCOOXRECEPCIONSERIES");

                entity.HasIndex(e => new { e.Pedido, e.Cliente, e.Chofer, e.FechaRuteo }, "missing_index_3201_3200_THCOOXRECEPCIONSERIES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Origen)
                    .HasMaxLength(10)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Thcooxrentascte>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOOXRENTASCTE");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMovAnt).HasColumnType("datetime");

                entity.Property(e => e.FechaUtlRentaAct)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaUtlRenta_Act");

                entity.Property(e => e.FechaUtlRentaAnt)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaUtlRenta_Ant");

                entity.Property(e => e.FolioFacturaAct).HasColumnName("FolioFactura_Act");

                entity.Property(e => e.FolioFacturaAnt).HasColumnName("FolioFactura_Ant");

                entity.Property(e => e.MovimientoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MovimientoID");

                entity.Property(e => e.ObservacionesAct)
                    .HasMaxLength(1000)
                    .HasColumnName("Observaciones_Act");

                entity.Property(e => e.ObservacionesAnt)
                    .HasMaxLength(1000)
                    .HasColumnName("Observaciones_Ant");

                entity.Property(e => e.Pantalla).HasMaxLength(100);

                entity.Property(e => e.TipoMovimiento).HasMaxLength(30);

                entity.Property(e => e.UsuarioAct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Act");

                entity.Property(e => e.UsuarioAnt)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Ant");
            });

            modelBuilder.Entity<Thcooxrepvi>(entity =>
            {
                entity.ToTable("THCOOXREPVIS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FechaImpresion).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteoFin).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteoIni).HasColumnType("datetime");

                entity.Property(e => e.Sucursal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Usuario).HasMaxLength(50);
            });

            modelBuilder.Entity<Thcortdetalle>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ruta, e.Codigo, e.FechaRuteo, e.Usuario });

                entity.ToTable("THCORTDETALLE");

                entity.Property(e => e.FechaRuteo).HasColumnType("date");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Credito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<Thcotrcorreofile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("THCOTRCORREOFILE");

                entity.Property(e => e.Archivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Thcotrsolmovin>(entity =>
            {
                entity.ToTable("THCOTRSOLMOVIN");

                entity.Property(e => e.Autorizado).HasMaxLength(20);

                entity.Property(e => e.C8).HasMaxLength(20);

                entity.Property(e => e.C9).HasMaxLength(20);

                entity.Property(e => e.Cantidad).HasMaxLength(20);

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(20)
                    .HasColumnName("CCSAP");

                entity.Property(e => e.Codigo).HasMaxLength(20);

                entity.Property(e => e.FechaCarga).HasMaxLength(50);

                entity.Property(e => e.FechaRespuesta).HasMaxLength(50);

                entity.Property(e => e.IdMotivo).HasMaxLength(20);

                entity.Property(e => e.IdSolicitud).HasMaxLength(20);

                entity.Property(e => e.Observaciones).HasMaxLength(500);

                entity.Property(e => e.Sucursal).HasMaxLength(20);

                entity.Property(e => e.TipoMovimiento).HasMaxLength(20);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<TmReceta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tm_recetas");

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Delegacion).HasMaxLength(50);

                entity.Property(e => e.FechaInicio).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.NoAfiliacion).HasMaxLength(50);

                entity.Property(e => e.Nss)
                    .HasMaxLength(50)
                    .HasColumnName("NSS");
            });

            modelBuilder.Entity<Tmadclientesescala>(entity =>
            {
                entity.ToTable("TMADCLIENTESESCALAS");

                entity.Property(e => e.Acumulado).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Anio)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CantConsumida).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Consumo).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Factor).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Mes)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmadcodigosescala>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.ClienteInfra, e.Codigo })
                    .HasName("PK_Codigo")
                    .IsClustered(false);

                entity.ToTable("TMADCODIGOSESCALAS");

                entity.Property(e => e.Factor).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmadsucclienteescala)
                    .WithMany(p => p.Tmadcodigosescalas)
                    .HasForeignKey(d => new { d.Sucursal, d.ClienteInfra })
                    .HasConstraintName("FK_Cliente");
            });

            modelBuilder.Entity<Tmadescala>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.ClienteInfra, e.Codigo, e.Id })
                    .HasName("PK_Escalas")
                    .IsClustered(false);

                entity.ToTable("TMADESCALAS");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Precio).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.TopeEscala).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmadcodigosescala)
                    .WithMany(p => p.Tmadescalas)
                    .HasForeignKey(d => new { d.Sucursal, d.ClienteInfra, d.Codigo })
                    .HasConstraintName("FK_Codigos");
            });

            modelBuilder.Entity<Tmadrfcuniversal>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.Rfc, e.RazonSocial, e.CuentaUniversal, e.CuentaClabe, e.IdBanco });

                entity.ToTable("TMADRFCUNIVERSAL");

                entity.HasIndex(e => new { e.Suc, e.Rfc, e.CuentaClabe, e.IdBanco }, "UnviRFC")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaUniversal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaClabe)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmadsucclienteescala>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.ClienteInfra })
                    .HasName("PK_Cliente")
                    .IsClustered(false);

                entity.ToTable("TMADSUCCLIENTEESCALAS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmadtransescala>(entity =>
            {
                entity.HasKey(e => e.IdTransEscala);

                entity.ToTable("TMADTRANSESCALAS");

                entity.Property(e => e.IdTransEscala).HasColumnName("idTransEscala");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.CantidadFac).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.CantidadFacProv).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.CodigoProv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Factor).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Factura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFac).HasColumnType("datetime");

                entity.Property(e => e.FolioFac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pedido)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Remision)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("serie")
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAudit)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioFac)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmadtransescalasfac>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TMADTRANSESCALASFAC");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Factor).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.UsuarioAudit)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcegspa>(entity =>
            {
                entity.HasKey(e => e.PacienteId);

                entity.ToTable("TMCEGSPAS");

                entity.Property(e => e.PacienteId)
                    .ValueGeneratedNever()
                    .HasColumnName("PacienteID");

                entity.Property(e => e.ApMaterno)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ApPaterno)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaNac).HasColumnType("datetime");

                entity.Property(e => e.FolioBaja).HasMaxLength(50);

                entity.Property(e => e.GeneroId).HasColumnName("GeneroID");

                entity.Property(e => e.GradoId).HasColumnName("GradoID");

                entity.Property(e => e.Matricula)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.MotivoId).HasColumnName("MotivoID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Observaciones).HasMaxLength(50);

                entity.Property(e => e.UsuarioAlta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UsuarioAudit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UsuarioBaja).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcegsserv>(entity =>
            {
                entity.HasKey(e => e.ServicioId);

                entity.ToTable("TMCEGSSERV");

                entity.Property(e => e.ServicioId).HasColumnName("ServicioID");

                entity.Property(e => e.Archivo).IsRequired();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaServicio).HasColumnType("datetime");

                entity.Property(e => e.PacienteId).HasColumnName("PacienteID");

                entity.Property(e => e.TipoArchivo)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoServicio)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcegssol>(entity =>
            {
                entity.HasKey(e => new { e.Folio, e.FechaSol, e.PacienteId });

                entity.ToTable("TMCEGSSOL");

                entity.Property(e => e.FechaSol).HasColumnType("datetime");

                entity.Property(e => e.PacienteId).HasColumnName("PacienteID");

                entity.Property(e => e.Diagnostico).HasMaxLength(500);

                entity.Property(e => e.EmpresaId).HasColumnName("EmpresaID");
            });

            modelBuilder.Entity<Tmcoafactivo>(entity =>
            {
                entity.HasKey(e => new { e.IdActivo, e.Sucursal, e.CentroCostos });

                entity.ToTable("TMCOAFACTIVOS");

                entity.Property(e => e.IdActivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idActivo");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Marca)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Modelo)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Motor)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.NumActivoFijo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumEco)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Placas)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfa)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("RFA");

                entity.Property(e => e.Serie)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClaveNavigation)
                    .WithMany(p => p.Tmcoafactivos)
                    .HasForeignKey(d => d.Clave)
                    .HasConstraintName("FK_TMCOAFACTIVOS_TCCOAFDETALLE");
            });

            modelBuilder.Entity<Tmcocaantgasto>(entity =>
            {
                entity.HasKey(e => e.IdAnticipoGasto);

                entity.ToTable("TMCOCAANTGASTO");

                entity.Property(e => e.Anticipo).HasColumnType("money");

                entity.Property(e => e.CantidadComprobada).HasColumnType("money");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FinViaje).HasColumnType("smalldatetime");

                entity.Property(e => e.InicioViaje).HasColumnType("smalldatetime");

                entity.Property(e => e.LugarViaje)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MotivoViaje)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCcsap)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TipoCCSap");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocaclienterotacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCACLIENTEROTACION");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.S121150)
                    .HasColumnType("money")
                    .HasColumnName("S121_150");

                entity.Property(e => e.S130)
                    .HasColumnType("money")
                    .HasColumnName("S1_30");

                entity.Property(e => e.S151180)
                    .HasColumnType("money")
                    .HasColumnName("S151_180");

                entity.Property(e => e.S3160)
                    .HasColumnType("money")
                    .HasColumnName("S31_60");

                entity.Property(e => e.S6190)
                    .HasColumnType("money")
                    .HasColumnName("S61_90");

                entity.Property(e => e.S91120)
                    .HasColumnType("money")
                    .HasColumnName("S91_120");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoTotal).HasColumnType("money");

                entity.Property(e => e.Sm180)
                    .HasColumnType("money")
                    .HasColumnName("SM180");

                entity.Property(e => e.Ssv)
                    .HasColumnType("money")
                    .HasColumnName("SSV");

                entity.Property(e => e.VentasAntePenultimoMes).HasColumnType("money");

                entity.Property(e => e.VentasMesActual).HasColumnType("money");

                entity.Property(e => e.VentasPenutimoMes).HasColumnType("money");
            });

            modelBuilder.Entity<TmcocaclienterotacionSep2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCACLIENTEROTACION_SEP2021");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.S121150)
                    .HasColumnType("money")
                    .HasColumnName("S121_150");

                entity.Property(e => e.S130)
                    .HasColumnType("money")
                    .HasColumnName("S1_30");

                entity.Property(e => e.S151180)
                    .HasColumnType("money")
                    .HasColumnName("S151_180");

                entity.Property(e => e.S3160)
                    .HasColumnType("money")
                    .HasColumnName("S31_60");

                entity.Property(e => e.S6190)
                    .HasColumnType("money")
                    .HasColumnName("S61_90");

                entity.Property(e => e.S91120)
                    .HasColumnType("money")
                    .HasColumnName("S91_120");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoTotal).HasColumnType("money");

                entity.Property(e => e.Sm180)
                    .HasColumnType("money")
                    .HasColumnName("SM180");

                entity.Property(e => e.Ssv)
                    .HasColumnType("money")
                    .HasColumnName("SSV");

                entity.Property(e => e.VentasAntePenultimoMes).HasColumnType("money");

                entity.Property(e => e.VentasMesActual).HasColumnType("money");

                entity.Property(e => e.VentasPenutimoMes).HasColumnType("money");
            });

            modelBuilder.Entity<Tmcocaclienterotacionoxidom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCACLIENTEROTACIONOXIDOM");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.S121150)
                    .HasColumnType("money")
                    .HasColumnName("S121_150");

                entity.Property(e => e.S130)
                    .HasColumnType("money")
                    .HasColumnName("S1_30");

                entity.Property(e => e.S151180)
                    .HasColumnType("money")
                    .HasColumnName("S151_180");

                entity.Property(e => e.S3160)
                    .HasColumnType("money")
                    .HasColumnName("S31_60");

                entity.Property(e => e.S6190)
                    .HasColumnType("money")
                    .HasColumnName("S61_90");

                entity.Property(e => e.S91120)
                    .HasColumnType("money")
                    .HasColumnName("S91_120");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoTotal).HasColumnType("money");

                entity.Property(e => e.Sm180)
                    .HasColumnType("money")
                    .HasColumnName("SM180");

                entity.Property(e => e.Ssv)
                    .HasColumnType("money")
                    .HasColumnName("SSV");

                entity.Property(e => e.VentasAntePenultimoMes).HasColumnType("money");

                entity.Property(e => e.VentasMesActual).HasColumnType("money");

                entity.Property(e => e.VentasPenutimoMes).HasColumnType("money");
            });

            modelBuilder.Entity<TmcocaclienterotacionoxidomSep2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCACLIENTEROTACIONOXIDOM_SEP2021");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.S121150)
                    .HasColumnType("money")
                    .HasColumnName("S121_150");

                entity.Property(e => e.S130)
                    .HasColumnType("money")
                    .HasColumnName("S1_30");

                entity.Property(e => e.S151180)
                    .HasColumnType("money")
                    .HasColumnName("S151_180");

                entity.Property(e => e.S3160)
                    .HasColumnType("money")
                    .HasColumnName("S31_60");

                entity.Property(e => e.S6190)
                    .HasColumnType("money")
                    .HasColumnName("S61_90");

                entity.Property(e => e.S91120)
                    .HasColumnType("money")
                    .HasColumnName("S91_120");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoTotal).HasColumnType("money");

                entity.Property(e => e.Sm180)
                    .HasColumnType("money")
                    .HasColumnName("SM180");

                entity.Property(e => e.Ssv)
                    .HasColumnType("money")
                    .HasColumnName("SSV");

                entity.Property(e => e.VentasAntePenultimoMes).HasColumnType("money");

                entity.Property(e => e.VentasMesActual).HasColumnType("money");

                entity.Property(e => e.VentasPenutimoMes).HasColumnType("money");
            });

            modelBuilder.Entity<Tmcocacobradore>(entity =>
            {
                entity.HasKey(e => e.IdCobrador);

                entity.ToTable("TMCOCACOBRADORES");

                entity.Property(e => e.FechaAudit).HasColumnType("date");

                entity.Property(e => e.Materno)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocacominter>(entity =>
            {
                entity.HasKey(e => e.IdPago);

                entity.ToTable("TMCOCACOMINTER");

                entity.Property(e => e.IdPago).HasColumnName("idPago");

                entity.Property(e => e.CtaBancoBen)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CtaPagoCte)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.ImporteAplicado).HasColumnType("money");

                entity.Property(e => e.ImporteFactura).HasColumnType("money");

                entity.Property(e => e.ImportePago).HasColumnType("money");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocialBancoBen)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaPago)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.RfcbancoBen)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFCBancoBen");

                entity.Property(e => e.RfcbancoCte)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFCBancoCte");

                entity.Property(e => e.SerieFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SerieSuc)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UUID");
            });

            modelBuilder.Entity<Tmcocacompextra>(entity =>
            {
                entity.HasKey(e => e.Rfc)
                    .IsClustered(false);

                entity.ToTable("TMCOCACOMPEXTRA");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<Tmcocacomppago>(entity =>
            {
                entity.HasKey(e => new { e.ComSerie, e.ComFolio });

                entity.ToTable("TMCOCACOMPPAGOS");

                entity.HasIndex(e => new { e.ComSerie, e.ComFolio }, "Folio")
                    .IsUnique();

                entity.HasIndex(e => e.ComFolio, "FolioUnique")
                    .IsUnique();

                entity.HasIndex(e => e.Procesado, "Procesado");

                entity.HasIndex(e => e.GrlUsuarioRealizoDocumento, "TMCOCACOMPPAGOS_IDX_com_serie_com_folio_Usuario");

                entity.HasIndex(e => e.Procesado, "TMCOCACOMPPAGOS_IDX_com_serie_com_folio_pag_FechaPago_pag_NumeroOperacion");

                entity.HasIndex(e => new { e.PagFormaDePagoP, e.ReferenciaInterna }, "TMCOCACOMPPAGOS_IDX_com_serie_com_folio_pag_NumeroOperacion_ID");

                entity.HasIndex(e => e.Usuario, "Usuario");

                entity.HasIndex(e => e.Procesado, "missing_index_1152_1151_TMCOCACOMPPAGOS");

                entity.HasIndex(e => e.Procesado, "missing_index_1615_1614_TMCOCACOMPPAGOS");

                entity.HasIndex(e => new { e.PagRazonSocialReceptor, e.FechaProcesado }, "missing_index_1746_1745_TMCOCACOMPPAGOS");

                entity.HasIndex(e => e.Procesado, "missing_index_2154_2153_TMCOCACOMPPAGOS");

                entity.HasIndex(e => new { e.PagFormaDePagoP, e.Procesado }, "missing_index_2229_2228_TMCOCACOMPPAGOS");

                entity.HasIndex(e => e.Procesado, "missing_index_2263_2262_TMCOCACOMPPAGOS");

                entity.HasIndex(e => e.Procesado, "missing_index_873_872_TMCOCACOMPPAGOS");

                entity.Property(e => e.ComSerie)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("com_serie");

                entity.Property(e => e.ComFolio).HasColumnName("com_folio");

                entity.Property(e => e.ComDomicilioFiscalReceptor)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("com_DomicilioFiscalReceptor");

                entity.Property(e => e.ComEtiquetaComplemento)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("com_etiquetaComplemento");

                entity.Property(e => e.ComNoCertificado)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("com_noCertificado");

                entity.Property(e => e.ComRegimenFiscalReceptor)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("com_RegimenFiscalReceptor");

                entity.Property(e => e.ComRelacionado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("com_relacionado");

                entity.Property(e => e.ComSubtotal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_subtotal");

                entity.Property(e => e.ComTipoDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("com_tipoDocumento");

                entity.Property(e => e.ComTipoDocumentoEmpresa)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_tipoDocumentoEmpresa");

                entity.Property(e => e.ComTipoRelacion)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("com_tipoRelacion");

                entity.Property(e => e.ComTotal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("com_total");

                entity.Property(e => e.ComUuidRelacion)
                    .HasMaxLength(1110)
                    .IsUnicode(false)
                    .HasColumnName("com_uuidRelacion");

                entity.Property(e => e.ComVersion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("com_version");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesado).HasColumnType("datetime");

                entity.Property(e => e.GraFechaImpresaDelDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_fechaImpresaDelDocumento");

                entity.Property(e => e.GraIfai)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("gra_IFAI");

                entity.Property(e => e.GraLeyenda1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_Leyenda1");

                entity.Property(e => e.GraLeyenda2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gra_Leyenda2");

                entity.Property(e => e.GraTipoDocumentoGra)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("gra_TipoDocumentoGra");

                entity.Property(e => e.GrlCopias).HasColumnName("grl_copias");

                entity.Property(e => e.GrlImpresora)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_impresora");

                entity.Property(e => e.GrlNombreAddenda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("grl_nombreAddenda");

                entity.Property(e => e.GrlReimprime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_reimprime");

                entity.Property(e => e.GrlTipoAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_tipoAddenda");

                entity.Property(e => e.GrlUsuarioRealizoDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("grl_usuarioRealizoDocumento");

                entity.Property(e => e.IdBancoComplemento).HasColumnName("idBancoComplemento");

                entity.Property(e => e.ImpTotalDeImpuestosRetenidos)
                    .HasColumnType("money")
                    .HasColumnName("imp_totalDeImpuestosRetenidos");

                entity.Property(e => e.ImpTotalDeImpuestosTrasladados)
                    .HasColumnType("money")
                    .HasColumnName("imp_totalDeImpuestosTrasladados");

                entity.Property(e => e.PagAmbiente)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("pag_ambiente");

                entity.Property(e => e.PagCadPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CadPago");

                entity.Property(e => e.PagCertPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CertPago");

                entity.Property(e => e.PagCtaBeneficiario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CtaBeneficiario");

                entity.Property(e => e.PagCtaOrdenante)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_CtaOrdenante");

                entity.Property(e => e.PagEmailReceptor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pag_emailReceptor");

                entity.Property(e => e.PagFechaPago)
                    .HasColumnType("datetime")
                    .HasColumnName("pag_FechaPago");

                entity.Property(e => e.PagFormaDePagoP)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_FormaDePagoP");

                entity.Property(e => e.PagLugarExpedicionGrafico)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("pag_LugarExpedicionGrafico");

                entity.Property(e => e.PagLugarExpedicionSat)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("pag_LugarExpedicionSAT");

                entity.Property(e => e.PagMonedaP)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_MonedaP");

                entity.Property(e => e.PagMonto)
                    .HasColumnType("money")
                    .HasColumnName("pag_Monto");

                entity.Property(e => e.PagNomBancoBen)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_NomBancoBen");

                entity.Property(e => e.PagNomBancoOrdEx)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("pag_NomBancoOrdEx");

                entity.Property(e => e.PagNumeroOperacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("pag_NumeroOperacion");

                entity.Property(e => e.PagRazonSocialEmisor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_RazonSocialEmisor");

                entity.Property(e => e.PagRazonSocialReceptor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("pag_RazonSocialReceptor");

                entity.Property(e => e.PagRegimen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_regimen");

                entity.Property(e => e.PagRegimenFiscal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("pag_RegimenFiscal");

                entity.Property(e => e.PagRfcEmisor)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RfcEmisor");

                entity.Property(e => e.PagRfcReceptor)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RfcReceptor");

                entity.Property(e => e.PagRfcemisorCtaBen)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RFCEmisorCtaBen");

                entity.Property(e => e.PagRfcemisorCtaOrd)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("pag_RFCEmisorCtaOrd");

                entity.Property(e => e.PagSelloPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_SelloPago");

                entity.Property(e => e.PagTipoCadPago)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pag_TipoCadPago");

                entity.Property(e => e.PagTipoCambioP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pag_TipoCambioP");

                entity.Property(e => e.PagUsoCfdi)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("pag_UsoCFDI");

                entity.Property(e => e.PagVersion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("pag_version");

                entity.Property(e => e.Procesado)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaInterna)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoComplemento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocaconektum>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Pedido, e.ConektaOrd });

                entity.ToTable("TMCOCACONEKTA");

                entity.Property(e => e.ConektaOrd).HasMaxLength(50);

                entity.Property(e => e.BancoEmisor).HasMaxLength(50);

                entity.Property(e => e.Estatus).HasMaxLength(2);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.ImpCargo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.ImpComision).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.MetodoPago).HasMaxLength(20);

                entity.Property(e => e.NoOperacion).HasMaxLength(20);

                entity.Property(e => e.NombreTc)
                    .HasMaxLength(150)
                    .HasColumnName("NombreTC");

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcocactasuniversale>(entity =>
            {
                entity.HasKey(e => e.IdCtaUniv);

                entity.ToTable("TMCOCACTASUNIVERSALES");

                entity.Property(e => e.Cuenta).HasMaxLength(30);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasMaxLength(300);

                entity.Property(e => e.RazonSocial).HasMaxLength(300);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(15)
                    .HasColumnName("RFC");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcocafacturaspend>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.FolioFactura })
                    .HasName("PK_dbo.TMCOCAFACTURASPEND");

                entity.ToTable("TMCOCAFACTURASPEND");

                entity.HasIndex(e => new { e.Cancelada, e.Liberada }, "ix_TMCOCAFACTURASPEND_canc_lib");

                entity.Property(e => e.Cancelada).HasDefaultValueSql("((0))");

                entity.Property(e => e.EsCredito)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaCancelacion).HasColumnType("date");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaLiberacion).HasColumnType("date");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Liberada).HasDefaultValueSql("((0))");

                entity.Property(e => e.ObsCredito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcocamov>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.NoDocumento, e.Referencia, e.Referencia2, e.TipoMovimiento })
                    .HasName("PK_TMCOCAMOV_1")
                    .IsClustered(false);

                entity.ToTable("TMCOCAMOV");

                entity.HasIndex(e => e.AnioMesProceso, "Año Proceso")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Cliente, "ClienteCartera")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Uuidfac, "IDX_UUIDFac_TMCOCAMOV");

                entity.HasIndex(e => e.Id, "PK_id")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TipoMovimiento, e.FechaFactura, e.Usuario, e.Procesar }, "Procesar")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Sucursal, e.Cliente, e.NoDocumento }, "Saldos")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Ccsucursal, e.Cliente, e.NoDocumento }, "SucCteMov")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SucursalOrigen, "SucOrigen")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AnioMesProceso, e.TipoMovimiento }, "TMCOCAMOV_IDX_id_sucursal_ccsucursal_cliente_nodocumento_referencia");

                entity.HasIndex(e => e.NoDocumento, "_dta_index_TMCOCAMOV_11_1099150961__K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TipoMovimiento, "_dta_index_TMCOCAMOV_11_1099150961__K9_1_17")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TipoMovimiento, "missing_index_1081_1080_TMCOCAMOV");

                entity.HasIndex(e => e.TipoMovimiento, "missing_index_1711_1710_TMCOCAMOV");

                entity.HasIndex(e => new { e.Referencia, e.TipoMovimiento, e.SucursalOrigen, e.AnioMesProceso }, "missing_index_175_174_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.IdBanco }, "missing_index_1811_1810_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.AnioMesProceso, e.TipoCambio }, "missing_index_1866_1865_TMCOCAMOV");

                entity.HasIndex(e => e.Oxidom, "missing_index_2426_2425_TMCOCAMOV");

                entity.HasIndex(e => new { e.Usuario, e.Procesar }, "missing_index_2759_2758_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoPago, e.NoPago }, "missing_index_2886_2885_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Procesar, e.Usuario }, "missing_index_2977_2976_TMCOCAMOV");

                entity.HasIndex(e => new { e.Ccsucursal, e.FechaFactura }, "missing_index_3110_3109_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.SucursalOrigen, e.AnioMesProceso }, "missing_index_3258_3257_TMCOCAMOV");

                entity.HasIndex(e => new { e.Procesar, e.Usuario }, "missing_index_3282_3281_TMCOCAMOV");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Usuario, e.Procesar }, "missing_index_3296_3295_TMCOCAMOV");

                entity.HasIndex(e => e.CveMovto, "missing_index_3705_3704_TMCOCAMOV");

                entity.HasIndex(e => e.NoPago, "missing_index_3710_3709_TMCOCAMOV");

                entity.HasIndex(e => new { e.Sucursal, e.Ccsucursal, e.AnioMesProceso }, "missing_index_579_578_TMCOCAMOV");

                entity.HasIndex(e => new { e.Ccsucursal, e.TipoMovimiento, e.AnioMesProceso, e.FechaFactura }, "missing_index_840_839_TMCOCAMOV");

                entity.HasIndex(e => e.Usuario, "usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotalRetenciones).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuidfac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUIDFac");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_TDCOCAMOV_TCCOCTBANCOS");

                entity.HasOne(d => d.IdEstatusSeguimientoNavigation)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => d.IdEstatusSeguimiento)
                    .HasConstraintName("FK_TDCOCAMOV_TCCOCASTATUSSEG");

                entity.HasOne(d => d.TipoIvaNavigation)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => d.TipoIva)
                    .HasConstraintName("FK_TDCOCAMOV_TCCOGRIVA");

                entity.HasOne(d => d.TipoMovimientoNavigation)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => d.TipoMovimiento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCAMOV_TCCOGRTMOV");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCAMOV_TMCOCTGRAL");

                entity.HasOne(d => d.Tdcogrproch)
                    .WithMany(p => p.Tmcocamovs)
                    .HasForeignKey(d => new { d.NoPago, d.TipoMovimiento, d.NoDocumento })
                    .HasConstraintName("FK_TMCOCAMOV_TDCOGRPROCH");
            });

            modelBuilder.Entity<TmcocamovProcesados2018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCAMOV_PROCESADOS2018");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotalRetenciones).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuidfac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUIDFac");
            });

            modelBuilder.Entity<TmcocamovProcesados2019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCAMOV_PROCESADOS2019");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotalRetenciones).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuidfac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUIDFac");
            });

            modelBuilder.Entity<TmcocamovProcesados2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCAMOV_PROCESADOS2020");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotalRetenciones).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuidfac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUIDFac");
            });

            modelBuilder.Entity<TmcocamovTmp>(entity =>
            {
                entity.ToTable("TMCOCAMOV_TMP");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Procesar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotalRetenciones).HasColumnType("money");

                entity.Property(e => e.Subtotal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TasaRetenciones).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuidfac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUIDFac");
            });

            modelBuilder.Entity<Tmcocamovdoctosrel>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.NoDocumento, e.Referencia, e.Referencia2, e.TipoMovimiento, e.Uuid })
                    .IsClustered(false);

                entity.ToTable("TMCOCAMOVDOCTOSREL");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Referencia).HasMaxLength(70);

                entity.Property(e => e.Referencia2).HasMaxLength(30);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(36)
                    .HasColumnName("UUID");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaProcesadoRel).HasColumnType("datetime");

                entity.Property(e => e.TipoRelacion)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcocamovextra>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.NoDocumento, e.Referencia, e.Referencia2, e.TipoMovimiento })
                    .IsClustered(false);

                entity.ToTable("TMCOCAMOVEXTRA");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Dato1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dato2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dato3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dato4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dato5)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocamovtemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmcocamovtemp");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaEstatus).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.IdEstatusSeguimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idEstatusSeguimiento");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocapromotora>(entity =>
            {
                entity.HasKey(e => e.NumPromotora);

                entity.ToTable("TMCOCAPROMOTORAS");

                entity.Property(e => e.NumPromotora).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Materno)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocareciboscaja>(entity =>
            {
                entity.HasKey(e => new { e.Compañia, e.Folio, e.TipoMovimiento });

                entity.ToTable("TMCOCARECIBOSCAJA");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveContabilidad)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Recibimos)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocarotacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCAROTACION");

                entity.Property(e => e.CarteraMensual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.MesActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MesAntepenultimo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MesPenultimo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo121150)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo121_150");

                entity.Property(e => e.Saldo130)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo1_30");

                entity.Property(e => e.Saldo151180)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo151_180");

                entity.Property(e => e.Saldo3160)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo31_60");

                entity.Property(e => e.Saldo6190)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo61_90");

                entity.Property(e => e.Saldo91120)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo91_120");

                entity.Property(e => e.SaldoSinVencer).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Saldom180M)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldom_180_m");
            });

            modelBuilder.Entity<TmcocarotacionSep2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCAROTACION_SEP2021");

                entity.Property(e => e.CarteraMensual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CobranzaAntepenultimoMes).HasColumnType("money");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaPenultimoMes).HasColumnType("money");

                entity.Property(e => e.MesActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MesAntepenultimo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MesPenultimo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SDemanda)
                    .HasColumnType("money")
                    .HasColumnName("S_Demanda");

                entity.Property(e => e.Saldo121150)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo121_150");

                entity.Property(e => e.Saldo130)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo1_30");

                entity.Property(e => e.Saldo151180)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo151_180");

                entity.Property(e => e.Saldo3160)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo31_60");

                entity.Property(e => e.Saldo6190)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo61_90");

                entity.Property(e => e.Saldo91120)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldo91_120");

                entity.Property(e => e.SaldoSinVencer).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Saldom180M)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Saldom_180_m");
            });

            modelBuilder.Entity<Tmcocasolcontareserv>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Ccsucursal, e.Cliente, e.TipoMovimiento, e.Referencia });

                entity.ToTable("TMCOCASOLCONTARESERV");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocasolcontum>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.SucursalSolicita, e.Ccsucursal, e.Cliente, e.NoDocumento, e.TipoMovimiento, e.Referencia });

                entity.ToTable("TMCOCASOLCONTA");

                entity.HasIndex(e => new { e.Ccsucursal, e.Cliente, e.TipoMovimiento, e.Referencia }, "missing_index_1073_1072_TMCOCASOLCONTA");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ClabeInterbancaria)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocAdjunto)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAprobacionContabilidad).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaDeposito).HasColumnType("date");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MontoDeposito).HasColumnType("money");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SucBanco)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcocatrangasto>(entity =>
            {
                entity.HasKey(e => e.IdTransferencia);

                entity.ToTable("TMCOCATRANGASTO");

                entity.Property(e => e.CantidadComprobada).HasColumnType("money");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCancela).HasColumnType("datetime");

                entity.Property(e => e.FechaComprobacion).HasColumnType("datetime");

                entity.Property(e => e.TipoCcsap)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TipoCCSap");

                entity.Property(e => e.Transferencia).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioComprobacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tccocacuentagasto)
                    .WithMany(p => p.Tmcocatrangastos)
                    .HasForeignKey(d => new { d.Sucursal, d.TipoCcsap, d.Cuenta, d.ContadorCta })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCATRANGASTO_TCCOCACUENTAGASTOS");
            });

            modelBuilder.Entity<Tmcoctcontacto>(entity =>
            {
                entity.HasKey(e => new { e.Contacto, e.Sucursal, e.Cliente });

                entity.ToTable("TMCOCTCONTACTOS");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Puesto)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoctcontrato>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCTCONTRATO");

                entity.Property(e => e.Contrato)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoctcred>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TMCOCTCRED");

                entity.HasIndex(e => new { e.Sucursal, e.Cliente, e.SucQueCobra }, "I_PROC_FACPENDIENTES")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Sucursal, "NC_IX_Suc")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AmpliacionLimiteCredito).HasColumnType("money");

                entity.Property(e => e.DiaCobro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DiaRevision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnviarSvburo).HasColumnName("EnviarSVBuro");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.HorarioCobro)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.HorarioRevision)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificadorMercado)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.MotivoSuspension).IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoMercadoNavigation)
                    .WithMany(p => p.Tmcoctcreds)
                    .HasForeignKey(d => d.TipoMercado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTCRED_TCCOCATMERC");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.Tmcoctcred)
                    .HasForeignKey<Tmcoctcred>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTCRED_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcoctcredlc>(entity =>
            {
                entity.HasKey(e => e.IdLimiteCredito);

                entity.ToTable("TMCOCTCREDLC");

                entity.Property(e => e.IdLimiteCredito).HasColumnName("Id_LimiteCredito");

                entity.Property(e => e.Actual)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Anterior)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCambio).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctcred)
                    .WithMany(p => p.Tmcoctcredlcs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTCREDLC_TMCOCTCRED");
            });

            modelBuilder.Entity<Tmcoctcuentapago>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.NumCuentaPago, e.Moneda })
                    .HasName("PK_TMCOCTCUENTAPAGO_1");

                entity.ToTable("TMCOCTCUENTAPAGO");

                entity.Property(e => e.NumCuentaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBancoCte)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcoctcuentapagos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTCUENTAPAGO_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcoctgral>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_TMCOCTGRAL_1");

                entity.ToTable("TMCOCTGRAL");

                entity.HasIndex(e => new { e.Sucursal, e.Cliente }, "Clientes")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TipoReg, "IX_TMCOCTGRAL_TipoReg");

                entity.HasIndex(e => new { e.Sucursal, e.Rfc, e.FechaAltaEnvases }, "missing_index_1521_1520_TMCOCTGRAL");

                entity.HasIndex(e => e.TipoCte, "missing_index_1730_1729_TMCOCTGRAL");

                entity.HasIndex(e => e.ExentoRenta, "missing_index_1788_1787_TMCOCTGRAL");

                entity.HasIndex(e => new { e.Cliente, e.TipoCte }, "missing_index_2720_2719_TMCOCTGRAL");

                entity.HasIndex(e => new { e.Sucursal, e.TipoCte }, "missing_index_327_326_TMCOCTGRAL");

                entity.Property(e => e.Sucursal).HasComment("sucursal");

                entity.Property(e => e.Cliente).HasComment("cliente");

                entity.Property(e => e.AutorizacionSat)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("AutorizacionSAT");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CatGases)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CatMercancias)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveCliente)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteFactura).HasComment("es el ctefirma actual");

                entity.Property(e => e.ClienteViejo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("al insertar en tabla si existe rfc se pone como S");

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CondPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Efectivo E Contado C Credito R");

                entity.Property(e => e.CteEspecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Curp)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("CURP");

                entity.Property(e => e.Email)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExentoGm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ExentoGM")
                    .IsFixedLength(true);

                entity.Property(e => e.ExentoRenta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoCia)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("grupo de empresa");

                entity.Property(e => e.IvaCte).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MedioCapto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("publicidad");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NomComercial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NominaCapto).HasComment("numero de nomina del empleado que capto cliente");

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.See)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SolicitadoPor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("viene del extra2 actual. es solicitado por");

                entity.Property(e => e.SubTipoCte).HasComment("tipoparticular o subclasificacion tipo cliente");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("particular imss issste normal");

                entity.Property(e => e.TipoEjecutivoGas)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFac)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("maquilador pitex . tipos de retenciones");

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRetencion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CondPagoNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.CondPago)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTCONDPAGO");

                entity.HasOne(d => d.GrupoCiaNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.GrupoCia)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTGPOCIA");

                entity.HasOne(d => d.MedioCaptoNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.MedioCapto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTMCAPTO");

                entity.HasOne(d => d.SubTipoCteNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.SubTipoCte)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTSUBTCT");

                entity.HasOne(d => d.TipoCteNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.TipoCte)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTTC");

                entity.HasOne(d => d.TipoEjecutivoGasNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.TipoEjecutivoGas)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTTIPOEJEGAS");

                entity.HasOne(d => d.TipoRegNavigation)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => d.TipoReg)
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOFACATREGFIS");

                entity.HasOne(d => d.Tccoctsubgiro)
                    .WithMany(p => p.Tmcoctgrals)
                    .HasForeignKey(d => new { d.SubGiro, d.Giro })
                    .HasConstraintName("FK_TMCOCTGRAL_TCCOCTSUBGIRO");

                entity.HasOne(d => d.Tdcoencontrato)
                    .WithOne(p => p.Tmcoctgral)
                    .HasForeignKey<Tmcoctgral>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTGRAL_TDCOENCONTRATOS");
            });

            modelBuilder.Entity<Tmcoctpreesp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo, e.Moneda })
                    .HasName("PK_TMCOCTPREESP_1");

                entity.ToTable("TMCOCTPREESP");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia).HasColumnType("datetime");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoctpreesps)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTPREESP_TMCOINPROD01");

                entity.HasOne(d => d.MonedaNavigation)
                    .WithMany(p => p.Tmcoctpreesps)
                    .HasForeignKey(d => d.Moneda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTPREESP_TCCOGRTMON");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcoctpreesps)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTPREESP_TMCOCTGRAL");
            });

            modelBuilder.Entity<TmcoctpreespDiario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOCTPREESP_DIARIO");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior).HasColumnType("money");

                entity.Property(e => e.Tipomovimiento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcoctranlog>(entity =>
            {
                entity.HasKey(e => e.IdLog);

                entity.ToTable("TMCOCTRANLOG");

                entity.Property(e => e.Archivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Categoria)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Mensaje)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Proceso)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Tmcoctrefbanco>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Referencia, e.IdBanco })
                    .HasName("PK_TMCOCTBANCOS");

                entity.ToTable("TMCOCTREFBANCOS");

                entity.HasIndex(e => new { e.Cliente, e.IdBanco }, "TMCOCTREFBANCOS_IDX_Cliente_idBanco");

                entity.HasIndex(e => e.IdBanco, "missing_index_1786_1785_TMCOCTREFBANCOS");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.Clabe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CLABE");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.Tmcoctrefbancos)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTBANCOS_TCCOCTBANCOS");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcoctrefbancos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTREFBANCOS_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcoctremisione>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Remision, e.Codigo });

                entity.ToTable("TMCOCTREMISIONES");

                entity.Property(e => e.CantDevuelta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantFacturada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantRemision).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Iva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MotivoRetraso)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenCompra)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoctremisiones)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTREMISIONES_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcoctremprogramadum>(entity =>
            {
                entity.ToTable("TMCOCTREMPROGRAMADA");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CantidadProgramada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.FechaProgramada).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasMaxLength(300);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioModificador)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoctsolpreesp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo, e.Folio });

                entity.ToTable("TMCOCTSOLPREESP");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRespuestas).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimoCambio).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioAutorizado).HasColumnType("money");

                entity.Property(e => e.PrecioEspecialActual).HasColumnType("money");

                entity.Property(e => e.PrecioLista).HasColumnType("money");

                entity.Property(e => e.PrecioSolicitado).HasColumnType("money");

                entity.Property(e => e.See).HasColumnName("SEE");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia).HasColumnType("datetime");

                entity.Property(e => e.VolumenDeCompra).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoctsolpreesps)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTSOLPREESP_TMCOINPROD01");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcoctsolpreesps)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTSOLPREESP_TMCOCTGRAL");

                entity.HasOne(d => d.Tcconoemp)
                    .WithMany(p => p.Tmcoctsolpreesps)
                    .HasForeignKey(d => new { d.Sucursal, d.NumEmpleado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCTSOLPREESP_TCCONOEMP");
            });

            modelBuilder.Entity<Tmcocvepedidossap>(entity =>
            {
                entity.HasKey(e => new { e.TipoMovimiento, e.ClaveDoc });

                entity.ToTable("TMCOCVEPEDIDOSSAP");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveDoc)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasOne(d => d.ClaveDocNavigation)
                    .WithMany(p => p.Tmcocvepedidossaps)
                    .HasForeignKey(d => d.ClaveDoc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOCVEPEDIDOSSAP_TCCOCVEPEDIDOSSAP");
            });

            modelBuilder.Entity<Tmcoecpedido>(entity =>
            {
                entity.HasKey(e => new { e.Pedido, e.Cliente, e.Sucursal });

                entity.ToTable("TMCOECPEDIDOS");

                entity.Property(e => e.CantEfectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.ConektaRef)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.ImporteTotal).HasColumnType("money");

                entity.Property(e => e.MagentoId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MagentoID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.NoGuia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.PendienteNc).HasColumnName("PendienteNC");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefFormaPago).HasMaxLength(50);

                entity.Property(e => e.TipoNc).HasColumnName("TipoNC");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcoencampRec>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENCAMP_REC");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcoenconfirmamc>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Recibo, e.Mov, e.FechaMov, e.Codigo });

                entity.ToTable("TMCOENCONFIRMAMC");

                entity.Property(e => e.Mov)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimaAct).HasColumnType("datetime");

                entity.Property(e => e.MovCorpo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoencorpo>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Codigo, e.ReciboCorpo, e.Recibo, e.FechaMov, e.TipoMov });

                entity.ToTable("TMCOENCORPO");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.TipoMov)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdError).HasColumnName("Id_Error");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdErrorNavigation)
                    .WithMany(p => p.Tmcoencorpos)
                    .HasForeignKey(d => d.IdError)
                    .HasConstraintName("FK_TMCOENCORPO_TCCOENERRORCORPO");
            });

            modelBuilder.Entity<Tmcoeninventario>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Codigo, e.Fecha });

                entity.ToTable("TMCOENINVENTARIO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AmttoDebo).HasColumnName("AMttoDebo");

                entity.Property(e => e.AmttoNoDebo).HasColumnName("AMttoNoDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.SubTipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoeninventarios)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENINVENTARIO_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcoeninventario2022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOENINVENTARIO_2022");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AmttoDebo).HasColumnName("AMttoDebo");

                entity.Property(e => e.AmttoNoDebo).HasColumnName("AMttoNoDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.SubTipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoeninventario29052021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOENINVENTARIO_29052021");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AmttoDebo).HasColumnName("AMttoDebo");

                entity.Property(e => e.AmttoNoDebo).HasColumnName("AMttoNoDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.SubTipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnv)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoenmovsol>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Recibo, e.Referencia })
                    .HasName("PK_TMCOENMOVSOL_1")
                    .IsClustered(false);

                entity.ToTable("TMCOENMOVSOL");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Devolucion).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoenpagocomcamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOENPAGOCOMCAMP");

                entity.Property(e => e.Apagar).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoCam)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany()
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENPAGOCOMCAMP_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcoenpedidose>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Pedido, e.FechaPedido, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENPEDIDOSE");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Giro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tmcoenpedidoses)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENPEDIDOSE_TCCOGRSUC");
            });

            modelBuilder.Entity<Tmcoenpedidosn>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Pedido, e.FechaPedido, e.Codigo })
                    .HasName("PK_TMCOENPEDIDOSN_1");

                entity.ToTable("TMCOENPEDIDOSN");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tmcoenpedidosns)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENPEDIDOSN_TCCOGRSUC");
            });

            modelBuilder.Entity<Tmcoenv01>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENV01");

                entity.HasIndex(e => new { e.Cliente, e.Codigo }, "NonClusteredI-CodigoCliente");

                entity.HasIndex(e => e.EnvCont, "missing_index_1777_1776_TMCOENV01");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.EnvCont).HasDefaultValueSql("((0))");

                entity.Property(e => e.EnvProp).HasDefaultValueSql("((0))");

                entity.Property(e => e.EnvProv).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoenv01s)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENV01_TMCOINPROD01");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tmcoenv01s)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOEN01_TCCOGRSUC");
            });

            modelBuilder.Entity<TmcoenvcampLm>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENVCAMP_LM");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.TmcoenvcampLms)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVCAMP_LM_TMCOINPROD01");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.TmcoenvcampLms)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVCAMP_LM_TMCOCTGRAL");
            });

            modelBuilder.Entity<TmcoenvcampLm2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOENVCAMP_LM_2021");
            });

            modelBuilder.Entity<TmcoenvcampNc>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENVCAMP_NC");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.TmcoenvcampNcs)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVCAMP_NC_TMCOINPROD01");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.TmcoenvcampNcs)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVCAMP_NC_TMCOCTGRAL");
            });

            modelBuilder.Entity<TmcoenvcampNc2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmcoenvcamp_nc_2021");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");
            });

            modelBuilder.Entity<TmcoenvcampNcRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOENVCAMP_NC_RES");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");
            });

            modelBuilder.Entity<TmcoenvcampOx>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOENVCAMP_OX");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcoenvremisione>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Remision, e.FechaRemision, e.Codigo, e.Tipo });

                entity.ToTable("TMCOENVREMISIONES");

                entity.HasIndex(e => new { e.Status, e.Transmitir, e.Tipo, e.SucOrigen }, "missing_index_284_283_TMCOENVREMISIONES");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AreaFechaLiberacion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaLibere1).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion1).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EstatusMto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.MttoLibere)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MttoRecibi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nodo1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPar)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoenvremisiones)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVREMISIONES_TMCOINPROD01");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Tmcoenvremisiones)
                    .HasForeignKey(d => d.Status)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVREMISIONES_TCCOENVSTATUSREM");

                entity.HasOne(d => d.TipoNavigation)
                    .WithMany(p => p.Tmcoenvremisiones)
                    .HasForeignKey(d => d.Tipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVREMISIONES_TCCOENVTIPOREM");

                entity.HasOne(d => d.Tdcoenremisionesnodo)
                    .WithMany(p => p.Tmcoenvremisiones)
                    .HasForeignKey(d => new { d.Almacen, d.Remision, d.FechaRemision })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOENVREMISIONES_TDCOENREMISIONESNODO");
            });

            modelBuilder.Entity<Tmcoenvremisioneswm>(entity =>
            {
                entity.HasKey(e => new { e.IdConsecutivoMov, e.IdConsecutivoMovCod });

                entity.ToTable("TMCOENVREMISIONESWMS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.AreaFechaLiberacion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaLibere1).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion1).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EstatusMto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.MttoLibere)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MttoRecibi)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nodo1)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo2)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo3)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo4)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPar)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcoexppedido>(entity =>
            {
                entity.HasKey(e => e.Folio);

                entity.ToTable("TMCOEXPPEDIDOS");

                entity.Property(e => e.Folio).ValueGeneratedNever();

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Marcas).HasMaxLength(500);

                entity.Property(e => e.Notas).HasMaxLength(500);

                entity.Property(e => e.TiempoEntrega).HasMaxLength(50);

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcoexpprof>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Folio, e.Cliente });

                entity.ToTable("TMCOEXPPROF");

                entity.Property(e => e.Condiciones).HasMaxLength(300);

                entity.Property(e => e.Despedida).HasMaxLength(350);

                entity.Property(e => e.Embarque).HasMaxLength(350);

                entity.Property(e => e.Empaque).HasMaxLength(350);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormaPago).HasMaxLength(120);

                entity.Property(e => e.Idioma).HasMaxLength(3);

                entity.Property(e => e.Moneda).HasMaxLength(5);

                entity.Property(e => e.NombreFirma).HasMaxLength(50);

                entity.Property(e => e.Notas).HasMaxLength(350);

                entity.Property(e => e.OrdenTrabajo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Presentacion).HasMaxLength(350);

                entity.Property(e => e.Puerto).HasMaxLength(50);

                entity.Property(e => e.PuestoFirma).HasMaxLength(50);

                entity.Property(e => e.TerminoVenta).HasMaxLength(30);

                entity.Property(e => e.TiempoEntrega).HasMaxLength(55);

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Vigencia).HasMaxLength(55);

                entity.Property(e => e.ZonaCotizar).HasMaxLength(30);
            });

            modelBuilder.Entity<Tmcofaaddendum>(entity =>
            {
                entity.HasKey(e => e.IdAddenda)
                    .HasName("PK_Addenda");

                entity.ToTable("TMCOFAAddenda");

                entity.HasIndex(e => new { e.NombreAddenda, e.IdTipoAddenda }, "UK_AddendaTipo")
                    .IsUnique();

                entity.Property(e => e.NombreAddenda)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NombreNodo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofaarchivosrem>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Remision, e.Cliente, e.NombreArchivo })
                    .IsClustered(false);

                entity.ToTable("TMCOFAARCHIVOSREM");

                entity.Property(e => e.NombreArchivo).HasMaxLength(50);

                entity.Property(e => e.ArchivoZip).IsRequired();

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBorrado).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.Frente).HasMaxLength(30);

                entity.Property(e => e.RutaArchivo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcofacamposaddendum>(entity =>
            {
                entity.HasKey(e => new { e.ClaveAddenda, e.TipoAddenda, e.IdCampoAddenda });

                entity.ToTable("TMCOFACAMPOSADDENDA");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdCampoAddenda).HasColumnName("idCampoAddenda");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EtiquetaPantalla)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreXml)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NombreXML");

                entity.Property(e => e.RequeridoXml).HasColumnName("RequeridoXML");

                entity.Property(e => e.TipoControl)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tccofaaddendum)
                    .WithMany(p => p.Tmcofacamposaddenda)
                    .HasForeignKey(d => new { d.ClaveAddenda, d.TipoAddenda })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFACAMPOSADDENDA_TCCOFAADDENDA");
            });

            modelBuilder.Entity<Tmcofacodprodcte>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOFACODPRODCTE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.UnidadMedida)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcofacodprodctes)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFACODPRODCTE_TMCOINPROD01");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcofacodprodctes)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFACODPRODCTE_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcofacodprodexp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOFACODPRODEXP");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.UnidadMedida)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofaconsumo>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo });

                entity.ToTable("TMCOFACONSUMOS");

                entity.HasIndex(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Codigo }, "Index")
                    .IsUnique();

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaConsumo).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofacontrato>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Contrato, e.Partida, e.Codigo });

                entity.ToTable("TMCOFACONTRATOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Afianzadora)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Alias)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Facturado).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFinContrato).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioContrato).HasColumnType("datetime");

                entity.Property(e => e.ImporteCodigo).HasColumnType("money");

                entity.Property(e => e.ImporteContratoCodigo).HasColumnType("money");

                entity.Property(e => e.MontoContrato).HasColumnType("money");

                entity.Property(e => e.NombreAfianzadora)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Solicito)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcofacontratos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFACONTRATOS_TMCOCTGRAL");
            });

            modelBuilder.Entity<TmcofacontratosFeb2017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOFACONTRATOS_Feb2017");

                entity.Property(e => e.Afianzadora)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Alias)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Facturado).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFinContrato).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioContrato).HasColumnType("datetime");

                entity.Property(e => e.ImporteCodigo).HasColumnType("money");

                entity.Property(e => e.ImporteContratoCodigo).HasColumnType("money");

                entity.Property(e => e.MontoContrato).HasColumnType("money");

                entity.Property(e => e.NombreAfianzadora)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Solicito)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcofacontratosResp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmcofacontratos_resp");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Contrato)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Facturado).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFinContrato).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioContrato).HasColumnType("datetime");

                entity.Property(e => e.ImporteCodigo).HasColumnType("money");

                entity.Property(e => e.ImporteContratoCodigo).HasColumnType("money");

                entity.Property(e => e.MontoContrato).HasColumnType("money");

                entity.Property(e => e.Solicito)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofadatoscomplemento>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_TMCOFADATOSCOMPLEMENTO_1");

                entity.ToTable("TMCOFADATOSCOMPLEMENTO");

                entity.Property(e => e.ClaveAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailEnvioFe)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EmailEnvioFE");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfcbanco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RFCBanco");
            });

            modelBuilder.Entity<Tmcofadatosfacturacion>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente })
                    .HasName("PK_TMCOFADATOSFACTURACION_1");

                entity.ToTable("TMCOFADATOSFACTURACION");

                entity.Property(e => e.ClaveAddenda)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailEnvioFe)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EmailEnvioFE");

                entity.Property(e => e.QuitarAddendaIt).HasColumnName("QuitarAddendaIT");
            });

            modelBuilder.Entity<Tmcofamenucatalogoaddendum>(entity =>
            {
                entity.HasKey(e => e.IdMenu);

                entity.ToTable("TMCOFAMENUCATALOGOADDENDA");

                entity.Property(e => e.IdMenu)
                    .ValueGeneratedNever()
                    .HasColumnName("idMenu");

                entity.Property(e => e.ClaveAddenda)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMenu)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofamovilapartado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOFAMOVILAPARTADO");

                entity.Property(e => e.Apartada).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofamtro>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente });

                entity.ToTable("TMCOFAMTRO");

                entity.HasIndex(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.Ruta, e.Reparto, e.FechaRuteo }, "NonClusteredIndex-20141230-151557");

                entity.HasIndex(e => e.TipoDocumento, "TMCOFAMTRO_IDX_Sucursal_Folio_Cliente_FechaFE");

                entity.HasIndex(e => new { e.TipoDocumento, e.Folio }, "_dta_index_TMCOFAMTRO_11_2059154381__K2_K6_1_4_7_61");

                entity.HasIndex(e => e.TipoCambio, "_dta_index_TMCOFAMTRO_11_2059154381__K47");

                entity.HasIndex(e => new { e.Folio, e.Sucursal, e.TipoDocumento, e.Cliente }, "_dta_index_TMCOFAMTRO_11_2059154381__K6_K1_K2_K7");

                entity.HasIndex(e => new { e.Folio, e.Sucursal, e.TipoDocumento, e.Cliente, e.TasaIva }, "_dta_index_TMCOFAMTRO_11_2059154381__K6_K1_K2_K7_K41_5_10_24_25_26_27_30_37_40_42_43_44_45_47_49_51_52_57_62")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TipoDocumento, "missing_index_1651_1650_TMCOFAMTRO");

                entity.HasIndex(e => e.TipoDocumento, "missing_index_1878_1877_TMCOFAMTRO");

                entity.HasIndex(e => new { e.Sucursal, e.TipoDocumento, e.PedidoFactura, e.ClaveFacturacion }, "missing_index_2890_2889_TMCOFAMTRO");

                entity.HasIndex(e => new { e.Cliente, e.PedidoFactura }, "missing_index_2901_2900_TMCOFAMTRO");

                entity.HasIndex(e => new { e.TipoDocumento, e.TipoPago }, "missing_index_374_373_TMCOFAMTRO");

                entity.HasIndex(e => e.TipoDocumento, "missing_index_5352_5351_TMCOFAMTRO");

                entity.HasIndex(e => new { e.TipoDocumento, e.NumMotivo }, "missing_index_788_787_TMCOFAMTRO");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresAddenda).IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<TmcofamtroExt>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente });

                entity.ToTable("TMCOFAMTRO_EXT");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.MotivoClave)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofamtropedido>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente });

                entity.ToTable("TMCOFAMTROPEDIDOS");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutCancelacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutExtemporaneo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cancelo)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DoctoEmitir)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Extemporaneo).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.GrupoRuta)
                    .HasMaxLength(200)
                    .HasColumnName("Grupo_Ruta");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PedidoStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioPedido)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUID")
                    .IsFixedLength(true);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<TmcofamtropedidosPv>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente });

                entity.ToTable("TMCOFAMTROPEDIDOS_PV");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoBo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoBO")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<TmcofamtropedidosTe>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente });

                entity.ToTable("TMCOFAMTROPEDIDOS_TE");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAut).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAut)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<Tmcofarequisito>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.NoRequisito });

                entity.ToTable("TMCOFAREQUISITOS");

                entity.Property(e => e.NoRequisito).ValueGeneratedOnAdd();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcoctgral)
                    .WithMany(p => p.Tmcofarequisitos)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFAREQUISITOS_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcofaruta>(entity =>
            {
                entity.HasKey(e => new { e.Ruta, e.Tipo })
                    .HasName("PK_TMCOFARUTAS_1");

                entity.ToTable("TMCOFARUTAS");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionRuta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcofarutasBorrar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOFARUTAS_borrar");

                entity.Property(e => e.DescripcionRuta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcofaruteo>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.Identificador, e.TipoRuteo, e.TipoProducto })
                    .HasName("PK_TMCOFARUTEOCLIENTE");

                entity.ToTable("TMCOFARUTEO");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("identificador");

                entity.Property(e => e.TipoRuteo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProducto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Tmcofaruta)
                    .WithMany(p => p.Tmcofaruteos)
                    .HasForeignKey(d => new { d.Ruta, d.TipoProducto })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFARUTEO_TMCOFARUTAS");
            });

            modelBuilder.Entity<Tmcofauuid>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Folio, e.TipoMovimiento, e.Uuid });

                entity.ToTable("TMCOFAUUID");

                entity.HasIndex(e => new { e.Sucursal, e.Cliente, e.Folio, e.TipoMovimiento, e.Uuid }, "UUIDRel")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Folio, e.Uuid }, "missing_index_1067_1066_TMCOFAUUID");

                entity.Property(e => e.TipoMovimiento).HasMaxLength(5);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(36)
                    .HasColumnName("UUID");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.MetodoPago)
                    .HasMaxLength(10)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcofavalorescatalogosaddendum>(entity =>
            {
                entity.HasKey(e => new { e.IdMenu, e.IdCampos, e.IdValor, e.Valor })
                    .HasName("PK_TMCOFAVALORESCATALOGOSADDENDA_1");

                entity.ToTable("TMCOFAVALORESCATALOGOSADDENDA");

                entity.Property(e => e.IdMenu).HasColumnName("idMenu");

                entity.Property(e => e.IdCampos).HasColumnName("idCampos");

                entity.Property(e => e.IdValor).HasColumnName("idValor");

                entity.Property(e => e.Valor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.Tmcofavalorescatalogosaddenda)
                    .HasForeignKey(d => new { d.IdMenu, d.IdCampos })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOFAVALORESCATALOGOSADDENDA_TDCOFACATALOGOSADDENDA");
            });

            modelBuilder.Entity<Tmcogrbavanzadum>(entity =>
            {
                entity.HasKey(e => e.IdConsultaAvanzada);

                entity.ToTable("TMCOGRBAVANZADA");

                entity.Property(e => e.CamposAocultar)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CamposAOcultar");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.OrdenCampos)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcogrbusq>(entity =>
            {
                entity.HasKey(e => e.IdBusquedaAbierta);

                entity.ToTable("TMCOGRBUSQ");

                entity.Property(e => e.IdBusquedaAbierta).HasColumnName("Id_BusquedaAbierta");

                entity.Property(e => e.Campos)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.CamposMostrados)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CamposOrden)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Operadores)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valores)
                    .IsRequired()
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Tmcogrcontfianza>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Tipo });

                entity.ToTable("TMCOGRCONTFIANZAS");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Afianzadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConGases)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConLiquidos)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConOxidom)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Fianza)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcogrcotizacion>(entity =>
            {
                entity.HasKey(e => e.NoCotizacion);

                entity.ToTable("TMCOGRCOTIZACION");

                entity.Property(e => e.NoCotizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Atencion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contrasenia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cp)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CP");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalDevolucion).HasColumnType("money");

                entity.Property(e => e.TotalLentaRotacion).HasColumnType("money");

                entity.Property(e => e.TotalMantenimiento).HasColumnType("money");

                entity.Property(e => e.TotalSee)
                    .HasColumnType("money")
                    .HasColumnName("TotalSEE");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcogrnotificacione>(entity =>
            {
                entity.HasKey(e => e.IdNotificacion);

                entity.ToTable("TMCOGRNotificaciones");

                entity.Property(e => e.IdNotificacion).HasComment("Identificador del registro");

                entity.Property(e => e.Asunto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Mensage)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Vigencia).HasColumnType("datetime");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Tmcogrnotificaciones)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOGRNotificaciones_TCIDUsuario");
            });

            modelBuilder.Entity<Tmcogrsucip>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOGRSUCIP");

                entity.Property(e => e.Ip)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.NombreServidor)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcogrtokenaut>(entity =>
            {
                entity.ToTable("TMCOGRTOKENAUT");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcogrtraslado>(entity =>
            {
                entity.ToTable("TMCOGRTRASLADO");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CodigoCol)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NumExt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCaptura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoidcierre>(entity =>
            {
                entity.ToTable("TMCOIDCIERRE");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Asignacion)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cbsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CBSap");

                entity.Property(e => e.Ccsap)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.ClaseAux)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveMon)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Clave_Mon");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescPartida)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaBase)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.IndicadorIva)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IndicadorIVA")
                    .IsFixedLength(true);

                entity.Property(e => e.MetodoPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenInterna)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RefBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoImporte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.UsarPoliza)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoidcuadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOIDCUADRE");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePoliza).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ImporteXml)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ImporteXML");
            });

            modelBuilder.Entity<Tmcoidficha>(entity =>
            {
                entity.HasKey(e => e.IdFicha);

                entity.ToTable("TMCOIDFICHAS");

                entity.Property(e => e.Asignacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveMon)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Clave_Mon");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionFicha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.ImporteDeposito).HasColumnType("money");

                entity.Property(e => e.MetodoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoFicha)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoidfichasrec>(entity =>
            {
                entity.HasKey(e => e.NoFicha);

                entity.ToTable("TMCOIDFICHASREC");

                entity.Property(e => e.NoFicha)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Boleta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaBoleta).HasColumnType("datetime");

                entity.Property(e => e.ImporteDeposito).HasColumnType("money");

                entity.Property(e => e.MetodoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoSello)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoidoperacione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOIDOPERACIONES");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinconsolidadodi>(entity =>
            {
                entity.HasKey(e => e.Orden);

                entity.ToTable("TMCOINCONSOLIDADODIS");

                entity.Property(e => e.Orden).ValueGeneratedNever();

                entity.Property(e => e.C1)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Campo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Total)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoindiainv01>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINDIAINV01");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.DiasInventario).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Existencia)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("existencia");
            });

            modelBuilder.Entity<Tmcoindistribucion>(entity =>
            {
                entity.HasKey(e => e.IdDistMatriz)
                    .HasName("PK_TMCOINDISTMATRIZ");

                entity.ToTable("TMCOINDISTRIBUCION");

                entity.Property(e => e.IdDistMatriz).HasColumnName("Id_DistMatriz");

                entity.Property(e => e.CantSurtida).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadSolicitada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Envases).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.Metros).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinembarque>(entity =>
            {
                entity.HasKey(e => e.FolioEmbarque)
                    .HasName("PK_TMCOINEMBARQUE_1");

                entity.ToTable("TMCOINEMBARQUE");

                entity.Property(e => e.FolioEmbarque).ValueGeneratedNever();

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCol)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoP)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descguiaiden)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("descguiaiden");

                entity.Property(e => e.Distanciarecorrida)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("distanciarecorrida")
                    .IsFixedLength(true);

                entity.Property(e => e.Entradasalidamerc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("entradasalidamerc")
                    .IsFixedLength(true);

                entity.Property(e => e.Esrecolecciondevolucion).HasColumnName("esrecolecciondevolucion");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Idccp)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("idccp");

                entity.Property(e => e.Imagen1).HasColumnType("image");

                entity.Property(e => e.Imagen2).HasColumnType("image");

                entity.Property(e => e.Imagen3).HasColumnType("image");

                entity.Property(e => e.Imagen4).HasColumnType("image");

                entity.Property(e => e.NoEconomico1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nombreaseg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("nombreaseg");

                entity.Property(e => e.NumExt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Numguiaiden)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numguiaiden");

                entity.Property(e => e.Numpedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numpedimento");

                entity.Property(e => e.Numpermisosct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("numpermisosct");

                entity.Property(e => e.Numpolizaseguro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numpolizaseguro");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Permsct)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("permsct")
                    .IsFixedLength(true);

                entity.Property(e => e.Sello)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TieneXml)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TieneXML")
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Tipoestacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipoestacion")
                    .IsFixedLength(true);

                entity.Property(e => e.Transpinternac)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("transpinternac")
                    .IsFixedLength(true);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("UUID")
                    .IsFixedLength(true);

                entity.Property(e => e.Uusario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Viaentradasalida)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("viaentradasalida")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcoinfactant>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.TipoMovimiento, e.Factura, e.Folio, e.NotaCredito, e.NotaCargo, e.Cliente, e.Codigo });

                entity.ToTable("TMCOINFACTANT");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcoinfactantResp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINFACTANT_resp");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinmaxurb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINMAXURB");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaximoUrb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinpedfacelec>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Provedor, e.Pedido, e.Factura, e.Codigo, e.Fecha });

                entity.ToTable("TMCOINPEDFACELEC");

                entity.Property(e => e.Factura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.CantSolicitada).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CantSurtida)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Iva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVA");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Tmcoinpedfacelectmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINPEDFACELECTMP");

                entity.Property(e => e.CantSolicitada)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CantSurtida)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Factura)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Importe)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Precio)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tmcoinpedidorem>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Pedido, e.FechaPedido, e.Codigo, e.Movimiento });

                entity.ToTable("TMCOINPEDIDOREM");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Movimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.Metros).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinpedimento>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.NumPedimento, e.NumAduana, e.FechaImportacion, e.Codigo, e.TipoMovimiento, e.Folio, e.NumeroPartida })
                    .IsClustered(false);

                entity.ToTable("TMCOINPEDIMENTO");

                entity.HasIndex(e => new { e.Almacen, e.Codigo, e.NumPedimento, e.NumAduana }, "dba_index_1268_1267_TMCOINPEDIMENTO");

                entity.HasIndex(e => new { e.Almacen, e.Codigo, e.TipoMovimiento, e.Folio }, "dba_index_2884_2883_TMCOINPEDIMENTO");

                entity.HasIndex(e => new { e.NumPedimento, e.NumAduana, e.Identifica }, "missing_index_620_619_TMCOINPEDIMENTO");

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Identifica)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinpedimento1>(entity =>
            {
                entity.HasKey(e => e.IdConsecutivoPedimento)
                    .IsClustered(false);

                entity.ToTable("TMCOINPEDIMENTOS");

                entity.Property(e => e.IdConsecutivoPedimento).HasColumnName("Id_ConsecutivoPedimento");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcoinpedimentoResp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINPEDIMENTO_RESP2");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.Identifica)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinpedmerc>(entity =>
            {
                entity.HasKey(e => new { e.TipoPedido, e.AlmacenCliente, e.Proveedor, e.Pedido, e.Codigo, e.Partida, e.FechaPedido });

                entity.ToTable("TMCOINPEDMERC");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.CantApartada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantProvSap)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("CantProvSAP");

                entity.Property(e => e.CantSolicitada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantSurtida).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ClasificacionPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveEnvio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DoctoSap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DoctoSAP");

                entity.Property(e => e.Extraordinario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCencelada).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaStatus).HasColumnType("datetime");

                entity.Property(e => e.InterfazSap).HasColumnName("InterfazSAP");

                entity.Property(e => e.OrgCompraSap)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OrgCompraSAP");

                entity.Property(e => e.PartidaCancelada).HasDefaultValueSql("((0))");

                entity.Property(e => e.PartidaStatus).HasDefaultValueSql("((4))");

                entity.Property(e => e.TipoPedidoSap)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TipoPedidoSAP");

                entity.Property(e => e.UmprovSap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UMProvSAP");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioLibera)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinpedpendenvsap>(entity =>
            {
                entity.HasKey(e => e.IdEnvio);

                entity.ToTable("TMCOINPEDPENDENVSAP");

                entity.Property(e => e.IdEnvio).HasColumnName("Id_Envio");

                entity.Property(e => e.DoctoSap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DoctoSAP");

                entity.Property(e => e.Ebeln)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EBELN");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.MensajeWs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MensajeWS");

                entity.Property(e => e.UltimoIntento).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcoinpedpreentradum>(entity =>
            {
                entity.HasKey(e => new { e.DoctoSap, e.DoctoPreEntrada, e.Partida, e.Codigo })
                    .IsClustered(false);

                entity.ToTable("TMCOINPEDPREENTRADA");

                entity.Property(e => e.DoctoSap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DoctoSAP");

                entity.Property(e => e.DoctoPreEntrada)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CantProvSap)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("CantProvSAP");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Procesado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod01>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TMCOINPROD01");

                entity.HasIndex(e => e.EmpaqueProv, "IX_EmpProv");

                entity.HasIndex(e => e.Codigo, "IX_TMCOINPROD01");

                entity.HasIndex(e => e.TipoProd, "IX_TipoProd");

                entity.HasIndex(e => e.CodElect, "_dta_index_TMCOINPROD01_11_471672728__K19");

                entity.HasIndex(e => new { e.Codigo, e.TipoProd }, "_dta_index_TMCOINPROD01_11_471672728__K1_K5");

                entity.HasIndex(e => new { e.LineaAgrupa, e.Codigo }, "_dta_index_TMCOINPROD01_11_471672728__K7_K1");

                entity.HasIndex(e => new { e.LineaAgrupa, e.TipoProd, e.Codigo }, "_dta_index_TMCOINPROD01_11_471672728__K7_K5_K1");

                entity.HasIndex(e => e.CveOxidom, "missing_index_545_544_TMCOINPROD01");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Activo).HasComment("Usado para identificar si el producto es medicamento, y en caso de serlo  no debera aplicarse IVA");

                entity.Property(e => e.AgrupaExist).HasComment("Codigo de donde toma la existencia");

                entity.Property(e => e.AlmacenSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Alto)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("alto");

                entity.Property(e => e.Ancho)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("ancho");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Clasificacion)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Este campo identifica la clasificación asignada al código: LB = Lista Basica, BA = Baja, PA = Sobre pedido A, PB = Sobre pedido B");

                entity.Property(e => e.CodBar)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDotacion).HasComment("corresponde al codigo como se maneja en envases");

                entity.Property(e => e.CodigoSat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CodigoSAT");

                entity.Property(e => e.Costo)
                    .HasColumnType("money")
                    .HasComment("Campo controlado con seguridad para su visualización");

                entity.Property(e => e.CveOxidom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("C = consumible,  R = Equipo en renta");

                entity.Property(e => e.DescLarga)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaqueProv).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueVta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Exportacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioPrecio).HasColumnType("datetime");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ivaespecial).HasColumnName("IVAEspecial");

                entity.Property(e => e.Ivaproducto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVAProducto");

                entity.Property(e => e.JerarquiaSap)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("JerarquiaSAP");

                entity.Property(e => e.Largo)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("largo");

                entity.Property(e => e.LineaVta).HasComment("El nombre de la linea se encuentra en la tabla bcbkm03");

                entity.Property(e => e.Material)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("MXP,DLS,EUR");

                entity.Property(e => e.NaturalezaQuim)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumParte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrgCompraSap)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OrgCompraSAP")
                    .IsFixedLength(true);

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Origen de producto: N= Nacional, I = Importacion");

                entity.Property(e => e.PantallaMedidas).HasComment("Este campo se usa para identificar los códigos base para el manejo de diferentes capacidades ej. 101 Oxigeno Industrial (Codigo dotación) y facturan 101060,101085,101090.etc.");

                entity.Property(e => e.Peso)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("peso");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnt).HasColumnType("money");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.PrecioPiso).HasColumnType("money");

                entity.Property(e => e.Tecnologia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd).HasComment("En este campo  se identifica el tipo de producto al que corresponde el código: G = Gases , E = Gases especiales, L = Liquidos, S = Servicios");

                entity.Property(e => e.Um).HasComment("EQUIPO,KILO,LITROS,CAJA,METRO,M3,SERVICIO, ROLLO,GALON,PIEZA,LIBRAS,JUEGO,TAMBO,PAR, PAQUETE,CARGA\r\n");

                entity.Property(e => e.UnidadEmp).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Varios)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Volumen)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("volumen");

                entity.HasOne(d => d.LineaVtaNavigation)
                    .WithMany(p => p.Tmcoinprod01s)
                    .HasForeignKey(d => d.LineaVta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPROD01_TCGRLINEAS");

                entity.HasOne(d => d.TipoEnvaseNavigation)
                    .WithMany(p => p.Tmcoinprod01s)
                    .HasForeignKey(d => d.TipoEnvase)
                    .HasConstraintName("FK_TMCOINPROD01_TCCOINTENV");

                entity.HasOne(d => d.TipoProdNavigation)
                    .WithMany(p => p.Tmcoinprod01s)
                    .HasForeignKey(d => d.TipoProd)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPROD01_TCCOINTIPOPROD");

                entity.HasOne(d => d.UmNavigation)
                    .WithMany(p => p.Tmcoinprod01s)
                    .HasForeignKey(d => d.Um)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPROD01_TCCOINUM");

                entity.HasOne(d => d.VariosNavigation)
                    .WithMany(p => p.Tmcoinprod01s)
                    .HasForeignKey(d => d.Varios)
                    .HasConstraintName("FK_TMCOINPROD01_TCCOINPRODCLAVE");
            });

            modelBuilder.Entity<Tmcoinprod01Aumpre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINPROD01_AUMPRE");

                entity.Property(e => e.FechaActualiza).HasColumnType("datetime");

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(10, 1)");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod01Aumpreant>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINPROD01_AUMPREANT");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioPrecio).HasColumnType("datetime");

                entity.Property(e => e.FechaRespaldo).HasColumnType("datetime");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnt).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAudit)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod01Carga>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_TMCOINPROD01_CARGA_ACT");

                entity.ToTable("TMCOINPROD01_CARGA");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AlmacenSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Alto)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("alto");

                entity.Property(e => e.Ancho)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("ancho");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodBar)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CodigoSAT");

                entity.Property(e => e.Costo).HasColumnType("money");

                entity.Property(e => e.CveOxidom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescLarga)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaqueProv).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueVta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Exportacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioPrecio).HasColumnType("datetime");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ivaespecial).HasColumnName("IVAEspecial");

                entity.Property(e => e.Ivaproducto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVAProducto");

                entity.Property(e => e.JerarquiaSap)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("JerarquiaSAP");

                entity.Property(e => e.Largo)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("largo");

                entity.Property(e => e.Material)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NaturalezaQuim)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumParte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Peso)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("peso");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnt).HasColumnType("money");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.PrecioPiso).HasColumnType("money");

                entity.Property(e => e.Tecnologia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnidadEmp).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Varios)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Volumen)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("volumen");
            });

            modelBuilder.Entity<Tmcoinprod01CargaOld>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_TMCOINPROD01_CARGA_OLD");

                entity.ToTable("TMCOINPROD01_CARGA_old");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AlmacenSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Alto)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("alto");

                entity.Property(e => e.Ancho)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("ancho");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodBar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CodigoSAT");

                entity.Property(e => e.Costo).HasColumnType("money");

                entity.Property(e => e.CveOxidom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescLarga)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaqueProv).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueVta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Exportacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioPrecio).HasColumnType("datetime");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Ivaespecial).HasColumnName("IVAEspecial");

                entity.Property(e => e.Ivaproducto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVAProducto");

                entity.Property(e => e.Largo)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("largo");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumParte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Peso)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("peso");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnt).HasColumnType("money");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.PrecioPiso).HasColumnType("money");

                entity.Property(e => e.UnidadEmp).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Varios)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Volumen)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("volumen");
            });

            modelBuilder.Entity<Tmcoinprod01CargaOld2>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_TMCOINPROD01_CARGA_ACT2");

                entity.ToTable("TMCOINPROD01_CARGA_old2");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AlmacenSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Alto)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("alto");

                entity.Property(e => e.Ancho)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("ancho");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodBar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoSat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CodigoSAT");

                entity.Property(e => e.Costo).HasColumnType("money");

                entity.Property(e => e.CveOxidom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescLarga)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaqueProv).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.EmpaqueVta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Exportacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaCambioPrecio).HasColumnType("datetime");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Ivaespecial).HasColumnName("IVAEspecial");

                entity.Property(e => e.Ivaproducto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVAProducto");

                entity.Property(e => e.Largo)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("largo");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumParte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Peso)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("peso");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnt).HasColumnType("money");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.PrecioPiso).HasColumnType("money");

                entity.Property(e => e.UnidadEmp).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Varios)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Volumen)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("volumen");
            });

            modelBuilder.Entity<Tmcoinprod02>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo });

                entity.ToTable("TMCOINPROD02");

                entity.HasIndex(e => e.Codigo, "IX_Codigo");

                entity.HasIndex(e => e.Factor, "IX_Factor");

                entity.HasIndex(e => e.Almacen, "IX_TMCOINPROD02");

                entity.Property(e => e.ApartadoFac).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoMovil)
                    .HasColumnType("decimal(24, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ApartadoSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CcpideGas).HasColumnName("CCpideGas");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaxAnt).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.AlmacenNavigation)
                    .WithMany(p => p.Tmcoinprod02s)
                    .HasForeignKey(d => d.Almacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPROD02_TCCOGRSUC");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoinprod02s)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPROD02_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcoinprod02BakInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOINPROD02_BakInv");

                entity.Property(e => e.ApartadoFac).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoMovil).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CcpideGas).HasColumnName("CCpideGas");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaxAnt).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod02Carga>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo })
                    .HasName("PK_TMCOINPROD02_CARGA_ACT");

                entity.ToTable("TMCOINPROD02_CARGA");

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApartadoFac).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoMovil).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CcpideGas).HasColumnName("CCpideGas");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaxAnt).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod02CargaOld>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo })
                    .HasName("PK_TMCOINPROD02_CARGA_OLD");

                entity.ToTable("TMCOINPROD02_CARGA_old");

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApartadoFac).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoMovil).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CcpideGas).HasColumnName("CCpideGas");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaxAnt).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprod02CargaOld2>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo })
                    .HasName("PK_TMCOINPROD02_CARGA_ACT2");

                entity.ToTable("TMCOINPROD02_CARGA_old2");

                entity.Property(e => e.Accion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApartadoFac).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoMovil).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ApartadoSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CcpideGas).HasColumnName("CCpideGas");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.MaxAnt).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinprodexp>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo, e.SubCodigo });

                entity.ToTable("TMCOINPRODEXP");

                entity.Property(e => e.CantidadTigie)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("CantidadTIGIE");

                entity.Property(e => e.CostoCompra).HasColumnType("money");

                entity.Property(e => e.DescripcionEng).HasMaxLength(2500);

                entity.Property(e => e.DescripcionEsp).HasMaxLength(2500);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FraccionArancelaria).HasMaxLength(18);

                entity.Property(e => e.Marca).HasMaxLength(50);

                entity.Property(e => e.MinimaCompra).HasColumnType("money");

                entity.Property(e => e.Modelo).HasMaxLength(50);

                entity.Property(e => e.Moneda).HasMaxLength(3);

                entity.Property(e => e.Origen).HasMaxLength(50);

                entity.Property(e => e.PCfr).HasColumnName("P_CFR");

                entity.Property(e => e.PCif).HasColumnName("P_CIF");

                entity.Property(e => e.PFob).HasColumnName("P_FOB");

                entity.Property(e => e.POtros).HasColumnName("P_Otros");

                entity.Property(e => e.PrecioTigie)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PrecioTIGIE");

                entity.Property(e => e.PvCentroAmerica)
                    .HasColumnType("money")
                    .HasColumnName("PV_CentroAmerica");

                entity.Property(e => e.PvCuba)
                    .HasColumnType("money")
                    .HasColumnName("PV_Cuba");

                entity.Property(e => e.PvOtros)
                    .HasColumnType("money")
                    .HasColumnName("PV_Otros");

                entity.Property(e => e.PvSudAmerica)
                    .HasColumnType("money")
                    .HasColumnName("PV_SudAmerica");

                entity.Property(e => e.PvUsa)
                    .HasColumnType("money")
                    .HasColumnName("PV_USA");

                entity.Property(e => e.SubModelo).HasMaxLength(50);

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .HasColumnName("UM");

                entity.Property(e => e.Umi)
                    .HasMaxLength(20)
                    .HasColumnName("UMI");

                entity.Property(e => e.Umtigie)
                    .HasMaxLength(20)
                    .HasColumnName("UMTIGIE");

                entity.Property(e => e.UsuarioAlta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UsuarioAudit)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.AlmacenNavigation)
                    .WithMany(p => p.Tmcoinprodexps)
                    .HasForeignKey(d => d.Almacen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPRODEXP_TCCOGRSUC");

                entity.HasOne(d => d.SubCodigoNavigation)
                    .WithMany(p => p.Tmcoinprodexps)
                    .HasForeignKey(d => d.SubCodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPRODEXP_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcoinproduccion>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Thermo });

                entity.ToTable("TMCOINPRODUCCION");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("decimal(24, 3)")
                    .HasDefaultValueSql("((-1.0))");

                entity.Property(e => e.Capacidad)
                    .HasColumnType("decimal(24, 3)")
                    .HasDefaultValueSql("((-1.0))");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Tmcoinproduccions)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOINPRODUCCION_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcoinserieequipo>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Codigo, e.NoSerie, e.TipoSerie });

                entity.ToTable("TMCOINSERIEEQUIPOS");

                entity.Property(e => e.NoSerie).HasMaxLength(50);

                entity.Property(e => e.TipoSerie).HasMaxLength(1);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoUbicacion).HasMaxLength(3);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcoinsolmov>(entity =>
            {
                entity.HasKey(e => e.IdSol);

                entity.ToTable("TMCOINSOLMOV");

                entity.Property(e => e.IdSol).HasColumnName("idSol");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRespuesta).HasColumnType("datetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("datetime");

                entity.Property(e => e.Observaciones).HasMaxLength(250);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinsolrechazo>(entity =>
            {
                entity.HasKey(e => e.IdSolRechazo);

                entity.ToTable("TMCOINSOLRECHAZO");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.CantidadFacProv).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Dcorrecto).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCostos).HasColumnType("datetime");

                entity.Property(e => e.IdMotRechazo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObsResCostos)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pedido)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Remision)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SolPdf)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SolPDF");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioResCostos)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcoinsurpedmer>(entity =>
            {
                entity.HasKey(e => new { e.IdPedido, e.Sucursal, e.FolioPedido, e.Codigo, e.Partida });

                entity.ToTable("TMCOINSURPEDMER");

                entity.Property(e => e.IdPedido)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idPedido");

                entity.Property(e => e.Apartado).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Bo)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("BO");

                entity.Property(e => e.CantSol).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CantSurt).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaquePedido).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcoinsurpedmerNoenviuarversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmcoinsurpedmer_noenviuarversion");

                entity.Property(e => e.CantSol).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CantSurt).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcointransito>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Partida, e.Codigo, e.TipoMovimiento, e.Folio, e.ClienteSuc, e.FechaMov, e.NoSerie, e.Transmision });

                entity.ToTable("TMCOINTRANSITO");

                entity.HasIndex(e => new { e.TipoMovimiento, e.Transmision, e.FechaMov }, "missing_index_1526_1525_TMCOINTRANSITO");

                entity.HasIndex(e => new { e.Codigo, e.TipoMovimiento, e.ClienteSuc, e.Pedido, e.FacturaRemision, e.Transmision }, "missing_index_3321_3320_TMCOINTRANSITO");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NoSerie)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FolioCodeBar)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.FolioQr)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("FolioQR");

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcointransitohand>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Partida, e.Codigo, e.FolioCodeBar, e.ClienteSuc });

                entity.ToTable("TMCOINTRANSITOHAND");

                entity.Property(e => e.FolioCodeBar)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Empaque).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.Fechamov).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcointransitohandrec>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Partida, e.Codigo, e.FolioCodeBar, e.ClienteSuc })
                    .HasName("PK_TMCOINTRANSITOHANDREC2");

                entity.ToTable("TMCOINTRANSITOHANDREC");

                entity.Property(e => e.FolioCodeBar)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Empaque).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.Fechamov).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcointransitomodseries>(entity =>
            {
                entity.HasKey(e => e.IdConsetivoMovCorr);

                entity.ToTable("TMCOINTRANSITOMODSERIES");

                entity.Property(e => e.IdConsetivoMovCorr).HasColumnName("Id_ConsetivoMovCorr");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerie)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerieAnt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcointransitowm>(entity =>
            {
                entity.HasKey(e => new { e.IdConsecutivoMov, e.IdConsecutivoMovCod });

                entity.ToTable("TMCOINTRANSITOWMS");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FacturaRemision)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumAduana)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transmision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmconocomismetro>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Fecha, e.Nomina });

                entity.ToTable("TMCONOCOMISMETRO");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ventas).HasColumnType("money");
            });

            modelBuilder.Entity<Tmcooxautorizafac>(entity =>
            {
                entity.HasKey(e => e.IdPermiso)
                    .HasName("PK__TMCOOXAU__153CFB6D6C22220D");

                entity.ToTable("TMCOOXAUTORIZAFAC");

                entity.Property(e => e.IdPermiso).HasColumnName("Id_Permiso");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FamServicioId).HasColumnName("FamServicioID");

                entity.Property(e => e.FechaAplicacion).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaAutorizacion).HasColumnType("datetime");

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.RecepLog).HasMaxLength(500);

                entity.Property(e => e.UsuarioAplico)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAutorizo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxcliente>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente });

                entity.ToTable("TMCOOXCLIENTES");

                entity.HasIndex(e => e.CteFirma, "IXDBA2_TMCOOXCLIENTES")
                    .HasFillFactor((byte)100);

                entity.HasIndex(e => e.CteFirma, "IXDBA_TMCOOXCLIENTES")
                    .HasFillFactor((byte)100);

                entity.HasIndex(e => e.CteFirma, "missing_index_2190_2189_TMCOOXCLIENTES");

                entity.HasIndex(e => e.Cancelado, "missing_index_2351_2350_TMCOOXCLIENTES");

                entity.HasIndex(e => e.Cliente, "missing_index_2757_2756_TMCOOXCLIENTES");

                entity.Property(e => e.ActualizadoApp)
                    .HasColumnName("ActualizadoAPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Clave)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CobroConsumible)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteFirma).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Electronico).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExcentoRecarga)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FamResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FasigMedicoRef)
                    .HasColumnType("datetime")
                    .HasColumnName("FAsigMedicoRef");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUtlSincronizacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('19000101')");

                entity.Property(e => e.IdMedico).HasDefaultValueSql("((0))");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MotivoCancelacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoPoliza).HasMaxLength(100);

                entity.Property(e => e.NomTtrasociado).HasColumnName("NomTTRAsociado");

                entity.Property(e => e.ObservacionesCte)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sector)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Solicitante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioBaja)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VigenciaPoliza).HasColumnType("datetime");

                entity.HasOne(d => d.Tmcoctgral)
                    .WithOne(p => p.Tmcooxcliente)
                    .HasForeignKey<Tmcooxcliente>(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOOXCLIENTES_TMCOCTGRAL");
            });

            modelBuilder.Entity<Tmcooxcobrotc>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Ccsucursal, e.Cliente, e.Banco, e.NoTarjeta });

                entity.ToTable("TMCOOXCOBROTC");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.NoTarjeta).HasMaxLength(20);

                entity.Property(e => e.DigVerificador)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Titular)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia)
                    .IsRequired()
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<Tmcooxconexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXCONEXP");
            });

            modelBuilder.Entity<Tmcooxcontrato>(entity =>
            {
                entity.HasKey(e => e.IdContrato);

                entity.ToTable("TMCOOXCONTRATOS");

                entity.HasIndex(e => e.Cliente, "NonClusteredIndex-20200623-133353");

                entity.Property(e => e.IdContrato)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_Contrato");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUtlSincronizacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('19000101')");

                entity.Property(e => e.MontoRenta).HasColumnType("money");

                entity.Property(e => e.Tecnico)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxcteejecutivo>(entity =>
            {
                entity.HasKey(e => e.Cliente)
                    .HasName("PK__TMCOOXCT__00D968A48FCEC7C9");

                entity.ToTable("TMCOOXCTEEJECUTIVO");

                entity.Property(e => e.Cliente).ValueGeneratedNever();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Usuario).HasMaxLength(20);

                entity.HasOne(d => d.NominaNavigation)
                    .WithMany(p => p.Tmcooxcteejecutivos)
                    .HasForeignKey(d => d.Nomina)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOOXCTE_NOMINA");
            });

            modelBuilder.Entity<Tmcooxcuestionario>(entity =>
            {
                entity.HasKey(e => new { e.CampaniaId, e.PreguntaId });

                entity.ToTable("TMCOOXCUESTIONARIO");

                entity.Property(e => e.CampaniaId).HasColumnName("CampaniaID");

                entity.Property(e => e.PreguntaId).HasColumnName("PreguntaID");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Pregunta).HasMaxLength(1200);

                entity.Property(e => e.Tipo).HasMaxLength(2);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxdatosmedico>(entity =>
            {
                entity.HasKey(e => e.IdMedico);

                entity.ToTable("TMCOOXDATOSMEDICOS");

                entity.Property(e => e.Amaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Apaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CedulaProfesional)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cp).HasColumnName("CP");

                entity.Property(e => e.EjecutivoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Especialidad)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro)
                    .HasColumnType("date")
                    .HasColumnName("Fecha_Registro");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxdescargasw>(entity =>
            {
                entity.HasKey(e => e.Hash);

                entity.ToTable("TMCOOXDESCARGASWS");

                entity.Property(e => e.Hash).HasMaxLength(150);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxejecutivo>(entity =>
            {
                entity.HasKey(e => e.Nomina)
                    .HasName("PK__TMCOOXEJ__765BE2D8894FBCAA");

                entity.ToTable("TMCOOXEJECUTIVO");

                entity.Property(e => e.Nomina).ValueGeneratedNever();

                entity.Property(e => e.Antiguedad).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Materno)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Paterno)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany(p => p.Tmcooxejecutivos)
                    .HasForeignKey(d => d.Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCCOGRSUC_TMCOCEJEC");
            });

            modelBuilder.Entity<Tmcooxequipocon>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.CodigoEquipo, e.CodigoConsumible });

                entity.ToTable("TMCOOXEQUIPOCONS");

                entity.Property(e => e.Automatico)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CantidadConsumible).HasDefaultValueSql("((0))");

                entity.Property(e => e.CantidadEquipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Estatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxequiposye>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Fecha, e.Ruta, e.Turno, e.Unidad });

                entity.ToTable("TMCOOXEQUIPOSYE");

                entity.HasIndex(e => new { e.Sucursal, e.Ruta, e.Turno, e.Unidad, e.Operardor }, "missing_index_3069_3068_TMCOOXEQUIPOSYE");

                entity.HasIndex(e => new { e.Operardor, e.FechaSalida }, "missing_index_776_775_TMCOOXEQUIPOSYE");

                entity.HasIndex(e => e.Fecha, "missing_index_962_961_TMCOOXEQUIPOSYE");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.ObservacionesEnt)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesSal)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoHorario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcooxequiposyeRespaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXEQUIPOSYE_respaldo");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.ObservacionesEnt)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesSal)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxexistenciaconsumible>(entity =>
            {
                entity.HasKey(e => new { e.Operador, e.Codigo });

                entity.ToTable("TMCOOXEXISTENCIACONSUMIBLES");

                entity.Property(e => e.ApartadoMovs).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcooxexistenciaconsumiblesdefault>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Codigo });

                entity.ToTable("TMCOOXEXISTENCIACONSUMIBLESDEFAULT");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcooxfaclstpar>(entity =>
            {
                entity.ToTable("TMCOOXFACLSTPAR");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Idmovimiento).HasColumnName("IDmovimiento");

                entity.Property(e => e.ImporteAplicado).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tmcooxkit>(entity =>
            {
                entity.HasKey(e => e.IdKit);

                entity.ToTable("TMCOOXKITS");

                entity.Property(e => e.IdKit).ValueGeneratedNever();

                entity.Property(e => e.Descripción)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.TipoKit)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Identifica el tipo de Kit para poder determinar las modalidades de cobro\r\nV = Ventilacion\r\nO = Oxigenoterapia");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxpagincentivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXPAGINCENTIVOS");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.MovimientoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MovimientoID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Turno)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmcooxpagincentivosAnt>(entity =>
            {
                entity.HasKey(e => new { e.FechaRuteo, e.FechaSalida, e.Prioridad, e.Nomina, e.Unidad, e.Turno, e.Ruta });

                entity.ToTable("TMCOOXPAGINCENTIVOS_ANT");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Turno)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MovimientoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MovimientoID");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Tmcooxpedidosconsumible>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Pedido, e.FechaRuteo, e.Cliente, e.Codigo });

                entity.ToTable("TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => new { e.Codigo, e.Operador, e.TipoPedido, e.Concluido, e.Estatus }, "missing_index_2135_2134_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => new { e.Cliente, e.Codigo, e.Estatus }, "missing_index_2142_2141_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => e.Estatus, "missing_index_663_662_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => e.Estatus, "missing_index_678_677_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => new { e.Ruta, e.Concluido, e.Estatus }, "missing_index_701_700_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => new { e.Pedido, e.Cliente, e.Codigo, e.Concluido }, "missing_index_732_731_TMCOOXPEDIDOSCONSUMIBLES");

                entity.HasIndex(e => new { e.Operador, e.TipoPedido, e.Concluido, e.Estatus }, "missing_index_780_779_TMCOOXPEDIDOSCONSUMIBLES");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadFacturar).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transferido).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TmcooxpedidosconsumiblesBakInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXPEDIDOSCONSUMIBLES_BakInv");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadFacturar).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcooxpedidosequipo>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Pedido, e.Cliente, e.FechaRuteo, e.Codigo });

                entity.ToTable("TMCOOXPEDIDOSEQUIPOS");

                entity.HasIndex(e => new { e.Ruta, e.Operador, e.Turno, e.Estatus }, "Codigo-ruta");

                entity.HasIndex(e => new { e.Operador, e.TipoPedido, e.Concluido, e.Estatus }, "missing_index_337_336_TMCOOXPEDIDOSEQUIPOS");

                entity.HasIndex(e => new { e.Ruta, e.Operador, e.Estatus, e.Concluido }, "missing_index_3454_3453_TMCOOXPEDIDOSEQUIPOS");

                entity.HasIndex(e => new { e.Codigo, e.Operador, e.TipoPedido, e.Concluido, e.Estatus }, "missing_index_887_886_TMCOOXPEDIDOSEQUIPOS");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Contrato).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Propiedad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcooxpereqp01>(entity =>
            {
                entity.HasKey(e => e.IdPermiso)
                    .HasName("PK__TMCOOXPE__0D626EC888BEF6F6");

                entity.ToTable("TMCOOXPEREQP01");

                entity.HasIndex(e => e.Codigo, "UQ__TMCOOXPE__06370DAC7D4FF71D")
                    .IsUnique();

                entity.Property(e => e.Codigo).HasMaxLength(20);

                entity.Property(e => e.Descripcion).HasMaxLength(250);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcooxpermiso>(entity =>
            {
                entity.ToTable("TMCOOXPERMISOS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Evento)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.Modulo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Psw)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PSW");

                entity.Property(e => e.Sistema)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcooxpobxme>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.IdClienteOx, e.Delegacion, e.Unidad, e.Anio, e.Mes })
                    .HasName("TMCOOXPOBXMES_PK");

                entity.ToTable("TMCOOXPOBXMES");

                entity.Property(e => e.IdClienteOx).HasColumnName("id_ClienteOX");
            });

            modelBuilder.Entity<Tmcooxpolesp>(entity =>
            {
                entity.HasKey(e => e.Idpolesp)
                    .HasName("PK__TMCOOXPO__63666205691C2CB4");

                entity.ToTable("TMCOOXPOLESP");

                entity.Property(e => e.Accion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaSol).HasColumnType("datetime");

                entity.Property(e => e.PrecioEspecial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAccion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioSuc)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxproducto>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_TCCOOXPRODUCTOS");

                entity.ToTable("TMCOOXPRODUCTOS");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Capacidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Comision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FamiliaServicio).HasDefaultValueSql("((1))");

                entity.Property(e => e.ImporteDeposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.RequiereFoto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Tmcooxproducto)
                    .HasForeignKey<Tmcooxproducto>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOOXPRODUCTOS_TMCOINPROD01");
            });

            modelBuilder.Entity<Tmcooxrecetadp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoCte, e.Delegacion, e.Clinica, e.Cliente, e.TipoMovimiento, e.Anio, e.Mes, e.FolioReceta, e.TipoServicio });

                entity.ToTable("TMCOOXRECETADP");

                entity.HasComment("Maestro de Movimientos(Recetas/Dias Paciente) ");

                entity.HasIndex(e => new { e.Cliente, e.TipoMovimiento, e.FolioFactura }, "CteFoliFacTM");

                entity.HasIndex(e => new { e.TipoCte, e.Delegacion, e.Clinica, e.TipoMovimiento, e.Anio, e.Mes }, "DelegacionTipo");

                entity.HasIndex(e => new { e.Sucursal, e.TipoCte, e.Delegacion, e.Clinica, e.Cliente, e.TipoMovimiento, e.Anio, e.Mes, e.TipoServicio }, "Organiza_Index_Recetas")
                    .IsUnique();

                entity.HasIndex(e => new { e.FolioFactura, e.TipoMovimiento }, "missing_index_2682_2681_TMCOOXRECETADP");

                entity.HasIndex(e => new { e.Anio, e.Mes }, "missing_index_3166_3165_TMCOOXRECETADP");

                entity.Property(e => e.Sucursal).HasComment("Clave Unica de la Sucursal");

                entity.Property(e => e.TipoCte).HasComment("Clave Unica del Cliente Firma");

                entity.Property(e => e.Delegacion).HasComment("Clave Unica de la Delegacion");

                entity.Property(e => e.Clinica).HasComment("Clave Unica de la Clinica");

                entity.Property(e => e.Cliente).HasComment("Clave Unica del Cliente");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(2)
                    .HasComment("Clave Del tipo de receta donde H:= Hospitalario N:= Normal E:= Extraodinario DP:=Dias Paciente");

                entity.Property(e => e.Anio).HasComment("Anio de Vigencia");

                entity.Property(e => e.Mes).HasComment("Mes de Vigencia");

                entity.Property(e => e.FolioReceta)
                    .HasMaxLength(50)
                    .HasComment("Folio de Expedicion de la Receta");

                entity.Property(e => e.TipoServicio)
                    .HasMaxLength(50)
                    .HasComment("Tipo se Servicio que sera Facturado");

                entity.Property(e => e.DiaFin).HasComment("Dia al Cual se cobrara el servicio");

                entity.Property(e => e.DiaIni).HasComment("Dia En el que Inicia el servicio ");

                entity.Property(e => e.Dias).HasComment("Total de Dias que seran Facturados");

                entity.Property(e => e.DpfechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaFin")
                    .HasComment("fecha Concluye el servicio DiaPaciente");

                entity.Property(e => e.DpfechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaInicio")
                    .HasComment("fecha Inicia el servicio Dias Paciente");

                entity.Property(e => e.EstatusMov)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .HasComment("Estado del Movimiento A:=Activo E:= Eliminado F:= Facturado");

                entity.Property(e => e.FechaAudit)
                    .HasColumnType("datetime")
                    .HasComment("Fecha y hora en la que se genero el Ultimo Movimiento");

                entity.Property(e => e.FolioFactura).HasComment("Folio con el cual se Facturo el Servicio");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID")
                    .HasComment("Clave Unica del Registro(ID)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Ultimo Usuario que Genero el Movimiento");
            });

            modelBuilder.Entity<TmcooxrecetadpJiprresp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXRECETADP_JIPRRESP");

                entity.Property(e => e.DpfechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaFin");

                entity.Property(e => e.DpfechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DPFechaInicio");

                entity.Property(e => e.EstatusMov)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FolioReceta)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.TipoServicio)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tmcooxrecibosdev>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.ReciboDev, e.FechaMov, e.Codigo });

                entity.ToTable("TMCOOXRECIBOSDEV");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxrtcont>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.Sucursal, e.Ruta, e.Dia });

                entity.ToTable("TMCOOXRTCONT");

                entity.Property(e => e.Dia)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcooxservicio>(entity =>
            {
                entity.HasKey(e => new { e.Pedido, e.Cliente, e.Sucursal });

                entity.ToTable("TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Pedido, e.Cliente, e.TipoServicio }, "IX_Cliente_Pedido_TipoServ");

                entity.HasIndex(e => new { e.Cliente, e.Sucursal, e.FechaRuteo }, "IX_DISMINUCIONES");

                entity.HasIndex(e => new { e.Cancelado, e.TipoEquipo, e.Pedido }, "IX_RUTEOOXIDOM");

                entity.HasIndex(e => new { e.Cancelado, e.Ruteado, e.FechaRuteo, e.TipoServicio, e.PrioridadServicio }, "missing_index_1300_1299_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Ruteado, "missing_index_132_131_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Cancelado, e.PendienteFacturacion }, "missing_index_1347_1346_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Usuario, "missing_index_1453_1452_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Aseguradora, "missing_index_1589_1588_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Usuario, "missing_index_1895_1894_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.FormaPago, e.FechaRuteo }, "missing_index_321_320_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Cliente, e.Cancelado }, "missing_index_3983_3982_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.TipoServicio, e.AsignaTtr }, "missing_index_592_591_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Sucursal, e.FechaRuteo }, "missing_index_639_638_TMCOOXSERVICIOS");

                entity.HasIndex(e => new { e.Cancelado, e.PendienteFacturacion }, "missing_index_661_660_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Ruteado, "missing_index_728_727_TMCOOXSERVICIOS");

                entity.HasIndex(e => e.Ruteado, "missing_index_885_884_TMCOOXSERVICIOS");

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CantDeposito).HasColumnType("money");

                entity.Property(e => e.CantEfectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTransferencia).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Deposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FolioApp).HasColumnName("folioApp");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.MotivoRevId).HasColumnName("MotivoRevID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PendienteNc).HasColumnName("PendienteNC");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefFormaPago).HasMaxLength(50);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TipoNc).HasColumnName("TipoNC");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VolanteImpreso).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TipoServicioNavigation)
                    .WithMany(p => p.Tmcooxservicios)
                    .HasForeignKey(d => d.TipoServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOOXSERVICIOS_TCCOXTSERV");

                entity.HasOne(d => d.Tmcooxcliente)
                    .WithMany(p => p.Tmcooxservicios)
                    .HasForeignKey(d => new { d.Sucursal, d.Cliente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOOXSERVICIOS_TMCOOXCLIENTES");
            });

            modelBuilder.Entity<Tmcooxservicios23012022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOOXSERVICIOS_23012022");

                entity.Property(e => e.Aseguradora)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CantDeposito).HasColumnType("money");

                entity.Property(e => e.CantEfectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.CantTransferencia).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Deposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.EstatusServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAsigChofer).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioServ).HasColumnType("datetime");

                entity.Property(e => e.FechaProgInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaProgTermino).HasColumnType("datetime");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FechaTerminoServ).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FolioApp).HasColumnName("folioApp");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MotivoCancelaId).HasColumnName("MotivoCancelaID");

                entity.Property(e => e.MotivoRevId).HasColumnName("MotivoRevID");

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PendienteNc).HasColumnName("PendienteNC");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefFormaPago).HasMaxLength(50);

                entity.Property(e => e.SubIndice).HasMaxLength(2);

                entity.Property(e => e.TipoNc).HasColumnName("TipoNC");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxvalidadoc>(entity =>
            {
                entity.HasKey(e => new { e.IdvalidaDoc, e.Sucursal, e.Cliente })
                    .HasName("PK_TMCOXVALIDADOCS");

                entity.ToTable("TMCOOXVALIDADOCS");

                entity.Property(e => e.IdvalidaDoc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDValidaDoc");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcooxvigenciaconsumible>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Institucion, e.Familia, e.Codigo });

                entity.ToTable("TMCOOXVIGENCIACONSUMIBLES");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcooxwservice>(entity =>
            {
                entity.HasKey(e => e.Servicio);

                entity.ToTable("TMCOOXWSERVICES");

                entity.Property(e => e.Servicio).HasMaxLength(50);

                entity.Property(e => e.Descripcion).HasMaxLength(500);

                entity.Property(e => e.EstatusSev)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FultSync)
                    .HasColumnType("datetime")
                    .HasColumnName("FUltSync");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.KeyId)
                    .HasMaxLength(200)
                    .HasColumnName("KeyID");

                entity.Property(e => e.NombreWs).HasMaxLength(200);

                entity.Property(e => e.Servidor).HasMaxLength(200);

                entity.Property(e => e.Usuario).HasMaxLength(20);

                entity.Property(e => e.UsuarioFirmante).HasMaxLength(20);
            });

            modelBuilder.Entity<Tmcortchofer>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Nomina });

                entity.ToTable("TMCORTCHOFER");

                entity.Property(e => e.NombreEmp)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcortglobal>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.FechaCarga, e.TipoRuteoOrg, e.Numero, e.IdCliente })
                    .HasName("PK_TMCORTGLOBAL_1");

                entity.ToTable("TMCORTGLOBAL");

                entity.Property(e => e.FechaCarga).HasColumnType("datetime");

                entity.Property(e => e.TipoRuteoOrg)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cilindros)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Dirección)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaVisita)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HoraEntregaMaximo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HoraEntregaMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Latitud).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Longitud).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MercanciaCantidadPeso).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Mercancias)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Movil)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PesoMercancia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RutaEntrega)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ruteado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Servicios)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRuteo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcortmtro>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.TipoDocumento, e.Folio, e.Cliente, e.FechaRuteo });

                entity.ToTable("TMCORTMTRO");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad2).HasColumnName("Cantidad_2");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPostal)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFolio).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IdDirEntrega).HasColumnName("Id_DirEntrega");

                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Movil)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numint)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCaptura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRuteo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcortproforma>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Folio, e.TipoDocumento, e.FechaRuteo, e.Cliente });

                entity.ToTable("TMCORTPROFORMAS");

                entity.HasIndex(e => new { e.Sucursal, e.Folio, e.TipoDocumento, e.FechaRuteo, e.Cliente, e.Ruta, e.Reparto }, "NonClusteredIndex-20141230-151257");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cpostal)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CPostal")
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FiltroRuras)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUnidad)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotraccionespedweb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOTRACCIONESPEDWEB");

                entity.Property(e => e.Accion).HasMaxLength(20);

                entity.Property(e => e.Aux1).HasMaxLength(50);

                entity.Property(e => e.Aux2).HasMaxLength(50);

                entity.Property(e => e.Aux3).HasMaxLength(50);

                entity.Property(e => e.Aux4).HasMaxLength(50);

                entity.Property(e => e.Aux5).HasMaxLength(50);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdAccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Accion");
            });

            modelBuilder.Entity<Tmcotrcorreo>(entity =>
            {
                entity.HasKey(e => e.IdTransmite);

                entity.ToTable("TMCOTRCORREO");

                entity.HasIndex(e => new { e.Identificador, e.Transmision }, "Ident_Transac");

                entity.HasIndex(e => new { e.Identificador, e.Transmision, e.FechaTrans }, "Ident_Transac_Fecha");

                entity.HasIndex(e => e.FechaTrans, "missing_index_916_915_TMCOTRCORREO");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.C1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C101)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C102)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C103)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C104)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C105)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C106)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C107)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C108)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C109)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C120)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmcotrcorreoPrueba>(entity =>
            {
                entity.HasKey(e => e.IdTransmite);

                entity.ToTable("TMCOTRCORREO_PRUEBA");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.C1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C101)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C102)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C103)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C104)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C105)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C106)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C107)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C108)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C109)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C120)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrcorreoext>(entity =>
            {
                entity.HasKey(e => e.IdTransmite)
                    .HasName("PK__TMCOTRCO__3686A08AA61FDE03");

                entity.ToTable("TMCOTRCORREOEXT");

                entity.HasIndex(e => e.IdTransmite, "IX_TMCOTRCORREOEXT_IdTransmite");

                entity.Property(e => e.IdTransmite).ValueGeneratedNever();

                entity.Property(e => e.FechaError).HasColumnType("datetime");

                entity.Property(e => e.FechaSyncronizacion).HasColumnType("datetime");

                entity.Property(e => e.MensajeError).HasMaxLength(2000);
            });

            modelBuilder.Entity<Tmcotrcorreoin>(entity =>
            {
                entity.HasKey(e => e.IdTransmicion)
                    .HasName("PK_TMCOGRTRANSMISIONIN_1");

                entity.ToTable("TMCOTRCORREOIN");

                entity.HasIndex(e => e.Identificador, "Identificador");

                entity.HasIndex(e => e.Identificador, "missing_index_292_291_TMCOTRCORREOIN");

                entity.HasIndex(e => e.C5, "missing_index_3424_3423_TMCOTRCORREOIN");

                entity.Property(e => e.Archivo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.C1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.C10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Identificador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrcorreoinwm>(entity =>
            {
                entity.HasKey(e => e.IdTransmicion)
                    .HasName("PK_TMCOGRTRANSMISIONINWMS");

                entity.ToTable("TMCOTRCORREOINWMS");

                entity.Property(e => e.Archivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.C1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Identificador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrcorreowm>(entity =>
            {
                entity.HasKey(e => e.IdTransmite);

                entity.ToTable("TMCOTRCORREOWMS");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.C1).IsUnicode(false);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrcorreowt>(entity =>
            {
                entity.HasKey(e => e.IdTransmite);

                entity.ToTable("TMCOTRCORREOWT");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.C1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C101)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C102)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C103)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C104)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C105)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C106)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C107)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C108)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C109)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C120)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrpaciente>(entity =>
            {
                entity.ToTable("TMCOTRPACIENTES");

                entity.HasIndex(e => new { e.Delegacion, e.Unidad }, "Deleg_Unidad");

                entity.HasIndex(e => new { e.Nss, e.AgrMedico }, "NSS_AgrMedico");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgrMedico)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Apellidos)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.Celular).HasMaxLength(20);

                entity.Property(e => e.Ciudad).HasMaxLength(75);

                entity.Property(e => e.CodPostal).HasMaxLength(5);

                entity.Property(e => e.Colonia).HasMaxLength(75);

                entity.Property(e => e.Consultorio)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.Cruce1).HasMaxLength(150);

                entity.Property(e => e.Cruce2).HasMaxLength(150);

                entity.Property(e => e.Email)
                    .HasMaxLength(75)
                    .HasColumnName("EMail");

                entity.Property(e => e.Enviado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Equipo).HasMaxLength(75);

                entity.Property(e => e.Estado).HasMaxLength(2);

                entity.Property(e => e.EstadoCivil).HasMaxLength(30);

                entity.Property(e => e.Estatura)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaCargaImss)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaCargaIMSS");

                entity.Property(e => e.FechaInfra).HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.IdTransaccion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idws).HasColumnName("IDWS");

                entity.Property(e => e.NoAfiliacion).HasMaxLength(8);

                entity.Property(e => e.NoPaciente).HasMaxLength(25);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.Nss)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("NSS");

                entity.Property(e => e.Numero).HasMaxLength(150);

                entity.Property(e => e.NumeroInt).HasMaxLength(75);

                entity.Property(e => e.Observaciones).HasMaxLength(200);

                entity.Property(e => e.Ocupacion).HasMaxLength(30);

                entity.Property(e => e.Origen)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Peso)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.RefDomicilio).HasMaxLength(300);

                entity.Property(e => e.Telefono).HasMaxLength(8);

                entity.Property(e => e.Turno)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmcotrreceta>(entity =>
            {
                entity.ToTable("TMCOTRRECETAS");

                entity.HasIndex(e => new { e.Delegacion, e.Unidad }, "NonClusteredIndex-20210218-161637");

                entity.HasIndex(e => new { e.Nss, e.AgrMedico }, "NonClusteredIndex-20210218-161715");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Diagnostico).HasMaxLength(50);

                entity.Property(e => e.DiagnosticoDetalle).HasMaxLength(150);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaExpedicion).HasColumnType("datetime");

                entity.Property(e => e.FechaFinal).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.Folio).HasMaxLength(50);

                entity.Property(e => e.IdTransaccion).HasMaxLength(50);

                entity.Property(e => e.Idws).HasColumnName("IDWS");

                entity.Property(e => e.MatriculaMed).HasMaxLength(12);

                entity.Property(e => e.Motivo).HasMaxLength(50);

                entity.Property(e => e.NoAfiliacion).HasMaxLength(50);

                entity.Property(e => e.NoPaciente).HasMaxLength(50);

                entity.Property(e => e.Nss)
                    .HasMaxLength(50)
                    .HasColumnName("NSS");

                entity.Property(e => e.NvaFechaFin).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tmcotrrecibepedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMCOTRRECIBEPEDIDOS");

                entity.Property(e => e.CancelaDescto).HasMaxLength(20);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.NombreRuta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoBo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoBO")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmcowmspci>(entity =>
            {
                entity.HasKey(e => e.Idpci);

                entity.ToTable("TMCOWMSPCI");

                entity.Property(e => e.Idpci).HasColumnName("idpci");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.DateConsulted)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dateConsulted");

                entity.Property(e => e.DestinationLpn)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("destinationLpn");

                entity.Property(e => e.DynamicAttribute1)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dynamicAttribute1");

                entity.Property(e => e.DynamicAttribute2)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dynamicAttribute2");

                entity.Property(e => e.DynamicAttribute3)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dynamicAttribute3");

                entity.Property(e => e.ExpirationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("expirationDate");

                entity.Property(e => e.Folio)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("folio");

                entity.Property(e => e.Footprint)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("footprint");

                entity.Property(e => e.InventoryStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inventoryStatus");

                entity.Property(e => e.Lot)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("lot");

                entity.Property(e => e.OrignLpn)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("orignLpn");

                entity.Property(e => e.OutputDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outputDate");

                entity.Property(e => e.PickingReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pickingReason");

                entity.Property(e => e.PickingType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pickingType");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Serial)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("serial");

                entity.Property(e => e.Sku)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("sku");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("user");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("warehouse");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("weight");
            });

            modelBuilder.Entity<Tmcowmsrci>(entity =>
            {
                entity.HasKey(e => e.Idrci);

                entity.ToTable("TMCOWMSRCI");

                entity.Property(e => e.Idrci).HasColumnName("idrci");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.AdmissionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("admissionDate");

                entity.Property(e => e.DateConsulted)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dateConsulted");

                entity.Property(e => e.DinamicAttribute1)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute1");

                entity.Property(e => e.DinamicAttribute2)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute2");

                entity.Property(e => e.DinamicAttribute3)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute3");

                entity.Property(e => e.ExpirationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("expirationDate");

                entity.Property(e => e.Folio)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("folio");

                entity.Property(e => e.Footprint)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("footprint");

                entity.Property(e => e.InventoryStatus)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("inventoryStatus");

                entity.Property(e => e.LargeDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("largeDescription");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.Lot)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("lot");

                entity.Property(e => e.Lpn)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("lpn");

                entity.Property(e => e.OriginReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("origin_reference");

                entity.Property(e => e.Procesado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("quantity");

                entity.Property(e => e.ReceiptReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("receiptReason");

                entity.Property(e => e.ReceiptType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("receiptType");

                entity.Property(e => e.Serial)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("serial");

                entity.Property(e => e.Sku)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("sku");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("supplier");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("user");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("warehouse");

                entity.Property(e => e.Weight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("weight");
            });

            modelBuilder.Entity<Tmcowmsroi>(entity =>
            {
                entity.HasKey(e => e.Idroi);

                entity.ToTable("TMCOWMSROI");

                entity.Property(e => e.Idroi).HasColumnName("idroi");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account")
                    .HasDefaultValueSql("('Mercancias')");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.BillNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billNumber")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Clientesuc).HasColumnName("clientesuc");

                entity.Property(e => e.DinamicAttribute1)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DinamicAttribute2)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DinamicAttribute3)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExpiredDay)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("expiredDay");

                entity.Property(e => e.Facturaremision)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("facturaremision");

                entity.Property(e => e.Fechapedido)
                    .HasColumnType("datetime")
                    .HasColumnName("fechapedido");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Footprint)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("footprint");

                entity.Property(e => e.IsAuditRequiered)
                    .HasColumnName("isAuditRequiered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsQualityRequiered)
                    .HasColumnName("isQualityRequiered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsReceiptDistribution)
                    .HasColumnName("isReceiptDistribution")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lot)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lot")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderNumber");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderType");

                entity.Property(e => e.OrderedQuantity)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("orderedQuantity");

                entity.Property(e => e.OriginReference)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("originReference")
                    .HasDefaultValueSql("('01')");

                entity.Property(e => e.Pedido).HasColumnName("pedido");

                entity.Property(e => e.PedidoSap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pedidoSAP");

                entity.Property(e => e.Product)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("product");

                entity.Property(e => e.Reason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.Serial)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("serial")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sku");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supplier");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipoMovimiento");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("warehouse")
                    .HasDefaultValueSql("('CC184')");

                entity.Property(e => e.Waybill)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("waybill");
            });

            modelBuilder.Entity<Tmcowmssoi>(entity =>
            {
                entity.HasKey(e => e.Idsoi);

                entity.ToTable("TMCOWMSSOI");

                entity.Property(e => e.Idsoi).HasColumnName("idsoi");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account")
                    .HasDefaultValueSql("('Mercancias')");

                entity.Property(e => e.AllocationRoute)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("allocationRoute")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.BillingAddress)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("billingAddress");

                entity.Property(e => e.Carrier)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carrier")
                    .HasDefaultValueSql("('Carrier')");

                entity.Property(e => e.ClientProduct)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("clientProduct")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Clientesuc).HasColumnName("clientesuc");

                entity.Property(e => e.Comments)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("comments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreationDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creationDate");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.Customer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer");

                entity.Property(e => e.DaysOnShelf)
                    .HasColumnName("daysOnShelf")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DeliveryDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("deliveryDate");

                entity.Property(e => e.DestinationAddress)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("destinationAddress");

                entity.Property(e => e.DestinationArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("destinationArea")
                    .HasDefaultValueSql("('stgEmbar')");

                entity.Property(e => e.DestinationLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("destinationLocation")
                    .HasDefaultValueSql("('StgEmbarque')");

                entity.Property(e => e.DinamicAttribute1)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DinamicAttribute2)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DinamicAttribute3)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("dinamicAttribute3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExpirationDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("expirationDate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Facturaremision)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("facturaremision");

                entity.Property(e => e.Fechapedido)
                    .HasColumnType("datetime")
                    .HasColumnName("fechapedido");

                entity.Property(e => e.Folio)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("folio");

                entity.Property(e => e.Folioinfra).HasColumnName("folioinfra");

                entity.Property(e => e.Footprint)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("footprint");

                entity.Property(e => e.InventoryRotation)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("inventoryRotation")
                    .HasDefaultValueSql("('FIFO')");

                entity.Property(e => e.IsBackOrder)
                    .HasColumnName("isBackOrder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsBackOrder2)
                    .HasColumnName("isBackOrder2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCrossDock)
                    .HasColumnName("isCrossDock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPartial)
                    .HasColumnName("isPartial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsRounded)
                    .HasColumnName("isRounded")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsTmsPlanning)
                    .HasColumnName("isTmsPlanning")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lot)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("lot")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Lpn)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("lpn")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderedQuantity)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("orderedQuantity");

                entity.Property(e => e.Pedido).HasColumnName("pedido");

                entity.Property(e => e.PedidoSap)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pedidoSAP");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Product)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("product");

                entity.Property(e => e.Progression)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("progression")
                    .HasDefaultValueSql("('progression')");

                entity.Property(e => e.Project)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Rma)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rma")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Route)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("route")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.SalesLineOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesLineOrder")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesOrder");

                entity.Property(e => e.Serial)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("serial")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipmentDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("shipmentDate");

                entity.Property(e => e.ShipmentOrderStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shipmentOrderStatus");

                entity.Property(e => e.ShipmentReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shipmentReason");

                entity.Property(e => e.ShippingAddress)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("shippingAddress");

                entity.Property(e => e.Sku)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("sku");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipoMovimiento");

                entity.Property(e => e.UnitCost)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("unitCost");

                entity.Property(e => e.Uom)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("uom");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("warehouse")
                    .HasDefaultValueSql("('CC184')");
            });

            modelBuilder.Entity<Tmcowtransidentifica>(entity =>
            {
                entity.ToTable("TMCOWTRANSIDENTIFICA");

                entity.HasIndex(e => e.Servicio, "IX_TMCOWTRANSIDENTIFICA_Servicio");

                entity.HasIndex(e => new { e.Identificador, e.Servicio }, "UQ_TMCOWTRANSIDENTIFICA")
                    .IsUnique();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FultSync)
                    .HasColumnType("datetime")
                    .HasColumnName("FUltSync");

                entity.Property(e => e.Identificador)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MaxIntentos).HasDefaultValueSql("((100))");

                entity.Property(e => e.PostSpname)
                    .HasMaxLength(50)
                    .HasColumnName("PostSPName");

                entity.Property(e => e.PreSpname)
                    .HasMaxLength(50)
                    .HasColumnName("PreSPName");

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TipoCiclo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.HasOne(d => d.ServicioNavigation)
                    .WithMany(p => p.Tmcowtransidentificas)
                    .HasForeignKey(d => d.Servicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMCOWTRANSIDENTIFICA_TMCOOXWSERVICES");
            });

            modelBuilder.Entity<Tmoxiexentosaut>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.TipoExento });

                entity.ToTable("tmoxiexentosaut");

                entity.Property(e => e.TipoExento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Solicito)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmtransitomodseries>(entity =>
            {
                entity.HasKey(e => e.IdConsetivoMovCorr);

                entity.ToTable("TMTRANSITOMODSERIES");

                entity.Property(e => e.IdConsetivoMovCorr).HasColumnName("Id_ConsetivoMovCorr");

                entity.Property(e => e.FacturaRemision).HasMaxLength(15);

                entity.Property(e => e.NoSerie).HasMaxLength(50);

                entity.Property(e => e.NoSerieAnt).HasMaxLength(50);

                entity.Property(e => e.Transmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tmwictcon01>(entity =>
            {
                entity.HasKey(e => e.IdContacto);

                entity.ToTable("TMWICTCON01");

                entity.Property(e => e.IdContacto).HasColumnName("idContacto");

                entity.Property(e => e.Area)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comentario)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cp)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CP")
                    .IsFixedLength(true);

                entity.Property(e => e.Delegacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescAreaInt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescEdo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescPais)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescTiposolicitud)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empresa)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Fecharesp).HasColumnType("datetime");

                entity.Property(e => e.Interes)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Otra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Respuesta)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSolicitud)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tmwictefil05>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.Cliente });

                entity.ToTable("TMWICTEFIL05");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tpuesto>(entity =>
            {
                entity.HasKey(e => e.TpuId)
                    .HasName("PK_TPuesto_1");

                entity.ToTable("TPuesto");

                entity.HasIndex(e => e.TpuId, "IX_TPuesto")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TpuId).HasColumnName("TPu_Id");

                entity.Property(e => e.TpuActivo).HasColumnName("TPu_Activo");

                entity.Property(e => e.TpuDescorta)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("TPu_Descorta")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");

                entity.Property(e => e.TpuDescripcion)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("TPu_Descripcion")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AI");
            });

            modelBuilder.Entity<Transmision>(entity =>
            {
                entity.HasKey(e => e.IdTransmite);

                entity.ToTable("TRANSMISION");

                entity.Property(e => e.IdTransmite).HasColumnName("idTransmite");

                entity.Property(e => e.C1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C10)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C100)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C101)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C102)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C103)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C104)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C105)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C106)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C107)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C108)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C109)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C11)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C12)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C120)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C13)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C14)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C15)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C17)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C18)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C19)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C20)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C22)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C23)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C24)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C26)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C27)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C28)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C29)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C30)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C31)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C32)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C33)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C34)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C35)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C36)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C37)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C38)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C39)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C40)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C41)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C42)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C43)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C44)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C45)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C46)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C47)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C48)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C49)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C50)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C51)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C52)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C53)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C54)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C55)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C56)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C57)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C58)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C59)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C6)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C60)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C61)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C62)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C63)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C64)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C65)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C66)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C67)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C68)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C69)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C7)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C70)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C71)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C72)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C73)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C74)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C75)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C76)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C77)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C78)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C79)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C8)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C80)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C81)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C82)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C83)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C84)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C85)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C86)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C87)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C88)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C89)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C9)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C90)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C91)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C92)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C93)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C94)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C95)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C96)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C97)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C98)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.C99)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaTrans).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Transmision")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Trcocacobradorpromo>(entity =>
            {
                entity.HasKey(e => e.IdRelacion);

                entity.ToTable("TRCOCACOBRADORPROMO");

                entity.HasOne(d => d.IdCobradorNavigation)
                    .WithMany(p => p.Trcocacobradorpromos)
                    .HasForeignKey(d => d.IdCobrador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOCACOBRADORPROMO_TMCOCACOBRADORES");

                entity.HasOne(d => d.IdPromotoraNavigation)
                    .WithMany(p => p.Trcocacobradorpromos)
                    .HasForeignKey(d => d.IdPromotora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOCACOBRADORPROMO_TMCOCAPROMOTORAS");
            });

            modelBuilder.Entity<Trcoencodigosio>(entity =>
            {
                entity.HasKey(e => new { e.Clave, e.Codigo });

                entity.ToTable("TRCOENCODIGOSIO");

                entity.Property(e => e.Clave)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Trcoenfactor>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Codigo })
                    .HasName("PK_bcfkm15")
                    .IsClustered(false);

                entity.ToTable("TRCOENFACTOR");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiasSemana).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FactorA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FactorB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Viajes).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Trcoenfamilium>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Familia });

                entity.ToTable("TRCOENFAMILIA");

                entity.HasOne(d => d.FamiliaNavigation)
                    .WithMany(p => p.Trcoenfamilia)
                    .HasForeignKey(d => d.Familia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOENFAMILIA_TCCOENFAMILIA");
            });

            modelBuilder.Entity<Trcoennodorem>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Destino });

                entity.ToTable("TRCOENNODOREM");
            });

            modelBuilder.Entity<Trcograreascorreonotif>(entity =>
            {
                entity.HasKey(e => new { e.IdProcesoArea, e.IdEmail });

                entity.ToTable("TRCOGRAREASCORREONOTIF");

                entity.Property(e => e.IdProcesoArea).HasColumnName("Id_ProcesoArea");

                entity.Property(e => e.IdEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Id_Email");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.Trcograreascorreonotifs)
                    .HasForeignKey(d => d.IdEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOGRAREASCORREONOTIF_TCCOGRCORREONOTIF");

                entity.HasOne(d => d.IdProcesoAreaNavigation)
                    .WithMany(p => p.Trcograreascorreonotifs)
                    .HasForeignKey(d => d.IdProcesoArea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOGRAREASCORREONOTIF_TCCOGRAREASNOTIF");
            });

            modelBuilder.Entity<TrcogroperacionPerfil>(entity =>
            {
                entity.HasKey(e => e.IdOperacionPerfil);

                entity.ToTable("TRCOGROperacionPerfil");

                entity.HasOne(d => d.IdOperacionNavigation)
                    .WithMany(p => p.TrcogroperacionPerfils)
                    .HasForeignKey(d => d.IdOperacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOGROperacionPerfil_TCCOGROperacion");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.TrcogroperacionPerfils)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRCOGROperacionPerfil_TCCOGRPerfil");
            });

            modelBuilder.Entity<Trcogrproch>(entity =>
            {
                entity.HasKey(e => new { e.NumCheque, e.FolioMov, e.TipoMovimiento });

                entity.ToTable("TRCOGRPROCH");

                entity.Property(e => e.NumCheque)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Trcoinun>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("TRCOINUN");

                entity.Property(e => e.Codigo).ValueGeneratedNever();
            });

            modelBuilder.Entity<Trcortrutasox>(entity =>
            {
                entity.HasKey(e => new { e.Grupo, e.Ruta });

                entity.ToTable("TRCORTRUTASOX");

                entity.Property(e => e.DescripcionGpo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TridgruposDependencium>(entity =>
            {
                entity.HasKey(e => e.IdGrupoDependencia);

                entity.ToTable("TRIDGruposDependencia");

                entity.HasOne(d => d.IdGrupoHijoNavigation)
                    .WithMany(p => p.TridgruposDependenciumIdGrupoHijoNavigations)
                    .HasForeignKey(d => d.IdGrupoHijo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRIDGruposDependencia_TCIDGrupoHijo");

                entity.HasOne(d => d.IdGrupoPadreNavigation)
                    .WithMany(p => p.TridgruposDependenciumIdGrupoPadreNavigations)
                    .HasForeignKey(d => d.IdGrupoPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRIDGruposDependencia_TCIDGrupoPadre");
            });

            modelBuilder.Entity<TridusuarioGrupo>(entity =>
            {
                entity.HasKey(e => e.IdUsuarioGrupo);

                entity.ToTable("TRIDUsuarioGrupo");

                entity.HasOne(d => d.IdGrupoNavigation)
                    .WithMany(p => p.TridusuarioGrupos)
                    .HasForeignKey(d => d.IdGrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRIDUsuarioGrupo_TCIDGrupo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TridusuarioGrupos)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRIDUsuarioGrupo_TCIDUsuario");
            });

            modelBuilder.Entity<TtaumentoArgon220926Borrar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTAumentoArgon_220926_Borrar");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaAuditNvo).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioActualNvo).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior).HasColumnType("money");

                entity.Property(e => e.PrecioAnteriorNvo).HasColumnType("money");

                entity.Property(e => e.TipoAumento)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioNvo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TtaumentoArgonBorrar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTAumentoArgon_Borrar");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaAuditNvo).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioActualNvo).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior).HasColumnType("money");

                entity.Property(e => e.PrecioAnteriorNvo).HasColumnType("money");

                entity.Property(e => e.TipoAumento)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioNvo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcocaantiguedaddiarium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOCAANTIGUEDADDIARIA");

                entity.Property(e => e.Abonos)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ccsucursal");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cliente");

                entity.Property(e => e.Dias)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("dias");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fechavencimiento)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("fechavencimiento");

                entity.Property(e => e.Folio)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.ImporteDoc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Nombrepromotora)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nombrepromotora");

                entity.Property(e => e.Plazo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("plazo");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("rfc");

                entity.Property(e => e.Saldo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sv)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SV");

                entity.Property(e => e.TotalVencido)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.V0130)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_01_30");

                entity.Property(e => e.V121150)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_121_150");

                entity.Property(e => e.V151180)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_151_180");

                entity.Property(e => e.V180)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_180");

                entity.Property(e => e.V3160)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_31_60");

                entity.Property(e => e.V6190)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_61_90");

                entity.Property(e => e.V91120)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("V_91_120");

                entity.Property(e => e.Zonacobro)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("zonacobro");
            });

            modelBuilder.Entity<Ttcocagastosdium>(entity =>
            {
                entity.HasKey(e => e.Consec);

                entity.ToTable("TTCOCAGASTOSDIA");

                entity.Property(e => e.CargoAbono)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcocarotcte>(entity =>
            {
                entity.HasKey(e => e.Cliente);

                entity.ToTable("TTCOCAROTCTE");

                entity.Property(e => e.Cliente)
                    .ValueGeneratedNever()
                    .HasColumnName("cliente");

                entity.Property(e => e.CalifCliente).HasColumnType("decimal(5, 1)");

                entity.Property(e => e.CobranzaMesActual).HasColumnType("money");

                entity.Property(e => e.CobranzaMesAntepenultimo).HasColumnType("money");

                entity.Property(e => e.CobranzaMesPenultimo).HasColumnType("money");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.MesActual).HasColumnType("money");

                entity.Property(e => e.MesAntepenultimo).HasColumnType("money");

                entity.Property(e => e.MesPenultimo).HasColumnType("money");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Rotacion)
                    .HasColumnType("money")
                    .HasColumnName("rotacion");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoTotal).HasColumnType("money");

                entity.Property(e => e.Saldosinvencer)
                    .HasColumnType("money")
                    .HasColumnName("saldosinvencer");

                entity.Property(e => e.Sm90)
                    .HasColumnType("money")
                    .HasColumnName("SM90");

                entity.Property(e => e.Smm90)
                    .HasColumnType("money")
                    .HasColumnName("SMM90");

                entity.Property(e => e.V0130)
                    .HasColumnType("money")
                    .HasColumnName("V_01_30");

                entity.Property(e => e.V121150)
                    .HasColumnType("money")
                    .HasColumnName("V_121_150");

                entity.Property(e => e.V151180)
                    .HasColumnType("money")
                    .HasColumnName("V_151_180");

                entity.Property(e => e.V180)
                    .HasColumnType("money")
                    .HasColumnName("V_180");

                entity.Property(e => e.V3160)
                    .HasColumnType("money")
                    .HasColumnName("V_31_60");

                entity.Property(e => e.V6190)
                    .HasColumnType("money")
                    .HasColumnName("V_61_90");

                entity.Property(e => e.V91120)
                    .HasColumnType("money")
                    .HasColumnName("V_91_120");
            });

            modelBuilder.Entity<Ttcocasaldoscarbonografico>(entity =>
            {
                entity.HasKey(e => new { e.Ccsucursal, e.Cliente, e.Factura, e.Fecha, e.IdTiopoMercadp, e.Sector });

                entity.ToTable("TTCOCASALDOSCARBONOGRAFICOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Sector).HasColumnName("sector");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRealFactura).HasColumnType("datetime");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Obetivobono).HasColumnName("obetivobono");

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.Sv)
                    .HasColumnType("money")
                    .HasColumnName("SV");

                entity.Property(e => e.TipoMercado)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMonedaDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.V0130)
                    .HasColumnType("money")
                    .HasColumnName("V_01_30");

                entity.Property(e => e.V0190)
                    .HasColumnType("money")
                    .HasColumnName("V_01_90");

                entity.Property(e => e.V121150)
                    .HasColumnType("money")
                    .HasColumnName("V_121_150");

                entity.Property(e => e.V151180)
                    .HasColumnType("money")
                    .HasColumnName("V_151_180");

                entity.Property(e => e.V180)
                    .HasColumnType("money")
                    .HasColumnName("V_180");

                entity.Property(e => e.V3160)
                    .HasColumnType("money")
                    .HasColumnName("V_31_60");

                entity.Property(e => e.V6190)
                    .HasColumnType("money")
                    .HasColumnName("V_61_90");

                entity.Property(e => e.V91120)
                    .HasColumnType("money")
                    .HasColumnName("V_91_120");

                entity.Property(e => e.V91m)
                    .HasColumnType("money")
                    .HasColumnName("V_91M");
            });

            modelBuilder.Entity<Ttcocasaldoscaroxidom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOCASALDOSCAROXIDOM");

                entity.Property(e => e.Area)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("area")
                    .IsFixedLength(true);

                entity.Property(e => e.C15)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.C16)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.C21)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("c21")
                    .IsFixedLength(true);

                entity.Property(e => e.C22)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("c22")
                    .IsFixedLength(true);

                entity.Property(e => e.C23)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("c23")
                    .IsFixedLength(true);

                entity.Property(e => e.C24)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.C25)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cliente")
                    .IsFixedLength(true);

                entity.Property(e => e.SalMas180).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalSinVencer).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalVen121150).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalVen130).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalVen3160)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("salVen3160");

                entity.Property(e => e.Salven15180).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Salven6190).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Salven91120)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("salven91120");

                entity.Property(e => e.VentasO)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Ventas_o");

                entity.Property(e => e.Vm1O)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("Vm1_o");

                entity.Property(e => e.Vm2O)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("vm2_o");
            });

            modelBuilder.Entity<Ttcocasaldoscarrotaciom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOCASALDOSCARROTACIOM");

                entity.Property(e => e.Area).HasColumnName("area");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.RotObjetivo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("rotObjetivo");

                entity.Property(e => e.Suc).HasColumnName("suc");

                entity.Property(e => e.Tipomercado).HasColumnName("tipomercado");

                entity.Property(e => e.Ventas1).HasColumnName("ventas1");
            });

            modelBuilder.Entity<Ttcoctconsultacte>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Sucursal, e.Cliente, e.Usuario })
                    .HasName("PK_TTCOCTCONSULTA");

                entity.ToTable("TTCOCTCONSULTACTE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.Afiliacion)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CalleEntrega)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ColoniaEntrega)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcoctgralenviar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOCTGRALENVIAR");

                entity.Property(e => e.AutorizacionSat)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("AutorizacionSAT");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveCliente)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteViejo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CondPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteEspecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExentoGm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ExentoGM")
                    .IsFixedLength(true);

                entity.Property(e => e.ExentoRenta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoCia)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IvaCte).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MedioCapto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.See)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SolicitadoPor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEjecutivoGas)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFac)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRetencion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcoctgralrecibe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOCTGRALRECIBE");

                entity.Property(e => e.AutorizacionSat)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("AutorizacionSAT");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveCliente)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteViejo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CondPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CteEspecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExentoGm)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ExentoGM")
                    .IsFixedLength(true);

                entity.Property(e => e.ExentoRenta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoCia)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IvaCte).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MedioCapto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.See)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SolicitadoPor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEjecutivoGas)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFac)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRetencion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcoencodigoscamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOENCODIGOSCAMP");

                entity.Property(e => e.Codigoact).HasColumnName("codigoact");

                entity.Property(e => e.Codigonvo).HasColumnName("codigonvo");
            });

            modelBuilder.Entity<Ttcoencredicamp>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.Fecha, e.FolioFactura, e.Codigo, e.SucOrigen });

                entity.ToTable("TTCOENCREDICAMP");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Ttcoenfaccamp60>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOENFACCAMP60");
            });

            modelBuilder.Entity<Ttcoenvremisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOENVREMISIONES");

                entity.Property(e => e.Nodo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ttcofactorinc2024>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOFACTORINC2024");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Gas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Negocio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PorcDlls).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PorcPesos).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Ttcogrcargaruteo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOGRCARGARUTEO");

                entity.Property(e => e.Cantidad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Entrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.GeoIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Latitud)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Libre1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Libre2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Libre3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Libre4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Libre5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Longitud)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RutaEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovilSol)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Zona)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttcoidpolizaventa>(entity =>
            {
                entity.ToTable("TTCOIDPOLIZAVENTAS");

                entity.Property(e => e.ClavePoliza)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaOxidom)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Exportaciones)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("exportaciones");

                entity.Property(e => e.FaltaSap)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteContado).HasColumnType("money");

                entity.Property(e => e.Importecredito).HasColumnType("money");

                entity.Property(e => e.Indicador)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PolizaCuenta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Retencion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("retencion");

                entity.Property(e => e.TasaIva).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("tipoCliente");

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocambio)
                    .HasColumnType("money")
                    .HasColumnName("tipocambio");

                entity.Property(e => e.TotalImporteContado).HasColumnType("money");

                entity.Property(e => e.TotalImporteCredito).HasColumnType("money");

                entity.Property(e => e.TotalIvaContado).HasColumnType("money");

                entity.Property(e => e.TotalIvaCredito).HasColumnType("money");
            });

            modelBuilder.Entity<Ttcoinpedga>(entity =>
            {
                entity.HasKey(e => new { e.Suc, e.TipoPedido, e.Codigo });

                entity.ToTable("TTCOINPEDGAS");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ccnodo).HasColumnName("CCNodo");

                entity.Property(e => e.DtoGc).HasColumnName("Dto_GC");

                entity.Property(e => e.DtoIe).HasColumnName("Dto_IE");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Ttcoinpedgas)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTCOINPEDGAS_TMCOINPROD01");
            });

            modelBuilder.Entity<Ttcoinpedmerc>(entity =>
            {
                entity.HasKey(e => new { e.Almacen, e.Proveedor, e.Pedido, e.Codigo });

                entity.ToTable("TTCOINPEDMERC");

                entity.Property(e => e.Autoriza)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadOriginal).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Costo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Extraordinario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ttcoinproduccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOINPRODUCCION");

                entity.Property(e => e.FactRem)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");
            });

            modelBuilder.Entity<Ttcointransitosdescarga>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOINTRANSITOSDESCARGA");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpaqueSuc).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEntrada).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FolioCodeBar)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.FolioQr)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("FolioQR");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttconocomabono>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCONOCOMABONOS");

                entity.Property(e => e.Abonos).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.ImpFac).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttconocomcontado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCONOCOMCONTADO");

                entity.Property(e => e.Clientesuc).HasColumnName("clientesuc");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttconocommov>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCONOCOMMOVS");

                entity.Property(e => e.Almacen).HasColumnName("almacen");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Clientesuc).HasColumnName("clientesuc");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttconocomvta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCONOCOMVTAS");

                entity.Property(e => e.Abonos).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Ejecutivo).HasColumnName("ejecutivo");

                entity.Property(e => e.FamiliaAgrupa)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Tipoprod).HasColumnName("tipoprod");

                entity.Property(e => e.Total).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttconoprecvol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttconoprecvol");

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Ttcooxfirma>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOOXFIRMAS");

                entity.Property(e => e.Clave)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLAVE");

                entity.Property(e => e.Firma)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FIRMA");
            });

            modelBuilder.Entity<Ttcooxsesionesreceta>(entity =>
            {
                entity.HasKey(e => e.Usuario);

                entity.ToTable("TTCOOXSESIONESRECETAS");

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<Ttcorotacionmer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCOROTACIONMER");

                entity.Property(e => e.Rotacion).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TtcotrIdentifica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttcotrIdentificas");

                entity.Property(e => e.Fechafin).HasColumnType("datetime");

                entity.Property(e => e.Fechaini).HasColumnType("datetime");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TtctesDistinguidos2024>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCtesDistinguidos2024");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<TtctesDistinguidos2024Rfc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCtesDistinguidos2024_RFC");

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");
            });

            modelBuilder.Entity<TtctesExentosincAut2024>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCtesExentosincAut_2024");
            });

            modelBuilder.Entity<Ttctesinc2024>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCTESINC2024");

                entity.Property(e => e.Catgases)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("catgases");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Cteespecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cteespecial")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Distribuidor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Fechaaudit)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaaudit");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.Mostrador).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PorcInc).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioNvo).HasColumnType("money");

                entity.Property(e => e.Precioanterior).HasColumnType("money");

                entity.Property(e => e.Tipoprod).HasColumnName("tipoprod");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<Ttctesinc2024c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTCTESINC2024C");

                entity.Property(e => e.Catgases)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("catgases");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Cteespecial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cteespecial")
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Distribuidor)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Fechaaudit)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaaudit");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("moneda");

                entity.Property(e => e.Mostrador).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PorcInc).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PrecioActual).HasColumnType("money");

                entity.Property(e => e.PrecioNvo).HasColumnType("money");

                entity.Property(e => e.Precioanterior).HasColumnType("money");

                entity.Property(e => e.Tipoprod).HasColumnName("tipoprod");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<Ttdatosfiscale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTDATOSFISCALES");

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CODPOS")
                    .IsFixedLength(true);

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Razonsocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ttdcoinmovscod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTDCOINMOVSCOD");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Ttdcooxequiposye>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTDCOOXEQUIPOSYE");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.SeriesEnt)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SeriesSal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttdcooxseriessye>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTDCOOXSERIESSYE");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttgrprovext>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTGRPROVEXT");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Nproveedor).HasColumnName("NProveedor");
            });

            modelBuilder.Entity<Tthcoinmov>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTHCOINMOVS");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC");

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoNotaCred)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tthcooxasignaconsumible>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTHCOOXASIGNACONSUMIBLES");

                entity.Property(e => e.CantidadAsignada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadFacturada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadGratis).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdAsignacion).ValueGeneratedOnAdd();

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Ttmcooxequiposye>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTMCOOXEQUIPOSYE");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaSalida).HasColumnType("datetime");

                entity.Property(e => e.ObservacionesEnt)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesSal)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoHorario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ttmcooxpedidosconsumible>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTMCOOXPEDIDOSCONSUMIBLES");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadFacturar).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ttmcooxpedidosequipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTMCOOXPEDIDOSEQUIPOS");

                entity.Property(e => e.Contrato).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Propiedad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.TipoPedido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Ttooxcompendioreceta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTOOXCOMPENDIORECETAS");

                entity.Property(e => e.ClinicaNom)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.DiasFacturados).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Institucion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.MontoAdeudo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("montoAdeudo");

                entity.Property(e => e.MontoFacturado).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TipoMovimiento).HasMaxLength(3);
            });

            modelBuilder.Entity<Ttproveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ttproveedores");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MunDel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Nproveedor).HasColumnName("NProveedor");

                entity.Property(e => e.NumExt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tttmcoinprod01argon100923Borrar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TTTMCOINPROD01ARGON_100923_BORRAR");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fechaaudit)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaaudit");

                entity.Property(e => e.FechaauditNvo)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaauditNvo");

                entity.Property(e => e.Fechacambioprecio)
                    .HasColumnType("datetime")
                    .HasColumnName("fechacambioprecio");

                entity.Property(e => e.FechacambioprecioNvo)
                    .HasColumnType("datetime")
                    .HasColumnName("fechacambioprecioNvo");

                entity.Property(e => e.Porc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Precio)
                    .HasColumnType("money")
                    .HasColumnName("precio");

                entity.Property(e => e.PrecioAntNvo).HasColumnType("money");

                entity.Property(e => e.PrecioNvo).HasColumnType("money");

                entity.Property(e => e.Precioant)
                    .HasColumnType("money")
                    .HasColumnName("precioant");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.UsuarioNvo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAcocamov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ACOCAMOV");

                entity.Property(e => e.AbonoDlls).HasColumnType("money");

                entity.Property(e => e.AbonoPesos).HasColumnType("money");

                entity.Property(e => e.AnioMesProceso)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CargoDlls).HasColumnType("money");

                entity.Property(e => e.CargoPesos).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EjeGe).HasColumnName("EjeGE");

                entity.Property(e => e.Estatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Periodo1).HasColumnType("money");

                entity.Property(e => e.Periodo10).HasColumnType("money");

                entity.Property(e => e.Periodo11).HasColumnType("money");

                entity.Property(e => e.Periodo12).HasColumnType("money");

                entity.Property(e => e.Periodo13).HasColumnType("money");

                entity.Property(e => e.Periodo14).HasColumnType("money");

                entity.Property(e => e.Periodo15).HasColumnType("money");

                entity.Property(e => e.Periodo16).HasColumnType("money");

                entity.Property(e => e.Periodo17).HasColumnType("money");

                entity.Property(e => e.Periodo18).HasColumnType("money");

                entity.Property(e => e.Periodo19).HasColumnType("money");

                entity.Property(e => e.Periodo2).HasColumnType("money");

                entity.Property(e => e.Periodo20).HasColumnType("money");

                entity.Property(e => e.Periodo3).HasColumnType("money");

                entity.Property(e => e.Periodo4).HasColumnType("money");

                entity.Property(e => e.Periodo5).HasColumnType("money");

                entity.Property(e => e.Periodo6).HasColumnType("money");

                entity.Property(e => e.Periodo7).HasColumnType("money");

                entity.Property(e => e.Periodo8).HasColumnType("money");

                entity.Property(e => e.Periodo9).HasColumnType("money");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoDlls).HasColumnType("money");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimientoOrigino)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoadagrescala>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COADAGRESCALAS");

                entity.Property(e => e.Acumulado).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.CantidadFac).HasColumnType("decimal(13, 3)");
            });

            modelBuilder.Entity<VwCoaftransporteinv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COAFTRANSPORTEINV");

                entity.Property(e => e.Clave)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comentarios)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DondeTransita)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Kilometraje)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Marca)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Modelo)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.NoTarjetaDasoliaDiesel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NombreChoferaCargoUnidad)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nomina)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.UsoGases)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsoLiquidos)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsoMercancias)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsoOxidom)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocaantgasto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAANTGASTO");

                entity.Property(e => e.Anticipo).HasColumnType("money");

                entity.Property(e => e.CantidadComprobada).HasColumnType("money");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FinViaje).HasColumnType("smalldatetime");

                entity.Property(e => e.InicioViaje).HasColumnType("smalldatetime");

                entity.Property(e => e.LugarViaje)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MotivoViaje)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCcsap)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TipoCCSap");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocacomppago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCACOMPPAGOS");

                entity.Property(e => e.FechaEmision).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NombreBancoEmisor)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroOperacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.RfcbancoEmisor)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFCBancoEmisor");
            });

            modelBuilder.Entity<VwCocacuentasgasto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCACUENTASGASTO");

                entity.Property(e => e.AbrP).HasColumnType("money");

                entity.Property(e => e.AbrR).HasColumnType("money");

                entity.Property(e => e.AgoP).HasColumnType("money");

                entity.Property(e => e.AgoR).HasColumnType("money");

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaRet2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescUsos)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.DicP).HasColumnType("money");

                entity.Property(e => e.DicR).HasColumnType("money");

                entity.Property(e => e.EneP).HasColumnType("money");

                entity.Property(e => e.EneR).HasColumnType("money");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Expr3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FebP).HasColumnType("money");

                entity.Property(e => e.FebR).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.JulP).HasColumnType("money");

                entity.Property(e => e.JulR).HasColumnType("money");

                entity.Property(e => e.JunP).HasColumnType("money");

                entity.Property(e => e.JunR).HasColumnType("money");

                entity.Property(e => e.MarP).HasColumnType("money");

                entity.Property(e => e.MarR).HasColumnType("money");

                entity.Property(e => e.MayP).HasColumnType("money");

                entity.Property(e => e.MayR).HasColumnType("money");

                entity.Property(e => e.NovP).HasColumnType("money");

                entity.Property(e => e.NovR).HasColumnType("money");

                entity.Property(e => e.OctP).HasColumnType("money");

                entity.Property(e => e.OctR).HasColumnType("money");

                entity.Property(e => e.PorcenRet1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PorcenRet2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SepP).HasColumnType("money");

                entity.Property(e => e.SepR).HasColumnType("money");

                entity.Property(e => e.TipoGasto)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TipoSucAplica)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoccSap)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocagastosOd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAGASTOS_OD");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocagastosdetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAGASTOSDETALLE");

                entity.Property(e => e.Concepto)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Km).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Modelo)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Placas)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Sistema)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMantto)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vehiculo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocagastosdetalleOd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAGASTOSDETALLE_OD");

                entity.Property(e => e.AfectaSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ServicioDescripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocagastosdium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAGASTOSDIA");

                entity.Property(e => e.CargoAbono)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ccsap)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CCSap");

                entity.Property(e => e.ClaveGasto)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Iva).HasColumnType("money");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocagtoxml>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAGTOXML");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocamov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAMOV");

                entity.Property(e => e.AbonoPesos).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CargoPesos).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaSucursal).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Saldo).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.SaldoDlls)
                    .HasColumnType("numeric(2, 2)")
                    .HasColumnName("SaldoDLLs");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMercado)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimientoOrigino)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocamovId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAMOV_ID");

                entity.Property(e => e.AbonoPesos).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.AnioMesProceso)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Banco).HasColumnName("banco");

                entity.Property(e => e.Caja).HasColumnName("CAJA");

                entity.Property(e => e.CargoPesos).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CveMovto)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCobro).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRefactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.FechaSucursal).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteDlls).HasColumnType("money");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.Saldo).HasColumnType("numeric(2, 2)");

                entity.Property(e => e.SaldoDlls)
                    .HasColumnType("numeric(2, 2)")
                    .HasColumnName("SaldoDLLs");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMercado)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMovimientoOrigino)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocamovseg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCAMOVSEG");

                entity.Property(e => e.AnioMesProceso)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.DescripcionEstatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EstatusSeguimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.Property(e => e.FechaVencimiento).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Promotora)
                    .HasMaxLength(182)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimientoOrigino)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCocasaldosalterbono>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASALDOSALTERBONO");

                entity.Property(e => e.Acumulado).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.PorTotalMm90)
                    .HasColumnType("money")
                    .HasColumnName("PorTotalMM90");

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("rfc")
                    .IsFixedLength(true);

                entity.Property(e => e.Sm90)
                    .HasColumnType("money")
                    .HasColumnName("SM90");

                entity.Property(e => e.Smm90)
                    .HasColumnType("money")
                    .HasColumnName("SMM90");

                entity.Property(e => e.St)
                    .HasColumnType("money")
                    .HasColumnName("ST");

                entity.Property(e => e.Sv)
                    .HasColumnType("money")
                    .HasColumnName("SV");
            });

            modelBuilder.Entity<VwCocasaldossucbono>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASALDOSSUCBONO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Sm90suc)
                    .HasColumnType("money")
                    .HasColumnName("SM90Suc");

                entity.Property(e => e.Smm90suc)
                    .HasColumnType("money")
                    .HasColumnName("SMM90Suc");

                entity.Property(e => e.Stprivado)
                    .HasColumnType("money")
                    .HasColumnName("STPrivado");

                entity.Property(e => e.Stpublico)
                    .HasColumnType("money")
                    .HasColumnName("STPublico");

                entity.Property(e => e.Stsuc)
                    .HasColumnType("money")
                    .HasColumnName("STSuc");

                entity.Property(e => e.Sv)
                    .HasColumnType("money")
                    .HasColumnName("SV");

                entity.Property(e => e.Svprivado)
                    .HasColumnType("money")
                    .HasColumnName("SVPrivado");

                entity.Property(e => e.Svpublico)
                    .HasColumnType("money")
                    .HasColumnName("SVPublico");

                entity.Property(e => e.V0190Privado)
                    .HasColumnType("money")
                    .HasColumnName("V_01_90_Privado");

                entity.Property(e => e.V0190Publico)
                    .HasColumnType("money")
                    .HasColumnName("V_01_90_Publico");

                entity.Property(e => e.V91mPrivado)
                    .HasColumnType("money")
                    .HasColumnName("V_91M_Privado");

                entity.Property(e => e.V91mPublico)
                    .HasColumnType("money")
                    .HasColumnName("V_91M_Publico");
            });

            modelBuilder.Entity<VwCocasaldossucctebono>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASALDOSSUCCTEBONO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Sector).HasColumnName("sector");

                entity.Property(e => e.Sm90)
                    .HasColumnType("money")
                    .HasColumnName("SM90");

                entity.Property(e => e.Smm90)
                    .HasColumnType("money")
                    .HasColumnName("SMM90");

                entity.Property(e => e.St)
                    .HasColumnType("money")
                    .HasColumnName("ST");

                entity.Property(e => e.Sv)
                    .HasColumnType("money")
                    .HasColumnName("SV");
            });

            modelBuilder.Entity<VwCocasolcontabilidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASOLCONTABILIDAD");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(87)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCocasolcontabilidadsaldo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASOLCONTABILIDADSALDO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("SALDO");
            });

            modelBuilder.Entity<VwCocasolcontabilidadsaldotmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCASOLCONTABILIDADSALDOTMP");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("SALDO");
            });

            modelBuilder.Entity<VwCoctgral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCTGRAL");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteEspecial)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Cliente_Especial");

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Codigo_Postal")
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionesPago)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Condiciones_Pago");

                entity.Property(e => e.EjecutivoGas)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Ejecutivo_Gas");

                entity.Property(e => e.EjecutivoMer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Ejecutivo_Mer");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExentoGm)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Exento_GM");

                entity.Property(e => e.ExentoRenta)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Exento_Renta");

                entity.Property(e => e.FechaAlta)
                    .HasColumnType("date")
                    .HasColumnName("Fecha_Alta");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.Giro)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoCompania)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Grupo_Compania");

                entity.Property(e => e.IvaCliente)
                    .HasColumnType("decimal(27, 8)")
                    .HasColumnName("Iva_Cliente");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.MedioConcepto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Medio_Concepto");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoExterior)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NoInterior)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NominaCapto)
                    .HasMaxLength(172)
                    .IsUnicode(false)
                    .HasColumnName("Nomina_Capto");

                entity.Property(e => e.Pais)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SaldoMensual).HasColumnType("money");

                entity.Property(e => e.See)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SubGiro)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Sub_Giro");

                entity.Property(e => e.SubTipoCliente)
                    .HasMaxLength(25)
                    .HasColumnName("SubTipo_Cliente");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Cliente")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEjecutivoGas)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoctrefbancaria>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCTREFBANCARIAS");

                entity.Property(e => e.Cuenta)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco).HasColumnName("idBanco");

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NomBanco)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RfcBanco)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RFcBanco");
            });

            modelBuilder.Entity<VwCoctremisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCTREMISIONES");

                entity.Property(e => e.CantDevuelta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantFacturada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantRemision).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Idcabecera).HasColumnName("IDCabecera");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Iva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoctremisionesfact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCTREMISIONESFACT");

                entity.Property(e => e.CantDevuelta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantFacturada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantRemision).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Factor).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Iva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.KilosLiquido).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.M3carga)
                    .HasColumnType("decimal(13, 3)")
                    .HasColumnName("M3Carga");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenCompra)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoctremisionesgral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COCTREMISIONESGRAL");

                entity.Property(e => e.CantDevuelta).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantFacturada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantRemision).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Factor).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Iva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.KilosLiquido).HasColumnType("decimal(13, 3)");

                entity.Property(e => e.M3carga)
                    .HasColumnType("decimal(13, 3)")
                    .HasColumnName("M3Carga");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenCompra)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VwCodmovenvase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CODMOVENVASES");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(468)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(247)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovEnvases)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Movimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(335)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(67)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoejenombreejecutivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COEJENOMBREEJECUTIVO");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(172)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenaagarantium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENAAGARANTIA");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenactualizacobro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENACTUALIZACOBRO");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoenanaliticagar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENANALITICAGAR");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Garantia)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoTot).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransCheque)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencambioga>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMBIOGAS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.DesCodigoEnt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DesCodigoRec)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(495)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(249)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(335)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(69)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencampLm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMP_LM");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencampNc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMP_NC");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencampNcon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMP_NCon");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.EnvActLr).HasColumnName("EnvActLR");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencampOx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMP_OX");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.OxEnvActLr).HasColumnName("OxEnvActLR");
            });

            modelBuilder.Entity<VwCoencampRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCAMP_REC");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencomcamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCOMCAMP");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEmp)
                    .HasMaxLength(172)
                    .IsUnicode(false);

                entity.Property(e => e.Pago).HasColumnType("money");

                entity.Property(e => e.TipoCam)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoenconfimacorpo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONFIMACORPO");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaUltimaAct).HasColumnType("datetime");

                entity.Property(e => e.Mov)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MovCorpo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenconsultum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONSULTA");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.IdVarianteSubTc).HasColumnName("IdVarianteSubTC");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.SubTipoCte).HasMaxLength(25);

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnvase)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenconsumo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONSUMOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaUltConsumo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenconsumosant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONSUMOSANT");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.CteNuevo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencontrato>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONTRATOS");

                entity.Property(e => e.DireccionFiscal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Folios)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Giro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionCte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Plazo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PtoCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PtoInfra)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespInfra)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoSociedad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencontrolenv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCONTROLENV");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ImagenEnv)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Subtipo)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnvase)
                    .HasMaxLength(68)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoencorpo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENCORPO");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdError).HasColumnName("Id_Error");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TipoError)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoendemora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENDEMORA");

                entity.Property(e => e.AdeudoAnt).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.ImporteAct).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("money");
            });

            modelBuilder.Entity<VwCoendemoracte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENDEMORACTE");

                entity.Property(e => e.CantidadAcobrar)
                    .HasColumnType("money")
                    .HasColumnName("CantidadACobrar");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.ClavePago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DiasAcobrar).HasColumnName("DiasACobrar");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(555)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCobro)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MotivoMovimiento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoendotideal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENDOTIDEAL");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenembarquerem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENEMBARQUEREM");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadFederativa)
                    .HasMaxLength(74)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.Nc).HasColumnName("NC");

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSucDestino)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRemision)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoengrrem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENGRREM");

                entity.Property(e => e.DesTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoengrremisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENGRREMISIONES");

                entity.Property(e => e.AreaFechaLiberacion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EstatusRem)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.NombreArea)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(428)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoeninvauditoriaNvo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENINVAUDITORIA_NVO");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AmttoDebo).HasColumnName("AMttoDebo");

                entity.Property(e => e.AmttoNoDebo).HasColumnName("AMttoNoDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");
            });

            modelBuilder.Entity<VwCoeninvauditorium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENINVAUDITORIA");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aotros).HasColumnName("AOtros");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Apendientes).HasColumnName("APendientes");

                entity.Property(e => e.Asucursales).HasColumnName("ASucursales");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Fintocables).HasColumnName("FIntocables");

                entity.Property(e => e.Fllenos).HasColumnName("FLlenos");

                entity.Property(e => e.Fruta).HasColumnName("FRuta");

                entity.Property(e => e.Fvacios).HasColumnName("FVacios");

                entity.Property(e => e.SdotTotal).HasColumnName("SDotTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.Spatios).HasColumnName("SPAtios");
            });

            modelBuilder.Entity<VwCoeninventario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENINVENTARIO");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fintocables).HasColumnName("FIntocables");

                entity.Property(e => e.Fllenos).HasColumnName("FLlenos");

                entity.Property(e => e.Fruta).HasColumnName("FRuta");

                entity.Property(e => e.Fvacios).HasColumnName("FVacios");
            });

            modelBuilder.Entity<VwCoeninventariodiaInto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENINVENTARIODIA_INTO");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.SubTipoEnv)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnv)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoeninventariodium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENINVENTARIODIA");

                entity.Property(e => e.Aadecuacion).HasColumnName("AAdecuacion");

                entity.Property(e => e.Aaumentos).HasColumnName("AAumentos");

                entity.Property(e => e.Aclaraciones)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AdependientesDebo).HasColumnName("ADependientesDebo");

                entity.Property(e => e.AnodoDebo).HasColumnName("ANodoDebo");

                entity.Property(e => e.AotrosDebo).HasColumnName("AOtrosDebo");

                entity.Property(e => e.AotrosNoDebo).HasColumnName("AOtrosNoDebo");

                entity.Property(e => e.Aparticulares).HasColumnName("AParticulares");

                entity.Property(e => e.Atotal).HasColumnName("ATotal");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FconteoFisico).HasColumnName("FConteoFisico");

                entity.Property(e => e.Fdiferencia).HasColumnName("FDiferencia");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FrepartoForaneo).HasColumnName("FRepartoForaneo");

                entity.Property(e => e.FrepartoUrb).HasColumnName("FRepartoUrb");

                entity.Property(e => e.FtotalFisico).HasColumnName("FTotalFisico");

                entity.Property(e => e.SdotacionTotal).HasColumnName("SDotacionTotal");

                entity.Property(e => e.Sintocables).HasColumnName("SIntocables");

                entity.Property(e => e.SubTipoEnv)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEnv)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenmov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENMOVS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Entrga)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.MovCorp)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenmovsId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENMOVS_ID");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Foliodep).HasColumnName("foliodep");

                entity.Property(e => e.Idbanco).HasColumnName("idbanco");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Refbanco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("refbanco");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipopago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tipopago");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<VwCoenmovsIdDet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENMOVS_ID_DET");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.Idbanco).HasColumnName("IDBANCO");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Refbanco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFBANCO");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenpatio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENPATIOS");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenpendetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENPENDETALLE");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.DesCodigo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenpendiente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENPENDIENTES");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenprov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENPROV");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FechaOrgVig).HasColumnType("datetime");

                entity.Property(e => e.FechaVigencia).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenreminventario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENREMINVENTARIO");

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRecepcion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaRemision)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoInv)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenremisione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENREMISIONES");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(219)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSucDestino)
                    .HasMaxLength(219)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadFederativa)
                    .HasMaxLength(74)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.NombreCliente)
                    .IsRequired()
                    .HasMaxLength(344)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSucDestino)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRemision)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoenremisionsuc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENREMISIONSUC");

                entity.Property(e => e.AreaFechaLiberacion).HasColumnType("datetime");

                entity.Property(e => e.AreaFechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.DesCodigo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSucDestino)
                    .HasMaxLength(166)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRecepcion).HasColumnType("datetime");

                entity.Property(e => e.FechaRemision).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoenresumenrem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENRESUMENREM");

                entity.Property(e => e.Concluida)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Distribucion)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRecibida).HasColumnType("date");

                entity.Property(e => e.Fecharemision).HasColumnType("date");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOrigen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoensolicitud>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENSOLICITUD");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Giro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valvula)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoentranspendiente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENTRANSPENDIENTES");

                entity.Property(e => e.Banco)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DesCodigo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaMov)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoenvisitadorcam>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COENVISITADORCAM");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEmp)
                    .IsRequired()
                    .HasMaxLength(172)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoexpproforma>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COEXPPROFORMAS");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Condiciones).HasMaxLength(300);

                entity.Property(e => e.Descripcion).HasMaxLength(2500);

                entity.Property(e => e.Descuento).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Despedida).HasMaxLength(350);

                entity.Property(e => e.Embarque).HasMaxLength(350);

                entity.Property(e => e.Empaque).HasMaxLength(350);

                entity.Property(e => e.Envio).HasMaxLength(12);

                entity.Property(e => e.Farancelaria)
                    .HasMaxLength(18)
                    .HasColumnName("FArancelaria");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FormaPago).HasMaxLength(120);

                entity.Property(e => e.Importe).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Moneda).HasMaxLength(5);

                entity.Property(e => e.NombreFirma).HasMaxLength(50);

                entity.Property(e => e.Notas).HasMaxLength(350);

                entity.Property(e => e.PrecioCompra).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.PrecioVenta).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Presentacion).HasMaxLength(350);

                entity.Property(e => e.Puerto).HasMaxLength(50);

                entity.Property(e => e.PuestoFirma).HasMaxLength(50);

                entity.Property(e => e.TerminoVenta).HasMaxLength(30);

                entity.Property(e => e.TiempoEntrega).HasMaxLength(55);

                entity.Property(e => e.TipoCambio).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .HasColumnName("UM");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Vigencia).HasMaxLength(55);

                entity.Property(e => e.ZonaCotizar).HasMaxLength(30);
            });

            modelBuilder.Entity<VwCofaanticipadum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFAANTICIPADA");

                entity.Property(e => e.CantEntregada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantFac).HasColumnType("decimal(26, 3)");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NotaCredito).HasColumnType("decimal(26, 3)");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total).HasColumnType("decimal(26, 3)");
            });

            modelBuilder.Entity<VwCofaconsumoscte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFACONSUMOSCTE");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaUltConsumo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SugAbr).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugAgo).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugDic).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugEne).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugFeb).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugJul).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugJun).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugMar).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugMay).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugNov).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugOct).HasColumnType("numeric(21, 0)");

                entity.Property(e => e.SugSep).HasColumnType("numeric(21, 0)");
            });

            modelBuilder.Entity<VwCofacounval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFACOUNVAL");

                entity.Property(e => e.AcumuladoUnidades).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.AcumuladoUnidadesActual).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.AcumuladoUnidadesAnterior).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.AcumuladoValores).HasColumnType("money");

                entity.Property(e => e.AcumuladosValoresActual).HasColumnType("money");

                entity.Property(e => e.AcumuladosValoresAnterior).HasColumnType("money");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.TotalUnidades).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.TotalValores).HasColumnType("money");

                entity.Property(e => e.Unidades).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValoresDll).HasColumnType("money");

                entity.Property(e => e.ValoresMxp).HasColumnType("money");
            });

            modelBuilder.Entity<VwCofamtropedidoscte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFAMTROPEDIDOSCTE");

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DesTipoDocto)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.DesTipoPago)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.DiaCobro)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DiaRevision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioPedido)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<VwCofamtropedidosctehi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFAMTROPEDIDOSCTEHIS");

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DesTipoDocto)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DesTipoPago)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<VwCofanotacmotivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFANOTACMOTIVOS");

                entity.Property(e => e.DesPago)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFac).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.ImpTotal).HasColumnType("money");

                entity.Property(e => e.ImpTotalFac).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMotivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSubMotivo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMotivo)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCofapedctesauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFAPEDCTESAUTO");

                entity.Property(e => e.DesTipoDocto)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.DesTipoPago)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaPedidoHis).HasColumnType("datetime");

                entity.Property(e => e.LimiteCredito).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.UsrAutoriza)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCaptura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioPedido)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCofareimpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFAREIMPRESION");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<VwCofarelacioncte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFARELACIONCTE");

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DireccionCte)
                    .IsRequired()
                    .HasMaxLength(434)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Pago)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRfc)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TipoRFC");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCofaretencione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COFARETENCIONES");

                entity.Property(e => e.Monto).HasColumnType("money");

                entity.Property(e => e.Porcentaje).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Subtotal).HasColumnType("decimal(38, 20)");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCogrequiposexcluye>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COGREQUIPOSEXCLUYE");

                entity.Property(e => e.Equipo).HasMaxLength(128);
            });

            modelBuilder.Entity<VwCogrgtosmanto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COGRGTOSMANTO");

                entity.Property(e => e.Adeudo).HasColumnType("money");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.ImporteFacturado).HasColumnType("money");

                entity.Property(e => e.MotivoMovimiento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Pagado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCogrinformeOperacione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COGRINFORME_OPERACIONES");

                entity.Property(e => e.Area).HasColumnName("area");

                entity.Property(e => e.AreaDesc)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("areaDesc");

                entity.Property(e => e.C1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C5)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.E2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.E3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.E4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Linea).HasColumnName("linea");
            });

            modelBuilder.Entity<VwCoidcarteraurbana>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDCARTERAURBANA");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.Totalpesos)
                    .HasColumnType("money")
                    .HasColumnName("TOTALPESOS");
            });

            modelBuilder.Entity<VwCoidcheduplicado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDCHEDUPLICADOS");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.NoPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreBanco)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoidcheprochemex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDCHEPROCHEMEX");

                entity.Property(e => e.Certificado)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CveProchemex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NumCheque)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SucursalProchemex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMov)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoiddettpago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDDETTPAGOS");

                entity.Property(e => e.Clave).HasColumnName("clave");

                entity.Property(e => e.DescReferencia)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Modulo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoidenvdevgar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDENVDEVGAR");

                entity.Property(e => e.Actualizacion).HasColumnType("money");

                entity.Property(e => e.Cancelacion).HasColumnType("money");

                entity.Property(e => e.Devolucion).HasColumnType("money");

                entity.Property(e => e.Garantia).HasColumnType("money");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NumCheque)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoidenvgardevpendiente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDENVGARDEVPENDIENTES");

                entity.Property(e => e.Actualizacion).HasColumnType("money");

                entity.Property(e => e.Cancelacion).HasColumnType("money");

                entity.Property(e => e.Devolucion).HasColumnType("money");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Garantia).HasColumnType("money");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.TransferenciaPendiente)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoidventasdeldium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COIDVENTASDELDIA");

                entity.Property(e => e.Banco).IsRequired();

                entity.Property(e => e.Cheque)
                    .HasColumnType("money")
                    .HasColumnName("CHEQUE");

                entity.Property(e => e.Credito)
                    .HasColumnType("money")
                    .HasColumnName("CREDITO");

                entity.Property(e => e.Efectivo)
                    .HasColumnType("money")
                    .HasColumnName("EFECTIVO");

                entity.Property(e => e.NoPago).IsRequired();

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Reparto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tarjeta)
                    .HasColumnType("money")
                    .HasColumnName("TARJETA");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transferencia)
                    .HasColumnType("money")
                    .HasColumnName("TRANSFERENCIA");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinacetilenoex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINACETILENOEX");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Cilindros).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Disponible).HasColumnType("decimal(27, 3)");
            });

            modelBuilder.Entity<VwCoinayb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINAYB");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NombreMov)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoincargasdium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINCARGASDIA");

                entity.Property(e => e.Acarreo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AuLleno).HasColumnName("AU_Lleno");

                entity.Property(e => e.AuVacio).HasColumnName("AU_Vacio");

                entity.Property(e => e.Chofer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CjLleno).HasColumnName("CJ_Lleno");

                entity.Property(e => e.CjVacio).HasColumnName("CJ_Vacio");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.MaLleno).HasColumnName("MA_Lleno");

                entity.Property(e => e.MaVacio).HasColumnName("MA_Vacio");

                entity.Property(e => e.Mer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PaLleno).HasColumnName("PA_Lleno");

                entity.Property(e => e.PaVacio).HasColumnName("PA_Vacio");

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinconpedidosrem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINCONPEDIDOSREM");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.Movimiento)
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinconrutasdi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINCONRUTASDIS");

                entity.Property(e => e.Movimineto)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoindemandaace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINDEMANDAACE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Metros).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoindetallecodun>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINDETALLECODUN");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.PesoBruto).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Pesoneto).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Riesgo1).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Riesgo20).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Riesgo21).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Un).HasColumnName("UN");

                entity.Property(e => e.Volumen).HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<VwCoindetalleemb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINDETALLEEMB");

                entity.Property(e => e.DesCodigo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DesUm)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DesUM");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.PesoBruto).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.PesoNeto).HasColumnType("numeric(14, 6)");

                entity.Property(e => e.Volumen).HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<VwCoindetseries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINDETSERIES");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TipoSerie)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.TipoUbicacion).HasMaxLength(3);

                entity.Property(e => e.Usuario).HasMaxLength(20);
            });

            modelBuilder.Entity<VwCoinfisico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINFISICO");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(135)
                    .IsUnicode(false);

                entity.Property(e => e.Diferencia).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaFisica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ExistenciaTeorica).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaInventario).HasColumnType("datetime");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.TipoMov)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinhojaembarque>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINHOJAEMBARQUE");

                entity.Property(e => e.DesU1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DesU2)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DesU3)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DesU4)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensiones1)
                    .HasMaxLength(206)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensiones2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensiones3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensiones4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSuc)
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionSucDes).HasMaxLength(670);

                entity.Property(e => e.EstadoDes).HasMaxLength(100);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Imagen1).HasColumnType("image");

                entity.Property(e => e.Imagen2).HasColumnType("image");

                entity.Property(e => e.Imagen3).HasColumnType("image");

                entity.Property(e => e.Imagen4).HasColumnType("image");

                entity.Property(e => e.MatriculaU1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculaU2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculaU3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculaU4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MunicipioDes).HasMaxLength(150);

                entity.Property(e => e.NoEconomico1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoEconomico4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomOperador)
                    .HasMaxLength(172)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRes)
                    .HasMaxLength(172)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSucDes)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PesoU1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoU2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoU3).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PesoU4).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PuestoOperador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PuestoRes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sello)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaraU1).HasColumnType("decimal(22, 2)");

                entity.Property(e => e.Uusario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoininvauditorium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COININVAUDITORIA");

                entity.Property(e => e.ConteoFisico).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Diferencia).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Existencia).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");
            });

            modelBuilder.Entity<VwCoinmov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVS");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.SaldoCant).HasColumnType("numeric(4, 4)");

                entity.Property(e => e.Tasa).HasColumnType("decimal(23, 4)");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinmovs188>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VW_COINMOVS_188");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CondicionPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DoctoFormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteIva).HasColumnType("money");

                entity.Property(e => e.MotivoNc)
                    .HasMaxLength(15)
                    .HasColumnName("MotivoNC");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumRemision)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Paquete)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC");

                entity.Property(e => e.SaldoCant).HasColumnType("numeric(4, 4)");

                entity.Property(e => e.Tasa).HasColumnType("decimal(23, 4)");

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinmovscorrseries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVSCORRSERIES");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.IdConsecutivoMov).HasColumnName("Id_ConsecutivoMov");

                entity.Property(e => e.IdConsecutivoMovCod).HasColumnName("Id_ConsecutivoMovCod");

                entity.Property(e => e.IdConsecutivoMovSerie).HasColumnName("Id_ConsecutivoMovSerie");

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoinmovslineadium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVSLINEADIA");

                entity.Property(e => e.Caja).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Carga).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Equipo).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Galon).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Juego).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Kilo).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Libras).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Litro).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.M3).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Metro).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Paquete).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Par).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pieza).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Rollo).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Servicio).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Tambo).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCoinmovssinfamtro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVSSINFAMTRO");

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCoinmovssum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVSSUM");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.ImporteOrigen).HasColumnType("money");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.Ivaorigen)
                    .HasColumnType("money")
                    .HasColumnName("IVAOrigen");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalOrigen).HasColumnType("money");
            });

            modelBuilder.Entity<VwCoinmovtrasconsumible>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINMOVTRASCONSUMIBLES");

                entity.Property(e => e.Calle)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cc).HasColumnName("CC");

                entity.Property(e => e.CodigoPostal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DesFam)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumParte)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<VwCoinnocaptura>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINNOCAPTURA");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Existencia).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinnuloconsumo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINNULOCONSUMO");

                entity.Property(e => e.Clasificacion)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dias).HasColumnName("dias");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tipoconsumo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCONSUMO");
            });

            modelBuilder.Entity<VwCoinnuloconsumogase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINNULOCONSUMOGASES");

                entity.Property(e => e.Clasificacion)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dias).HasColumnName("dias");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FecUltCon).HasColumnType("datetime");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tipoconsumo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCONSUMO");
            });

            modelBuilder.Entity<VwCoinpedexistencium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDEXISTENCIA");

                entity.Property(e => e.FechaImportacion).HasColumnType("datetime");

                entity.Property(e => e.NumAduana)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCoinpedidorem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDIDOREM");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.Metros).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.Movimiento)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinpedidosdemandum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDIDOSDEMANDA");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Diferencia).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.Metros).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinpedidosrem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDIDOSREM");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.FechaTraspaso).HasColumnType("datetime");

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TipoSuc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinpedmerc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDMERC");

                entity.Property(e => e.CantApartada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantSolicitada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantSurtida).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.ClavePedido)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CveEnvio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DoctoSap)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DoctoSAP");

                entity.Property(e => e.Extraordinario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.InterfazSap).HasColumnName("InterfazSAP");

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPedidoSap)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TipoPedidoSAP");

                entity.Property(e => e.TotalPendiente).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TotalSolicitada).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TotalSurtida).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<VwCoinpedmercexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPEDMERCEXP");

                entity.Property(e => e.CantApartada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantSolicitada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantSurtida).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CveEnvio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).HasMaxLength(2500);

                entity.Property(e => e.Extraordinario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaPedido).HasColumnType("datetime");

                entity.Property(e => e.InterfazSap).HasColumnName("InterfazSAP");

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPendiente).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.TotalSolicitada).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.TotalSurtida).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCoinprod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPRODS");

                entity.Property(e => e.AgrupaExistencia).HasColumnName("Agrupa Existencia");

                entity.Property(e => e.ApartadoFacturacion)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Apartado Facturacion");

                entity.Property(e => e.ApartadoSucursal)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Apartado Sucursal");

                entity.Property(e => e.Backorder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Capacidad).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Clasificacion)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoElectrodos).HasColumnName("Codigo Electrodos");

                entity.Property(e => e.CveOxidom)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescCveOxidom)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpVenta)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Emp Venta");

                entity.Property(e => e.EmpaqueProv)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Empaque Prov");

                entity.Property(e => e.EmpaqueSuc)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Empaque Suc");

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FechaCambioPrecio)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha Cambio Precio");

                entity.Property(e => e.FechaUltimoConsumo)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha Ultimo Consumo");

                entity.Property(e => e.JerarquiaSap)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("JerarquiaSAP");

                entity.Property(e => e.LineaAgrupa).HasColumnName("Linea Agrupa");

                entity.Property(e => e.LineaVta).HasColumnName("Linea Vta");

                entity.Property(e => e.Material)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Maximo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.MaximoAnterior)
                    .HasColumnType("decimal(24, 3)")
                    .HasColumnName("Maximo Anterior");

                entity.Property(e => e.Minimo).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.NaturalezaQuim)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDeParte)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Numero de Parte");

                entity.Property(e => e.Origen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioAnterior)
                    .HasColumnType("money")
                    .HasColumnName("Precio Anterior");

                entity.Property(e => e.PrecioMostrador)
                    .HasColumnType("money")
                    .HasColumnName("Precio Mostrador");

                entity.Property(e => e.PrecioPiso)
                    .HasColumnType("money")
                    .HasColumnName("Precio Piso");

                entity.Property(e => e.SubTipoEnv)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("Sub TipoEnv");

                entity.Property(e => e.Tecnologia)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TiempoEntrega).HasColumnName("Tiempo Entrega");

                entity.Property(e => e.TipoEnvase)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Tipo Envase");

                entity.Property(e => e.TipoProducto)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo Producto");

                entity.Property(e => e.UnidadDeMedida)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Unidad de Medida");

                entity.Property(e => e.ValvulaEnv)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinprodecomerce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPRODECOMERCE");

                entity.Property(e => e.Existencia).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.PrecioMostrador).HasColumnType("money");

                entity.Property(e => e.Sku).HasColumnName("SKU");

                entity.Property(e => e.Unidad)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCoinprodexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINPRODEXP");

                entity.Property(e => e.CostoCompra).HasColumnType("money");

                entity.Property(e => e.DescripcionEng).HasMaxLength(2500);

                entity.Property(e => e.DescripcionEsp).HasMaxLength(2500);

                entity.Property(e => e.Existencia).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.FraccionArancelaria).HasMaxLength(18);

                entity.Property(e => e.MinimaCompra).HasColumnType("money");

                entity.Property(e => e.PCfr).HasColumnName("P_CFR");

                entity.Property(e => e.PCif).HasColumnName("P_CIF");

                entity.Property(e => e.PFob).HasColumnName("P_FOB");

                entity.Property(e => e.POtros).HasColumnName("P_Otros");

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .HasColumnName("UM");

                entity.Property(e => e.Umi)
                    .HasMaxLength(20)
                    .HasColumnName("UMI");
            });

            modelBuilder.Entity<VwCoinsaldosfacant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINSALDOSFACANT");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCoinsurmerc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINSURMERC");

                entity.Property(e => e.CantSol).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CantSurt).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCointransito>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINTRANSITOS");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.CantidadTraspaso).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEntrada).HasColumnType("date");

                entity.Property(e => e.FechaTraspaso).HasColumnType("date");

                entity.Property(e => e.FolioCodeBar)
                    .HasMaxLength(45)
                    .IsUnicode(false);

                entity.Property(e => e.FolioQr)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("FolioQR");

                entity.Property(e => e.NoSerie).IsRequired();

                entity.Property(e => e.NomAlm)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NomCteSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCointransitosenviado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINTRANSITOSENVIADOS");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.CantidadTraspaso).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEntrada).HasColumnType("date");

                entity.Property(e => e.FechaTrapaso).HasColumnType("date");

                entity.Property(e => e.FolioCodeBar)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FolioQr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FolioQR");

                entity.Property(e => e.NoSerie).IsRequired();

                entity.Property(e => e.NomAlm)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NomCteSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCointransitosrecibido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINTRANSITOSRECIBIDOS");

                entity.Property(e => e.CantidadEntrada).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadTraspaso).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEntrada).HasColumnType("date");

                entity.Property(e => e.FechaTraspaso).HasColumnType("date");

                entity.Property(e => e.FolioCodeBar)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FolioQr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FolioQR");

                entity.Property(e => e.NoSerie).IsRequired();

                entity.Property(e => e.NomAlm)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NomCteSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumPedimento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Transmision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCointraspasosdiarutum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COINTRASPASOSDIARUTA");

                entity.Property(e => e.DesUm)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DesUM");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.PesoBruto).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.PesoNeto).HasColumnType("numeric(38, 5)");

                entity.Property(e => e.Volumen).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCommovenvcte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COMMOVENVCTE");

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCooxadeudorenta2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTA2");

                entity.Property(e => e.AltaCliente).HasColumnType("datetime");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaUltPago).HasColumnType("datetime");

                entity.Property(e => e.Formapago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("formapago");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NombreClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreInst)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxadeudorentaRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTA_RPT");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(233)
                    .IsUnicode(false);

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxadeudorentaanticipadaBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTAANTICIPADA_bk");

                entity.Property(e => e.AltaCliente).HasColumnType("datetime");

                entity.Property(e => e.BajaPaciente).HasColumnType("datetime");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(582)
                    .IsUnicode(false);

                entity.Property(e => e.FechaBajaEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaCorte).HasColumnType("datetime");

                entity.Property(e => e.FechaUltPago).HasColumnType("date");

                entity.Property(e => e.FlimitePago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FLimitePago");

                entity.Property(e => e.Formapago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("formapago");

                entity.Property(e => e.ImpProxMes).HasColumnType("money");

                entity.Property(e => e.ImpVencido).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxadeudorentaanticipadaNva>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTAANTICIPADA_NVA");

                entity.Property(e => e.AltaCliente).HasColumnType("date");

                entity.Property(e => e.BajaPaciente).HasColumnType("date");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(582)
                    .IsUnicode(false);

                entity.Property(e => e.FechaBajaEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaCorte).HasColumnType("date");

                entity.Property(e => e.FechaUltPago).HasColumnType("date");

                entity.Property(e => e.FlimitePago)
                    .HasColumnType("date")
                    .HasColumnName("FLimitePago");

                entity.Property(e => e.Formapago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("formapago");

                entity.Property(e => e.ImpAdeudo).HasColumnType("money");

                entity.Property(e => e.ImpAnticipado).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxadeudorentaanticipadum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTAANTICIPADA");

                entity.Property(e => e.AltaCliente).HasColumnType("datetime");

                entity.Property(e => e.BajaPaciente).HasColumnType("datetime");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(582)
                    .IsUnicode(false);

                entity.Property(e => e.Ejecutivo).HasMaxLength(465);

                entity.Property(e => e.FechaBajaEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaCorte).HasColumnType("datetime");

                entity.Property(e => e.FechaUltPago).HasColumnType("date");

                entity.Property(e => e.FlimitePago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FLimitePago");

                entity.Property(e => e.Formapago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("formapago");

                entity.Property(e => e.ImpProxMes).HasColumnType("money");

                entity.Property(e => e.ImpVencido).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioDia).HasColumnType("money");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxadeudorentum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXADEUDORENTA");

                entity.Property(e => e.AltaCliente).HasColumnType("datetime");

                entity.Property(e => e.CteFbaja)
                    .HasColumnType("datetime")
                    .HasColumnName("CteFBaja");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(582)
                    .IsUnicode(false);

                entity.Property(e => e.Ejecutivo).HasMaxLength(465);

                entity.Property(e => e.FbajaEquipo)
                    .HasColumnType("datetime")
                    .HasColumnName("FBajaEquipo");

                entity.Property(e => e.FechaBaja).HasColumnType("date");

                entity.Property(e => e.FechaUltPago).HasColumnType("datetime");

                entity.Property(e => e.FormaCobro)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Formapago)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("formapago");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NombreClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreInst)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrecioDia).HasColumnType("money");

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxaltabajaCpapbpapcon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXALTABAJA_CPAPBPAPCON");

                entity.Property(e => e.Equipo)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxalterruteo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXALTERRUTEO");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("date");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Observ).IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("servicio");
            });

            modelBuilder.Entity<VwCooxcancondeposito>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCANCONDEPOSITO");

                entity.Property(e => e.Cancelado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fechabaja)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechabaja")
                    .IsFixedLength(true);

                entity.Property(e => e.Inst)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<VwCooxcaprecetasacumulado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCAPRECETASACUMULADO");

                entity.Property(e => e.MaxIdCaptura)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("maxIdCaptura");

                entity.Property(e => e.TipoServicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("tipoServicio");
            });

            modelBuilder.Entity<VwCooxcarga>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCARGAS");

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCLIENTES");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgrMedico).HasMaxLength(50);

                entity.Property(e => e.Clave)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Curp)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("CURP");

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClinDel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCooxclientessuspendido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCLIENTESSUSPENDIDOS");

                entity.Property(e => e.Alta).HasColumnType("date");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(582)
                    .IsUnicode(false);

                entity.Property(e => e.Equipo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaSuspencion).HasColumnType("date");

                entity.Property(e => e.FormaCobro)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MotivoSuspencion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NombreClini)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreInst)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcobrostc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCOBROSTC");

                entity.Property(e => e.Auto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("AUTO");

                entity.Property(e => e.CodigoAuto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Dot)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcobrostcAnt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCOBROSTC_ant");

                entity.Property(e => e.Auto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("AUTO");

                entity.Property(e => e.CodigoAuto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Dot)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcobrostcBk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCOBROSTC_bk");

                entity.Property(e => e.Auto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("AUTO");

                entity.Property(e => e.CodigoAuto)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Dot)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRenta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcobrostcarchivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCOBROSTCARCHIVO");

                entity.Property(e => e.ArchivoSalida).HasMaxLength(50);

                entity.Property(e => e.Auto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("AUTO")
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoAuto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaFin).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaInstalacion).HasColumnType("datetime");

                entity.Property(e => e.NoTarjeta)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCooxconsultapedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCONSULTAPEDIDOS");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FechaReactivacionEquipo).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteSee)
                    .HasColumnType("money")
                    .HasColumnName("ImporteSEE");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesCancela).IsUnicode(false);

                entity.Property(e => e.ObservacionesReactivacion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Prioridad)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxconsultapedidosSeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCONSULTAPEDIDOS_SEG");

                entity.Property(e => e.Cancelado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Chofer)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEnt)
                    .HasMaxLength(847)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEstatus)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteFactura).HasColumnType("money");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Prioridad)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ruteado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SubTipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Unidad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxconsultapedidosSegTtr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCONSULTAPEDIDOS_SEG_TTR");

                entity.Property(e => e.Cancelado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Chofer)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEnt)
                    .HasMaxLength(847)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.MarcaAlmacen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Prioridad)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ruteado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SubTipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEquipoDesc).HasMaxLength(100);

                entity.Property(e => e.Unidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioCancela)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcontrato>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCONTRATOS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FamResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdContrato).HasColumnName("Id_Contrato");

                entity.Property(e => e.Institucion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Materno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MontoRenta).HasColumnType("money");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumTarjeta)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Paterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TarjetaHabiente)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tecnico)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxcontratodetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCONTRATODETALLE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaUtlSincronizacion).HasColumnType("datetime");

                entity.Property(e => e.IdContrato).HasColumnName("Id_Contrato");

                entity.Property(e => e.ImpCubrir)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxctesduplicado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXCTESDUPLICADOS");

                entity.Property(e => e.Afiliacion).HasMaxLength(80);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxdiapacEstcon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXDIAPAC_ESTCON");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.NomClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxdiapaciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXDIAPACIENTE");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(342)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.NomClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(602)
                    .IsUnicode(false);

                entity.Property(e => e.Pertenencia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxdifequipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXDIFEQUIPO");

                entity.Property(e => e.Ccplanta).HasColumnName("CCPlanta");

                entity.Property(e => e.Email)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.FecAltaEnv).HasColumnType("datetime");

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NvoAnio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCooxdirpedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXDIRPEDIDO");

                entity.Property(e => e.Calle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.GeoLat)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLon)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdDireccion).HasColumnName("idDireccion");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxdirtraslado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXDIRTRASLADO");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.IdDireccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idDireccion");

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxequipocte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXEQUIPOCTE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaRevision).HasColumnType("datetime");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoActivoFijo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerie)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(602)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxequiposinserie>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXEQUIPOSINSERIE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAltaEnvases).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaUltConsumo).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxequiposyepen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXEQUIPOSYEPEN");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(172)
                    .IsUnicode(false);

                entity.Property(e => e.SeriesSal)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxformatob>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXFORMATOB");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaFinal).HasColumnType("datetime");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaLimite).HasColumnType("datetime");

                entity.Property(e => e.FormaCobroDesc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Institucion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Matricula)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vigente)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxhojasalidum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXHOJASALIDA");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCooxlistadoadeudoreceta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTADOADEUDORECETAS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClinicaNom)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEnt)
                    .HasMaxLength(847)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("date");

                entity.Property(e => e.FechaBaja).HasColumnType("date");

                entity.Property(e => e.Institucion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxlistadoadeudorecetasendia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTADOADEUDORECETASENDIAS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ClinicaNom)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionEnt)
                    .HasMaxLength(847)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("date");

                entity.Property(e => e.FechaBaja).HasColumnType("date");

                entity.Property(e => e.Institucion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TieneEquipo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxlistadoadeudorecetaspcallcenter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTADOADEUDORECETASPCALLCENTER");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(339)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Instituto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MesAnio)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwCooxlistadoreceta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTADORECETAS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(233)
                    .IsUnicode(false);

                entity.Property(e => e.DpfechaFin)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DPFechaFin");

                entity.Property(e => e.DpfechaInicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DPFechaInicio");

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.IdCapRecetas).HasColumnName("Id_CapRecetas");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.TipoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxlistareceta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTARECETAS");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(116)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxlistarecetasncparcial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXLISTARECETASNCPARCIAL");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(116)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCaptura)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxpagosoperador>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPAGOSOPERADOR");

                entity.Property(e => e.Deposito).HasColumnType("money");

                entity.Property(e => e.Efectivo).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.EstatusDes)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.EstatusServicio)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tarjeta).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Total).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.Trasferencia).HasColumnType("money");
            });

            modelBuilder.Entity<VwCooxpedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDIDOS");

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxpedidosdetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDIDOSDETALLE");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("FacRentaIVA");

                entity.Property(e => e.FactorIva)
                    .HasColumnType("money")
                    .HasColumnName("FactorIVA");

                entity.Property(e => e.FechaUltPago).HasColumnType("datetime");

                entity.Property(e => e.ImpRentaIva)
                    .HasColumnType("money")
                    .HasColumnName("ImpRentaIVA");

                entity.Property(e => e.ImporteConsumo).HasColumnType("money");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasColumnName("ImporteIVA");

                entity.Property(e => e.ImporteRenta).HasColumnType("money");
            });

            modelBuilder.Entity<VwCooxpedidosfacturado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDIDOSFACTURADOS");

                entity.Property(e => e.Anio).HasColumnName("anio");

                entity.Property(e => e.Calle)
                    .HasMaxLength(232)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dia).HasColumnName("dia");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsUnicode(false)
                    .HasColumnName("observaciones");

                entity.Property(e => e.Tipopago)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("tipopago");

                entity.Property(e => e.Totalporcodigo)
                    .HasColumnType("money")
                    .HasColumnName("totalporcodigo");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxpedidospendientesttr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDIDOSPENDIENTESTTR");

                entity.Property(e => e.AsignaTtr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AsignaTTR")
                    .IsFixedLength(true);

                entity.Property(e => e.DescTipoServicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.NombreEmp)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePaciente)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NominaTtr).HasColumnName("NominaTTR");

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProd).HasMaxLength(50);
            });

            modelBuilder.Entity<VwCooxpedidosruteo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDIDOSRUTEO");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(616)
                    .IsUnicode(false);

                entity.Property(e => e.Prioridadservicio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("prioridadservicio")
                    .IsFixedLength(true);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxpedpendientesfact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPEDPENDIENTESFACT");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(602)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<VwCooxpoblacionCpapbpap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPOBLACION_CPAPBPAP");

                entity.Property(e => e.Afiliacion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CC");

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Curp)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("CURP");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(339)
                    .IsUnicode(false);

                entity.Property(e => e.Ejecutivo)
                    .IsRequired()
                    .HasMaxLength(467);

                entity.Property(e => e.Equipo)
                    .HasMaxLength(111)
                    .IsUnicode(false);

                entity.Property(e => e.FamiliaServicio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Municipio)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NomClinica)
                    .HasMaxLength(106)
                    .IsUnicode(false);

                entity.Property(e => e.NomInstitucion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoConsulta)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxproducto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXPRODUCTOS");

                entity.Property(e => e.Comision)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Familia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxrecetasadeudo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXRECETASADEUDO");

                entity.Property(e => e.EstatusMov)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fechabaja).HasColumnType("datetime");

                entity.Property(e => e.FormaCobro)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCooxrentapart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXRENTAPART");

                entity.Property(e => e.Cedula)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Clave)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DescProd)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dias).HasColumnName("dias");

                entity.Property(e => e.ExentoRenta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaAlta).HasColumnType("datetime");

                entity.Property(e => e.FechaAudit).HasColumnType("datetime");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.FechaDia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaUltRenta).HasColumnType("datetime");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Precio).HasColumnType("money");

                entity.Property(e => e.PrecioEspecial).HasColumnType("money");

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoParticular)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxruteooxidom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXRUTEOOXIDOM");

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodBar)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(537)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteConsumo).HasColumnType("money");

                entity.Property(e => e.ImporteRecetas).HasColumnType("numeric(3, 2)");

                entity.Property(e => e.ImporteRenta).HasColumnType("money");

                entity.Property(e => e.Importeiva)
                    .HasColumnType("money")
                    .HasColumnName("importeiva");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxruteotipoequipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXRUTEOTIPOEQUIPO");

                entity.Property(e => e.Calle1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodBar)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(537)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FormaPago)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteConsumo).HasColumnType("money");

                entity.Property(e => e.ImporteIva)
                    .HasColumnType("money")
                    .HasColumnName("ImporteIVA");

                entity.Property(e => e.ImporteRecetas).HasColumnType("money");

                entity.Property(e => e.ImporteRenta).HasColumnType("money");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(603)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PrioridadServicio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Servicio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Telefono1)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCooxsaldosrutatot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXSALDOSRUTATOT");

                entity.Property(e => e.Clasificacion)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(113)
                    .IsUnicode(false);

                entity.Property(e => e.NombreRuta)
                    .IsRequired()
                    .HasMaxLength(188)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<VwCooxsaldosrutum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COOXSALDOSRUTA");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(113)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRemision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaMov).HasColumnType("datetime");

                entity.Property(e => e.NombreRuta)
                    .IsRequired()
                    .HasMaxLength(194)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCopdtiempoentrega>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COPDTIEMPOENTREGA");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaEntrega).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProd)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwCopolespproducto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_COPOLESPPRODUCTOS");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImporteDeposito).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.TipoServ)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCortconcentrado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTCONCENTRADO");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Credito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecharuteo)
                    .HasColumnType("date")
                    .HasColumnName("fecharuteo");

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<VwCortconcodigoga>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTCONCODIGOGAS");

                entity.Property(e => e.Cliente).HasColumnName("cliente");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Fecharuteo)
                    .HasColumnType("date")
                    .HasColumnName("fecharuteo");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCortconrutadiarium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTCONRUTADIARIA");

                entity.Property(e => e.CodigoPostal)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DireccionEnt)
                    .HasMaxLength(535)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NomRuta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Reparto)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPedido)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCortdetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTDETALLE");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Credito).HasColumnType("money");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fecharuteo)
                    .HasColumnType("date")
                    .HasColumnName("fecharuteo");

                entity.Property(e => e.Ruta).HasColumnName("ruta");

                entity.Property(e => e.Um)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<VwCortdetallerutum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTDETALLERUTA");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Credito).HasColumnType("money");

                entity.Property(e => e.Fecharuteo)
                    .HasColumnType("date")
                    .HasColumnName("fecharuteo");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCortfacturacte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTFACTURACTE");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Fecharuteo)
                    .HasColumnType("date")
                    .HasColumnName("fecharuteo");

                entity.Property(e => e.HrLleg)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Hr_Lleg");

                entity.Property(e => e.HrSal)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Hr_Sal");

                entity.Property(e => e.Kilomet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Ruta).HasColumnName("ruta");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCortliquidacionga>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CORTLIQUIDACIONGAS");

                entity.Property(e => e.C101).HasColumnName("c101");

                entity.Property(e => e.C102).HasColumnName("c102");

                entity.Property(e => e.C103).HasColumnName("c103");

                entity.Property(e => e.C104).HasColumnName("c104");

                entity.Property(e => e.C105).HasColumnName("c105");

                entity.Property(e => e.C106).HasColumnName("c106");

                entity.Property(e => e.C108).HasColumnName("c108");

                entity.Property(e => e.C109).HasColumnName("c109");

                entity.Property(e => e.C130).HasColumnName("c130");

                entity.Property(e => e.C131).HasColumnName("c131");

                entity.Property(e => e.C201).HasColumnName("c201");

                entity.Property(e => e.C203).HasColumnName("c203");

                entity.Property(e => e.C204).HasColumnName("c204");

                entity.Property(e => e.C206).HasColumnName("c206");

                entity.Property(e => e.C431).HasColumnName("c431");

                entity.Property(e => e.C432).HasColumnName("c432");

                entity.Property(e => e.Consigna1)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Consigna2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Contado).HasColumnType("money");

                entity.Property(e => e.Credito).HasColumnType("money");

                entity.Property(e => e.FechaRuteo).HasColumnType("date");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NomRuta)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwDetallecomisonesmerc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_DETALLECOMISONESMERC");

                entity.Property(e => e.Cancelada)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FecFac).HasColumnType("datetime");

                entity.Property(e => e.ImpContado).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.ImporteParaPago).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.NombreCte)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NombreEje)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.PagoCalculado).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Pagos).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.PendienteCobrar).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.PorcAplic).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.VentaSoloMes).HasColumnType("numeric(11, 2)");
            });

            modelBuilder.Entity<VwFadetallepedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_FADETALLEPEDIDOS");

                entity.Property(e => e.BackOrder).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.Cantidad).HasColumnType("decimal(24, 3)");

                entity.Property(e => e.CantidadOrigen).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Descuento).HasColumnType("money");

                entity.Property(e => e.DetalleDescripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FolioOrigen)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePartida).HasColumnType("money");

                entity.Property(e => e.Ivapartida)
                    .HasColumnType("money")
                    .HasColumnName("IVAPartida");

                entity.Property(e => e.NombreProducto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroContrato)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeIva).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.Property(e => e.SubtotalPartida).HasColumnType("money");

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<VwFamtropedido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_FAMTROPEDIDOS");

                entity.Property(e => e.AutCancelacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutExtemporaneo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Calle2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cancelo)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClasificacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveAutorizacionSat)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ClaveAutorizacionSAT");

                entity.Property(e => e.ClaveFacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPromocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Colonia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DoctoEmitir)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.FechaFe)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaFE");

                entity.Property(e => e.FechaRuteo).HasColumnType("datetime");

                entity.Property(e => e.FiltroRutas)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("FormaPagoSAT");

                entity.Property(e => e.GrupoRuta)
                    .HasMaxLength(200)
                    .HasColumnName("Grupo_Ruta");

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.MetodoPagoSat)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MetodoPagoSAT");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NoOrdenCompra)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NombreAddenda)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreClienteEntrega)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NumExt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NumMotivo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPartidas)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ObservacionesPreCargadas)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParcialTotal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedidoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PermisoIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PermisoIVA");

                entity.Property(e => e.Promocion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.SubtotalSinIva).HasColumnType("money");

                entity.Property(e => e.TasaIva)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TasaIVA");

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAddendaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCambio).HasColumnType("money");

                entity.Property(e => e.TipoCampoAuxiliar)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFacturacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.TotalFacturaOtraMoneda).HasColumnType("money");

                entity.Property(e => e.TotalFacturaPesos).HasColumnType("money");

                entity.Property(e => e.TotalFacturaSinIva).HasColumnType("money");

                entity.Property(e => e.TotalRetencion).HasColumnType("money");

                entity.Property(e => e.Totaldescuentos).HasColumnType("money");

                entity.Property(e => e.TourSolver1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TourSolver2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsoCfdi)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UsoCFDI")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioPedido)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlenviado).HasColumnName("XMLEnviado");
            });

            modelBuilder.Entity<VwHcocamov>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_HCOCAMOV");

                entity.Property(e => e.AbonosMes).HasColumnType("money");

                entity.Property(e => e.Anio)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsucursal).HasColumnName("CCSucursal");

                entity.Property(e => e.FechaFactura).HasColumnType("datetime");

                entity.Property(e => e.Mes)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Periodo1).HasColumnType("money");

                entity.Property(e => e.Periodo10).HasColumnType("money");

                entity.Property(e => e.Periodo11).HasColumnType("money");

                entity.Property(e => e.Periodo12).HasColumnType("money");

                entity.Property(e => e.Periodo13).HasColumnType("money");

                entity.Property(e => e.Periodo14).HasColumnType("money");

                entity.Property(e => e.Periodo15).HasColumnType("money");

                entity.Property(e => e.Periodo16).HasColumnType("money");

                entity.Property(e => e.Periodo17).HasColumnType("money");

                entity.Property(e => e.Periodo18).HasColumnType("money");

                entity.Property(e => e.Periodo19).HasColumnType("money");

                entity.Property(e => e.Periodo2).HasColumnType("money");

                entity.Property(e => e.Periodo20).HasColumnType("money");

                entity.Property(e => e.Periodo3).HasColumnType("money");

                entity.Property(e => e.Periodo4).HasColumnType("money");

                entity.Property(e => e.Periodo5).HasColumnType("money");

                entity.Property(e => e.Periodo6).HasColumnType("money");

                entity.Property(e => e.Periodo7).HasColumnType("money");

                entity.Property(e => e.Periodo8).HasColumnType("money");

                entity.Property(e => e.Periodo9).HasColumnType("money");

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.TipoMovimientoOrigino)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VentasMes).HasColumnType("money");
            });

            modelBuilder.Entity<VwMcoctgral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MCOCTGRAL");

                entity.Property(e => e.Calle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Codpos)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .HasMaxLength(404)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(302)
                    .IsUnicode(false);

                entity.Property(e => e.NumInt)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Numext)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("RFC")
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCte)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VwRotacionmer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ROTACIONMER");

                entity.Property(e => e.Abril).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Agosto).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Diciembre).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Enero).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Febrero).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Julio).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Junio).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Linea).HasColumnName("linea");

                entity.Property(e => e.Marzo).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Mayo).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Noviembre).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Octubre).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Septiembre).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Sucursal).HasColumnName("sucursal");
            });

            modelBuilder.Entity<VwUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Usuarios");

                entity.Property(e => e.FechaAlta).HasColumnType("smalldatetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(117)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSuc)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
     
}
